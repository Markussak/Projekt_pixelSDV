{"version":3,"file":"main-ucUFbQWb.js","sources":["../../src/utils/Platform.ts","../../src/utils/Logger.ts","../../src/core/Renderer.ts","../../src/core/InputManager.ts","../../src/core/Physics.ts","../../src/core/AudioEngine.ts","../../src/audio/ProceduralAudio.ts","../../src/ui/MainMenu.ts","../../src/core/GameStateManager.ts","../../src/entities/ShipSystems.ts","../../src/systems/WarpDrive.ts","../../src/entities/PlayerShip.ts","../../src/procedural/GalaxyGenerator.ts","../../src/procedural/GalaxyPersistence.ts","../../src/procedural/GalaxyManager.ts","../../src/ui/CockpitStatusBar.ts","../../src/entities/CelestialBody.ts","../../src/ui/InteractionPanel.ts","../../src/managers/CelestialManager.ts","../../src/rendering/SpaceBackground.ts","../../src/items/ItemSystem.ts","../../src/inventory/InventoryManager.ts","../../src/crafting/CraftingSystem.ts","../../src/combat/WeaponSystem.ts","../../src/combat/EnemyAI.ts","../../src/combat/CombatManager.ts","../../src/rpg/PlayerProgression.ts","../../src/rpg/ResearchSystem.ts","../../src/rpg/CrewManagement.ts","../../src/diplomacy/DiplomacySystem.ts","../../src/ai/AlienAI.ts","../../src/optimization/PerformanceMonitor.ts","../../src/effects/ParticleSystem.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["/**\n * Platform Detection and Management\n * Handles different deployment targets and adaptive features\n */\n\nexport enum Platform {\n    Desktop = 'desktop',\n    Mobile = 'mobile',\n    Web = 'web',\n    Tauri = 'tauri',\n    Cordova = 'cordova'\n}\n\nexport interface PlatformFeatures {\n    hasKeyboard: boolean;\n    hasTouch: boolean;\n    hasFileSystem: boolean;\n    hasFullscreen: boolean;\n    canVibrate: boolean;\n    preferredInputMethod: 'keyboard' | 'touch' | 'hybrid';\n    storageType: 'localStorage' | 'fileSystem' | 'indexedDB';\n}\n\nexport class PlatformDetector {\n    private static cachedPlatform: Platform | null = null;\n    private static cachedFeatures: PlatformFeatures | null = null;\n\n    /**\n     * Detect the current platform\n     */\n    static detect(): Platform {\n        if (this.cachedPlatform) {\n            return this.cachedPlatform;\n        }\n\n        // Check for Tauri (desktop app)\n        if ((window as any).__TAURI__) {\n            this.cachedPlatform = Platform.Tauri;\n            return this.cachedPlatform;\n        }\n\n        // Check for Cordova (mobile app)\n        if ((window as any).cordova) {\n            this.cachedPlatform = Platform.Cordova;\n            return this.cachedPlatform;\n        }\n\n        // Check for mobile browser\n        if (this.isMobile()) {\n            this.cachedPlatform = Platform.Mobile;\n            return this.cachedPlatform;\n        }\n\n        // Check for desktop browser\n        if (this.isDesktop()) {\n            this.cachedPlatform = Platform.Desktop;\n            return this.cachedPlatform;\n        }\n\n        // Default to web\n        this.cachedPlatform = Platform.Web;\n        return this.cachedPlatform;\n    }\n\n    /**\n     * Get platform-specific features\n     */\n    static getFeatures(): PlatformFeatures {\n        if (this.cachedFeatures) {\n            return this.cachedFeatures;\n        }\n\n        const platform = this.detect();\n        \n        this.cachedFeatures = {\n            hasKeyboard: this.hasKeyboard(platform),\n            hasTouch: this.hasTouch(),\n            hasFileSystem: this.hasFileSystem(platform),\n            hasFullscreen: this.hasFullscreen(),\n            canVibrate: this.canVibrate(),\n            preferredInputMethod: this.getPreferredInput(platform),\n            storageType: this.getStorageType(platform)\n        };\n\n        return this.cachedFeatures;\n    }\n\n    /**\n     * Check if running on mobile device\n     */\n    private static isMobile(): boolean {\n        // Check user agent\n        const userAgent = navigator.userAgent || navigator.vendor || (window as any).opera;\n        \n        // Check for mobile patterns\n        const mobileRegex = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i;\n        if (mobileRegex.test(userAgent)) {\n            return true;\n        }\n\n        // Check for touch capability and small screen\n        const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n        const smallScreen = window.innerWidth <= 768 || window.innerHeight <= 768;\n        \n        return hasTouch && smallScreen;\n    }\n\n    /**\n     * Check if running on desktop\n     */\n    private static isDesktop(): boolean {\n        // Check for desktop-specific features\n        const hasKeyboard = !this.isMobile();\n        const largeScreen = window.innerWidth > 768 && window.innerHeight > 768;\n        \n        // Check user agent for desktop patterns\n        const userAgent = navigator.userAgent;\n        const desktopOS = /windows|mac|linux/i.test(userAgent);\n        \n        return hasKeyboard && largeScreen && desktopOS;\n    }\n\n    /**\n     * Check if platform has keyboard support\n     */\n    private static hasKeyboard(platform: Platform): boolean {\n        switch (platform) {\n            case Platform.Desktop:\n            case Platform.Tauri:\n                return true;\n            case Platform.Mobile:\n            case Platform.Cordova:\n                return false;\n            case Platform.Web:\n                return !this.isMobile();\n            default:\n                return true;\n        }\n    }\n\n    /**\n     * Check if platform has touch support\n     */\n    private static hasTouch(): boolean {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    }\n\n    /**\n     * Check if platform has file system access\n     */\n    private static hasFileSystem(platform: Platform): boolean {\n        switch (platform) {\n            case Platform.Tauri:\n            case Platform.Cordova:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Check if platform supports fullscreen\n     */\n    private static hasFullscreen(): boolean {\n        return !!(\n            document.fullscreenEnabled ||\n            (document as any).webkitFullscreenEnabled ||\n            (document as any).mozFullScreenEnabled ||\n            (document as any).msFullscreenEnabled\n        );\n    }\n\n    /**\n     * Check if platform can vibrate\n     */\n    private static canVibrate(): boolean {\n        return 'vibrate' in navigator;\n    }\n\n    /**\n     * Get preferred input method for platform\n     */\n    private static getPreferredInput(platform: Platform): 'keyboard' | 'touch' | 'hybrid' {\n        switch (platform) {\n            case Platform.Desktop:\n            case Platform.Tauri:\n                return 'keyboard';\n            case Platform.Mobile:\n            case Platform.Cordova:\n                return 'touch';\n            case Platform.Web:\n                return this.hasTouch() ? 'hybrid' : 'keyboard';\n            default:\n                return 'hybrid';\n        }\n    }\n\n    /**\n     * Get storage type for platform\n     */\n    private static getStorageType(platform: Platform): 'localStorage' | 'fileSystem' | 'indexedDB' {\n        switch (platform) {\n            case Platform.Tauri:\n            case Platform.Cordova:\n                return 'fileSystem';\n            case Platform.Desktop:\n            case Platform.Mobile:\n            case Platform.Web:\n                return 'indexedDB';\n            default:\n                return 'localStorage';\n        }\n    }\n\n    /**\n     * Get platform-specific configuration\n     */\n    static getConfig() {\n        const platform = this.detect();\n        const features = this.getFeatures();\n\n        return {\n            platform,\n            features,\n            canvas: {\n                // Adjust canvas settings based on platform\n                pixelRatio: window.devicePixelRatio || 1,\n                maxWidth: features.hasTouch ? 800 : 1024,\n                maxHeight: features.hasTouch ? 600 : 768,\n                scalingMode: features.hasTouch ? 'fit' : 'native'\n            },\n            input: {\n                // Input configuration\n                enableKeyboard: features.hasKeyboard,\n                enableTouch: features.hasTouch,\n                enableGamepad: platform === Platform.Desktop || platform === Platform.Tauri,\n                touchSensitivity: features.hasTouch ? 1.0 : 0.0,\n                keyRepeatDelay: 250,\n                keyRepeatRate: 50\n            },\n            performance: {\n                // Performance settings based on platform\n                targetFPS: platform === Platform.Mobile ? 30 : 60,\n                enableParticles: platform !== Platform.Mobile,\n                enablePostProcessing: platform === Platform.Desktop || platform === Platform.Tauri,\n                enableShadows: platform === Platform.Desktop,\n                enableDithering: true, // Always enable for 16-bit aesthetic\n                renderScale: features.hasTouch ? 0.8 : 1.0\n            },\n            audio: {\n                // Audio settings\n                enableAudio: true,\n                enableMusic: true,\n                enableSFX: true,\n                enableSpatialAudio: platform === Platform.Desktop,\n                audioFormat: 'webm', // Fallback to mp3 if needed\n                maxChannels: platform === Platform.Mobile ? 8 : 16\n            },\n            storage: {\n                // Storage configuration\n                type: features.storageType,\n                enableAutoSave: true,\n                saveInterval: 30000, // 30 seconds\n                maxSaveSlots: platform === Platform.Mobile ? 3 : 10,\n                compressionEnabled: true\n            }\n        };\n    }\n\n    /**\n     * Check if platform supports specific feature\n     */\n    static supports(feature: keyof PlatformFeatures): boolean {\n        return Boolean(this.getFeatures()[feature]);\n    }\n\n    /**\n     * Get human-readable platform name\n     */\n    static getPlatformName(): string {\n        switch (this.detect()) {\n            case Platform.Desktop:\n                return 'Desktop Browser';\n            case Platform.Mobile:\n                return 'Mobile Browser';\n            case Platform.Web:\n                return 'Web Browser';\n            case Platform.Tauri:\n                return 'Desktop Application';\n            case Platform.Cordova:\n                return 'Mobile Application';\n            default:\n                return 'Unknown Platform';\n        }\n    }\n\n    /**\n     * Reset cached values (useful for testing)\n     */\n    static reset(): void {\n        this.cachedPlatform = null;\n        this.cachedFeatures = null;\n    }\n}","/**\n * Advanced Logging System for Space Explorer\n * Provides structured logging with different levels and platform detection\n */\n\nexport enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARN = 2,\n    ERROR = 3,\n    CRITICAL = 4\n}\n\nexport interface LogEntry {\n    timestamp: number;\n    level: LogLevel;\n    module: string;\n    message: string;\n    data?: any;\n    stack?: string;\n}\n\nexport class Logger {\n    private static globalLevel: LogLevel = LogLevel.INFO;\n    private static entries: LogEntry[] = [];\n    private static maxEntries = 1000;\n    private static enableConsole = true;\n    private static enableStorage = false;\n\n    private module: string;\n\n    constructor(module: string) {\n        this.module = module;\n    }\n\n    /**\n     * Configure global logger settings\n     */\n    static configure(config: {\n        level?: LogLevel;\n        maxEntries?: number;\n        enableConsole?: boolean;\n        enableStorage?: boolean;\n    }): void {\n        if (config.level !== undefined) Logger.globalLevel = config.level;\n        if (config.maxEntries !== undefined) Logger.maxEntries = config.maxEntries;\n        if (config.enableConsole !== undefined) Logger.enableConsole = config.enableConsole;\n        if (config.enableStorage !== undefined) Logger.enableStorage = config.enableStorage;\n    }\n\n    /**\n     * Set global log level\n     */\n    static setLevel(level: LogLevel): void {\n        Logger.globalLevel = level;\n    }\n\n    /**\n     * Log debug information\n     */\n    debug(message: string, data?: any): void {\n        this.log(LogLevel.DEBUG, message, data);\n    }\n\n    /**\n     * Log informational messages\n     */\n    info(message: string, data?: any): void {\n        this.log(LogLevel.INFO, message, data);\n    }\n\n    /**\n     * Log warnings\n     */\n    warn(message: string, data?: any): void {\n        this.log(LogLevel.WARN, message, data);\n    }\n\n    /**\n     * Log errors\n     */\n    error(message: string, error?: any): void {\n        let stack: string | undefined;\n        let data = error;\n\n        if (error instanceof Error) {\n            stack = error.stack;\n            data = {\n                name: error.name,\n                message: error.message,\n                stack: error.stack\n            };\n        }\n\n        this.log(LogLevel.ERROR, message, data, stack);\n    }\n\n    /**\n     * Log critical errors\n     */\n    critical(message: string, error?: any): void {\n        let stack: string | undefined;\n        let data = error;\n\n        if (error instanceof Error) {\n            stack = error.stack;\n            data = {\n                name: error.name,\n                message: error.message,\n                stack: error.stack\n            };\n        }\n\n        this.log(LogLevel.CRITICAL, message, data, stack);\n    }\n\n    /**\n     * Core logging method\n     */\n    private log(level: LogLevel, message: string, data?: any, stack?: string): void {\n        // Check if this level should be logged\n        if (level < Logger.globalLevel) {\n            return;\n        }\n\n        const entry: LogEntry = {\n            timestamp: Date.now(),\n            level,\n            module: this.module,\n            message,\n            data,\n            stack\n        };\n\n        // Add to entries buffer\n        Logger.addEntry(entry);\n\n        // Output to console if enabled\n        if (Logger.enableConsole) {\n            Logger.outputToConsole(entry);\n        }\n\n        // Store if enabled\n        if (Logger.enableStorage) {\n            Logger.storeEntry(entry);\n        }\n    }\n\n    /**\n     * Add entry to buffer\n     */\n    private static addEntry(entry: LogEntry): void {\n        this.entries.push(entry);\n\n        // Maintain buffer size\n        if (this.entries.length > this.maxEntries) {\n            this.entries.shift();\n        }\n    }\n\n    /**\n     * Output entry to console with proper formatting\n     */\n    private static outputToConsole(entry: LogEntry): void {\n        const timestamp = new Date(entry.timestamp).toISOString();\n        const levelName = LogLevel[entry.level];\n        const prefix = `[${timestamp}] [${levelName}] [${entry.module}]`;\n\n        // Choose console method based on level\n        let consoleMethod: 'debug' | 'log' | 'warn' | 'error';\n        let style = '';\n\n        switch (entry.level) {\n            case LogLevel.DEBUG:\n                consoleMethod = 'debug';\n                style = 'color: #888; font-size: 11px;';\n                break;\n            case LogLevel.INFO:\n                consoleMethod = 'log';\n                style = 'color: #0f0; font-weight: bold;';\n                break;\n            case LogLevel.WARN:\n                consoleMethod = 'warn';\n                style = 'color: #ff0; font-weight: bold;';\n                break;\n            case LogLevel.ERROR:\n                consoleMethod = 'error';\n                style = 'color: #f00; font-weight: bold;';\n                break;\n            case LogLevel.CRITICAL:\n                consoleMethod = 'error';\n                style = 'color: #f00; font-weight: bold; background: #400;';\n                break;\n            default:\n                consoleMethod = 'log';\n        }\n\n        // Format message\n        if (entry.data !== undefined) {\n            console[consoleMethod](`%c${prefix} ${entry.message}`, style, entry.data);\n        } else {\n            console[consoleMethod](`%c${prefix} ${entry.message}`, style);\n        }\n\n        // Show stack trace for errors\n        if (entry.stack && (entry.level === LogLevel.ERROR || entry.level === LogLevel.CRITICAL)) {\n            console.groupCollapsed('Stack Trace');\n            console.error(entry.stack);\n            console.groupEnd();\n        }\n    }\n\n    /**\n     * Store entry to persistent storage\n     */\n    private static async storeEntry(entry: LogEntry): Promise<void> {\n        try {\n            // Store in localStorage for now (could be enhanced for different platforms)\n            const stored = localStorage.getItem('spaceExplorer_logs');\n            const logs = stored ? JSON.parse(stored) : [];\n            \n            logs.push(entry);\n            \n            // Keep only recent entries\n            if (logs.length > this.maxEntries) {\n                logs.splice(0, logs.length - this.maxEntries);\n            }\n            \n            localStorage.setItem('spaceExplorer_logs', JSON.stringify(logs));\n        } catch (error) {\n            // Silently fail if storage is not available\n            console.warn('Failed to store log entry:', error);\n        }\n    }\n\n    /**\n     * Get all log entries\n     */\n    static getEntries(): LogEntry[] {\n        return [...this.entries];\n    }\n\n    /**\n     * Get entries filtered by level\n     */\n    static getEntriesByLevel(level: LogLevel): LogEntry[] {\n        return this.entries.filter(entry => entry.level === level);\n    }\n\n    /**\n     * Get entries filtered by module\n     */\n    static getEntriesByModule(module: string): LogEntry[] {\n        return this.entries.filter(entry => entry.module === module);\n    }\n\n    /**\n     * Clear all log entries\n     */\n    static clear(): void {\n        this.entries = [];\n        \n        if (this.enableStorage) {\n            try {\n                localStorage.removeItem('spaceExplorer_logs');\n            } catch (error) {\n                // Silently fail\n            }\n        }\n    }\n\n    /**\n     * Export logs as JSON string\n     */\n    static export(): string {\n        return JSON.stringify({\n            exported: new Date().toISOString(),\n            platform: navigator.userAgent,\n            entries: this.entries\n        }, null, 2);\n    }\n\n    /**\n     * Load logs from storage\n     */\n    static async loadFromStorage(): Promise<void> {\n        try {\n            const stored = localStorage.getItem('spaceExplorer_logs');\n            if (stored) {\n                const logs = JSON.parse(stored);\n                this.entries = logs.slice(-this.maxEntries);\n            }\n        } catch (error) {\n            console.warn('Failed to load logs from storage:', error);\n        }\n    }\n\n    /**\n     * Performance logging utility\n     */\n    static performance = {\n        timers: new Map<string, number>(),\n\n        start(name: string): void {\n            this.timers.set(name, performance.now());\n        },\n\n        end(name: string, logger?: Logger): number {\n            const startTime = this.timers.get(name);\n            if (startTime === undefined) {\n                console.warn(`Timer \"${name}\" was not started`);\n                return 0;\n            }\n\n            const duration = performance.now() - startTime;\n            this.timers.delete(name);\n\n            if (logger) {\n                logger.debug(`Performance: ${name} took ${duration.toFixed(2)}ms`);\n            }\n\n            return duration;\n        },\n\n        measure<T>(name: string, fn: () => T, logger?: Logger): T {\n            this.start(name);\n            try {\n                const result = fn();\n                this.end(name, logger);\n                return result;\n            } catch (error) {\n                this.end(name, logger);\n                throw error;\n            }\n        },\n\n        async measureAsync<T>(name: string, fn: () => Promise<T>, logger?: Logger): Promise<T> {\n            this.start(name);\n            try {\n                const result = await fn();\n                this.end(name, logger);\n                return result;\n            } catch (error) {\n                this.end(name, logger);\n                throw error;\n            }\n        }\n    };\n\n    /**\n     * Create module-specific performance logger\n     */\n    createPerformanceLogger() {\n        return {\n            start: (name: string) => Logger.performance.start(`${this.module}:${name}`),\n            end: (name: string) => Logger.performance.end(`${this.module}:${name}`, this),\n            measure: <T>(name: string, fn: () => T) => \n                Logger.performance.measure(`${this.module}:${name}`, fn, this),\n            measureAsync: <T>(name: string, fn: () => Promise<T>) => \n                Logger.performance.measureAsync(`${this.module}:${name}`, fn, this)\n        };\n    }\n}\n\n// Configure logger based on environment\nif (import.meta.env.DEV) {\n    Logger.configure({\n        level: LogLevel.DEBUG,\n        enableConsole: true,\n        enableStorage: true\n    });\n} else {\n    Logger.configure({\n        level: LogLevel.INFO,\n        enableConsole: false,\n        enableStorage: true\n    });\n}\n\n// Load existing logs\nLogger.loadFromStorage();","/**\n * HTML5 Canvas Renderer with 16-bit Aesthetic\n * Handles pixel-perfect rendering, WebGL shaders, and retro CRT effects\n */\n\nimport { Platform } from '@utils/Platform';\nimport { Logger } from '@utils/Logger';\n\nexport interface RenderConfig {\n    pixelRatio: number;\n    enablePixelPerfect: boolean;\n    enableDithering: boolean;\n    enableCRT: boolean;\n    enablePostProcessing: boolean;\n    backgroundColor: string;\n}\n\nexport interface Color {\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n}\n\nexport interface Vector2 {\n    x: number;\n    y: number;\n}\n\nexport interface Sprite {\n    data: ImageData;\n    width: number;\n    height: number;\n}\n\nexport class Renderer {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    private platform: Platform;\n    private config: RenderConfig;\n    \n    // WebGL support for shaders\n    private gl: WebGLRenderingContext | null = null;\n    private shaderPrograms: Map<string, WebGLProgram> = new Map();\n    \n    // 16-bit color palette\n    private colorPalette: Color[] = [];\n    \n    // Render targets\n    private backBuffer!: ImageData;\n    private frontBuffer!: ImageData;\n    \n    // Performance tracking\n    private renderStats = {\n        drawCalls: 0,\n        triangles: 0,\n        sprites: 0,\n        particles: 0\n    };\n    \n    private logger: Logger;\n\n    constructor(canvas: HTMLCanvasElement, platform: Platform) {\n        this.canvas = canvas;\n        this.platform = platform;\n        this.logger = new Logger('Renderer');\n        \n        // Get 2D context\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('Failed to get 2D rendering context');\n        }\n        this.ctx = ctx;\n        \n        // Setup configuration\n        this.config = {\n            pixelRatio: window.devicePixelRatio || 1,\n            enablePixelPerfect: true,\n            enableDithering: true,\n            enableCRT: platform !== Platform.Mobile, // Disable CRT on mobile for performance\n            enablePostProcessing: platform === Platform.Desktop,\n            backgroundColor: '#000000'\n        };\n        \n        this.logger.info('🎨 Renderer initialized', {\n            canvasSize: `${canvas.width}x${canvas.height}`,\n            platform: platform,\n            config: this.config\n        });\n    }\n\n    /**\n     * Initialize the renderer\n     */\n    async initialize(): Promise<void> {\n        this.logger.info('🔧 Initializing renderer...');\n        \n        try {\n            // Setup canvas for pixel-perfect rendering\n            this.setupPixelPerfectCanvas();\n            \n            // Generate 16-bit color palette\n            this.generateColorPalette();\n            \n            // Initialize WebGL if available and needed\n            if (this.config.enableCRT || this.config.enablePostProcessing) {\n                this.initializeWebGL();\n            }\n            \n            // Create render buffers\n            this.createRenderBuffers();\n            \n            this.logger.info('✅ Renderer initialization completed');\n            \n        } catch (error) {\n            this.logger.error('❌ Renderer initialization failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Setup canvas for pixel-perfect rendering\n     */\n    private setupPixelPerfectCanvas(): void {\n        // Disable image smoothing for pixel art\n        this.ctx.imageSmoothingEnabled = false;\n        (this.ctx as any).webkitImageSmoothingEnabled = false;\n        (this.ctx as any).mozImageSmoothingEnabled = false;\n        (this.ctx as any).msImageSmoothingEnabled = false;\n        \n        // Set pixel ratio scaling\n        const scale = this.config.pixelRatio;\n        this.canvas.style.width = `${this.canvas.width}px`;\n        this.canvas.style.height = `${this.canvas.height}px`;\n        this.canvas.width *= scale;\n        this.canvas.height *= scale;\n        this.ctx.scale(scale, scale);\n        \n        this.logger.debug('Canvas configured for pixel-perfect rendering', {\n            scale: scale,\n            size: `${this.canvas.width}x${this.canvas.height}`\n        });\n    }\n\n        /**\n     * Generate 16-bit color palette - Dark, muted, retro CRT style (Power of Ten/Alien 1979)\n     */\n    private generateColorPalette(): void {\n        this.colorPalette = [\n            // Deep blacks and dark grays (foundation)\n            { r: 0, g: 0, b: 0 },           // Pure black\n            { r: 8, g: 8, b: 8 },           // Very dark gray\n            { r: 16, g: 16, b: 16 },        // Dark gray\n            { r: 24, g: 24, b: 24 },        // Medium dark gray\n\n            // Muted dark greens (classic terminal/CRT phosphor)\n            { r: 4, g: 12, b: 4 },          // Very dark green\n            { r: 8, g: 24, b: 8 },          // Dark green\n            { r: 12, g: 36, b: 12 },        // Muted green\n            { r: 16, g: 48, b: 16 },        // Terminal green\n\n            // Worn amber/yellow (old CRT monitors)\n            { r: 24, g: 16, b: 4 },         // Dark amber\n            { r: 48, g: 32, b: 8 },         // Amber\n            { r: 72, g: 48, b: 12 },        // Worn amber\n            { r: 96, g: 64, b: 16 },        // Bright amber\n\n            // Faded orange warnings (damaged systems)\n            { r: 32, g: 16, b: 4 },         // Dark orange\n            { r: 64, g: 32, b: 8 },         // Faded orange\n            { r: 96, g: 48, b: 12 },        // Orange warning\n            { r: 128, g: 64, b: 16 },       // Bright orange\n\n            // Muted reds (critical alerts)\n            { r: 24, g: 8, b: 8 },          // Very dark red\n            { r: 48, g: 16, b: 16 },        // Dark red\n            { r: 72, g: 24, b: 24 },        // Muted red\n            { r: 96, g: 32, b: 32 },        // Alert red\n\n            // Deep blue-grays (space/depth)\n            { r: 8, g: 12, b: 20 },         // Deep blue-gray\n            { r: 16, g: 24, b: 40 },        // Blue-gray\n            { r: 24, g: 36, b: 60 },        // Space blue\n            { r: 32, g: 48, b: 80 },        // Bright blue-gray\n\n            // Faded cyan/teal (shields/energy)\n            { r: 8, g: 20, b: 16 },         // Dark teal\n            { r: 16, g: 40, b: 32 },        // Teal\n            { r: 24, g: 60, b: 48 },        // Faded cyan\n            { r: 32, g: 80, b: 64 },        // Bright teal\n\n            // Muted purples (exotic/alien)\n            { r: 16, g: 8, b: 24 },         // Dark purple\n            { r: 32, g: 16, b: 48 },        // Purple\n            { r: 48, g: 24, b: 72 },        // Muted purple\n            { r: 64, g: 32, b: 96 },        // Bright purple\n\n            // Light grays and worn whites\n            { r: 32, g: 32, b: 32 },        // Medium gray\n            { r: 48, g: 48, b: 48 },        // Light gray\n            { r: 64, g: 64, b: 64 },        // Bright gray\n            { r: 80, g: 80, b: 80 }         // Worn white\n        ];\n\n        this.logger.debug(`Generated dark retro 16-bit color palette with ${this.colorPalette.length} colors`);\n    }\n\n    /**\n     * Initialize WebGL for shader effects\n     */\n    private initializeWebGL(): void {\n        try {\n            this.gl = this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl') as WebGLRenderingContext;\n            \n            if (this.gl) {\n                this.logger.info('✅ WebGL context initialized for shader effects');\n                // TODO: Load and compile shaders in future phases\n            } else {\n                this.logger.warn('⚠️ WebGL not available, falling back to 2D canvas only');\n                this.config.enableCRT = false;\n                this.config.enablePostProcessing = false;\n            }\n        } catch (error) {\n            this.logger.warn('⚠️ WebGL initialization failed', error);\n            this.gl = null;\n            this.config.enableCRT = false;\n            this.config.enablePostProcessing = false;\n        }\n    }\n\n    /**\n     * Create render buffers for double buffering\n     */\n    private createRenderBuffers(): void {\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        \n        this.backBuffer = this.ctx.createImageData(width, height);\n        this.frontBuffer = this.ctx.createImageData(width, height);\n        \n        // Fill with background color\n        this.clearBuffer(this.backBuffer, this.hexToColor(this.config.backgroundColor));\n        \n        this.logger.debug('Render buffers created', { width, height });\n    }\n\n    /**\n     * Begin frame rendering\n     */\n    beginFrame(): void {\n        // Clear render stats\n        this.renderStats.drawCalls = 0;\n        this.renderStats.triangles = 0;\n        this.renderStats.sprites = 0;\n        this.renderStats.particles = 0;\n        \n        // Clear canvas\n        this.ctx.fillStyle = this.config.backgroundColor;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Clear back buffer\n        this.clearBuffer(this.backBuffer, this.hexToColor(this.config.backgroundColor));\n    }\n\n    /**\n     * End frame rendering and apply post-processing\n     */\n    endFrame(): void {\n        // Apply dithering if enabled\n        if (this.config.enableDithering) {\n            this.applyDithering(this.backBuffer);\n        }\n        \n        // Copy back buffer to canvas\n        this.ctx.putImageData(this.backBuffer, 0, 0);\n        \n        // Apply CRT effects if enabled\n        if (this.config.enableCRT && this.gl) {\n            this.applyCRTEffect();\n        }\n        \n        this.renderStats.drawCalls++;\n    }\n\n    /**\n     * Clear a buffer with a specific color\n     */\n    private clearBuffer(buffer: ImageData, color: Color): void {\n        const data = buffer.data;\n        for (let i = 0; i < data.length; i += 4) {\n            data[i] = color.r;     // Red\n            data[i + 1] = color.g; // Green\n            data[i + 2] = color.b; // Blue\n            data[i + 3] = color.a !== undefined ? color.a : 255; // Alpha\n        }\n    }\n\n    /**\n     * Set pixel in buffer with dithering\n     */\n    setPixel(x: number, y: number, color: Color): void {\n        x = Math.floor(x);\n        y = Math.floor(y);\n        \n        if (x < 0 || x >= this.canvas.width || y < 0 || y >= this.canvas.height) {\n            return;\n        }\n        \n        const index = (y * this.canvas.width + x) * 4;\n        const data = this.backBuffer.data;\n        \n        data[index] = color.r;\n        data[index + 1] = color.g;\n        data[index + 2] = color.b;\n        data[index + 3] = color.a !== undefined ? color.a : 255;\n    }\n\n    /**\n     * Draw a filled rectangle\n     */\n    fillRect(x: number, y: number, width: number, height: number, color: Color): void {\n        for (let py = y; py < y + height; py++) {\n            for (let px = x; px < x + width; px++) {\n                this.setPixel(px, py, color);\n            }\n        }\n        this.renderStats.drawCalls++;\n    }\n\n    /**\n     * Draw a line using Bresenham's algorithm\n     */\n    drawLine(x0: number, y0: number, x1: number, y1: number, color: Color): void {\n        x0 = Math.floor(x0);\n        y0 = Math.floor(y0);\n        x1 = Math.floor(x1);\n        y1 = Math.floor(y1);\n        \n        const dx = Math.abs(x1 - x0);\n        const dy = Math.abs(y1 - y0);\n        const sx = x0 < x1 ? 1 : -1;\n        const sy = y0 < y1 ? 1 : -1;\n        let err = dx - dy;\n        \n        let x = x0;\n        let y = y0;\n        \n        while (true) {\n            this.setPixel(x, y, color);\n            \n            if (x === x1 && y === y1) break;\n            \n            const e2 = 2 * err;\n            if (e2 > -dy) {\n                err -= dy;\n                x += sx;\n            }\n            if (e2 < dx) {\n                err += dx;\n                y += sy;\n            }\n        }\n        \n        this.renderStats.drawCalls++;\n    }\n\n    /**\n     * Draw a circle\n     */\n    drawCircle(centerX: number, centerY: number, radius: number, color: Color, filled: boolean = false): void {\n        centerX = Math.floor(centerX);\n        centerY = Math.floor(centerY);\n        radius = Math.floor(radius);\n        \n        if (filled) {\n            // Filled circle\n            for (let y = -radius; y <= radius; y++) {\n                for (let x = -radius; x <= radius; x++) {\n                    if (x * x + y * y <= radius * radius) {\n                        this.setPixel(centerX + x, centerY + y, color);\n                    }\n                }\n            }\n        } else {\n            // Circle outline using Bresenham's circle algorithm\n            let x = 0;\n            let y = radius;\n            let d = 3 - 2 * radius;\n            \n            while (y >= x) {\n                // Draw octants\n                this.setPixel(centerX + x, centerY + y, color);\n                this.setPixel(centerX - x, centerY + y, color);\n                this.setPixel(centerX + x, centerY - y, color);\n                this.setPixel(centerX - x, centerY - y, color);\n                this.setPixel(centerX + y, centerY + x, color);\n                this.setPixel(centerX - y, centerY + x, color);\n                this.setPixel(centerX + y, centerY - x, color);\n                this.setPixel(centerX - y, centerY - x, color);\n                \n                x++;\n                if (d > 0) {\n                    y--;\n                    d = d + 4 * (x - y) + 10;\n                } else {\n                    d = d + 4 * x + 6;\n                }\n            }\n        }\n        \n        this.renderStats.drawCalls++;\n    }\n\n    /**\n     * Render text with retro font styling\n     */\n    renderText(text: string, x: number, y: number, color: Color, size: number = 12): void {\n        // Save current context\n        this.ctx.save();\n        \n        // Set font and color\n        this.ctx.font = `${size}px \"Courier New\", monospace`;\n        this.ctx.fillStyle = this.colorToHex(color);\n        this.ctx.textBaseline = 'top';\n        \n        // Add retro glow effect\n        this.ctx.shadowColor = this.colorToHex(color);\n        this.ctx.shadowBlur = 2;\n        \n        // Render text\n        this.ctx.fillText(text, x, y);\n        \n        // Restore context\n        this.ctx.restore();\n        \n        this.renderStats.drawCalls++;\n    }\n\n    /**\n     * Render debug text array\n     */\n    renderDebugText(lines: string[], x: number, y: number): void {\n        const lineHeight = 14;\n        const backgroundColor = { r: 0, g: 0, b: 0, a: 128 };\n        const textColor = { r: 0, g: 255, b: 0 }; // Green terminal color\n        \n        // Draw background\n        const maxWidth = Math.max(...lines.map(line => line.length)) * 8;\n        this.fillRect(x - 2, y - 2, maxWidth + 4, lines.length * lineHeight + 4, backgroundColor);\n        \n        // Draw text lines\n        lines.forEach((line, index) => {\n            this.renderText(line, x, y + index * lineHeight, textColor, 12);\n        });\n    }\n\n    /**\n     * Generate procedural space ship sprite\n     */\n    generateShipSprite(type: 'player' | 'enemy' | 'ally', size: number = 32): Sprite {\n        const imageData = this.ctx.createImageData(size, size);\n        const data = imageData.data;\n        \n        // Clear to transparent\n        for (let i = 0; i < data.length; i += 4) {\n            data[i + 3] = 0; // Alpha = 0 (transparent)\n        }\n        \n        // Ship color based on type\n        let shipColor: Color;\n        switch (type) {\n            case 'player':\n                shipColor = { r: 0, g: 255, b: 0 }; // Green\n                break;\n            case 'enemy':\n                shipColor = { r: 255, g: 0, b: 0 }; // Red\n                break;\n            case 'ally':\n                shipColor = { r: 0, g: 128, b: 255 }; // Blue\n                break;\n        }\n        \n        // Simple ship design (triangle pointing up)\n        const centerX = size / 2;\n        const centerY = size / 2;\n        \n        // Draw ship body\n        for (let y = 0; y < size; y++) {\n            for (let x = 0; x < size; x++) {\n                const dx = x - centerX;\n                const dy = y - centerY;\n                \n                // Triangle shape\n                if (dy > -centerY * 0.8 && dy < centerY * 0.6) {\n                    const width = (centerY * 0.8 + dy) * 0.3;\n                    if (Math.abs(dx) < width) {\n                        const index = (y * size + x) * 4;\n                        data[index] = shipColor.r;\n                        data[index + 1] = shipColor.g;\n                        data[index + 2] = shipColor.b;\n                        data[index + 3] = 255;\n                    }\n                }\n            }\n        }\n        \n        this.renderStats.sprites++;\n        return {\n            data: imageData,\n            width: size,\n            height: size\n        };\n    }\n\n    /**\n     * Draw a sprite\n     */\n    drawSprite(sprite: Sprite, x: number, y: number): void {\n        this.ctx.putImageData(sprite.data, x, y);\n        this.renderStats.sprites++;\n    }\n\n    /**\n     * Apply dithering to reduce color banding\n     */\n    private applyDithering(buffer: ImageData): void {\n        if (!this.config.enableDithering) return;\n        \n        const data = buffer.data;\n        const width = buffer.width;\n        const height = buffer.height;\n        \n        // Floyd-Steinberg dithering\n        for (let y = 0; y < height - 1; y++) {\n            for (let x = 1; x < width - 1; x++) {\n                const index = (y * width + x) * 4;\n                \n                // Get current pixel\n                const oldR = data[index];\n                const oldG = data[index + 1];\n                const oldB = data[index + 2];\n                \n                // Find nearest palette color\n                const newColor = this.findNearestPaletteColor({ r: oldR, g: oldG, b: oldB });\n                \n                // Set new color\n                data[index] = newColor.r;\n                data[index + 1] = newColor.g;\n                data[index + 2] = newColor.b;\n                \n                // Calculate quantization error\n                const errorR = oldR - newColor.r;\n                const errorG = oldG - newColor.g;\n                const errorB = oldB - newColor.b;\n                \n                // Distribute error to neighboring pixels\n                this.distributeError(data, width, x + 1, y, errorR, errorG, errorB, 7/16);\n                this.distributeError(data, width, x - 1, y + 1, errorR, errorG, errorB, 3/16);\n                this.distributeError(data, width, x, y + 1, errorR, errorG, errorB, 5/16);\n                this.distributeError(data, width, x + 1, y + 1, errorR, errorG, errorB, 1/16);\n            }\n        }\n    }\n\n    /**\n     * Distribute dithering error to neighboring pixel\n     */\n    private distributeError(data: Uint8ClampedArray, width: number, x: number, y: number, \n                          errorR: number, errorG: number, errorB: number, factor: number): void {\n        const index = (y * width + x) * 4;\n        if (index >= 0 && index < data.length - 3) {\n            data[index] = Math.max(0, Math.min(255, data[index] + errorR * factor));\n            data[index + 1] = Math.max(0, Math.min(255, data[index + 1] + errorG * factor));\n            data[index + 2] = Math.max(0, Math.min(255, data[index + 2] + errorB * factor));\n        }\n    }\n\n    /**\n     * Find nearest color in palette\n     */\n    private findNearestPaletteColor(color: Color): Color {\n        let nearestColor = this.colorPalette[0];\n        let minDistance = Number.MAX_VALUE;\n        \n        for (const paletteColor of this.colorPalette) {\n            const distance = Math.sqrt(\n                Math.pow(color.r - paletteColor.r, 2) +\n                Math.pow(color.g - paletteColor.g, 2) +\n                Math.pow(color.b - paletteColor.b, 2)\n            );\n            \n            if (distance < minDistance) {\n                minDistance = distance;\n                nearestColor = paletteColor;\n            }\n        }\n        \n        return nearestColor;\n    }\n\n    /**\n     * Apply CRT effect (basic implementation)\n     */\n    private applyCRTEffect(): void {\n        // This would use WebGL shaders for proper CRT effects\n        // For now, just apply scanlines via CSS (already done in HTML)\n        this.logger.debug('CRT effect applied (CSS-based)');\n    }\n\n    /**\n     * Handle canvas resize\n     */\n    handleResize(): void {\n        // Recreate render buffers\n        this.createRenderBuffers();\n        this.logger.debug('Renderer resized');\n    }\n\n    /**\n     * Convert hex color to Color object\n     */\n    private hexToColor(hex: string): Color {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : { r: 0, g: 0, b: 0 };\n    }\n\n    /**\n     * Convert Color object to hex string\n     */\n    private colorToHex(color: Color): string {\n        const toHex = (c: number) => {\n            const hex = Math.round(c).toString(16);\n            return hex.length === 1 ? '0' + hex : hex;\n        };\n        return `#${toHex(color.r)}${toHex(color.g)}${toHex(color.b)}`;\n    }\n\n    /**\n     * Get render statistics\n     */\n    getRenderStats() {\n        return { ...this.renderStats };\n    }\n\n    /**\n     * Draw a filled rectangle\n     */\n    drawRect(x: number, y: number, width: number, height: number, color: Color): void {\n        this.ctx.fillStyle = this.colorToHex(color);\n        this.ctx.fillRect(x, y, width, height);\n    }\n\n\n\n    /**\n     * Cleanup resources\n     */\n    cleanup(): void {\n        // Clear WebGL resources if available\n        if (this.gl) {\n            this.shaderPrograms.forEach(program => {\n                this.gl!.deleteProgram(program);\n            });\n            this.shaderPrograms.clear();\n        }\n        \n        this.logger.info('🧹 Renderer cleanup completed');\n    }\n}","/**\n * Input Management System\n * Handles keyboard, mouse, and touch input with platform-specific adaptations\n */\n\nimport { Platform } from '@utils/Platform';\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\n\nexport interface InputState {\n    // Keyboard\n    keys: Set<string>;\n    keysPressed: Set<string>;\n    keysReleased: Set<string>;\n    \n    // Mouse\n    mousePosition: Vector2;\n    mouseButtons: Set<number>;\n    mouseButtonsPressed: Set<number>;\n    mouseButtonsReleased: Set<number>;\n    mouseWheel: number;\n    \n    // Touch\n    touches: Touch[];\n    touchStarted: boolean;\n    touchEnded: boolean;\n    \n    // Virtual controls for mobile\n    virtualThrust: number;\n    virtualRotation: number;\n    virtualAction: boolean;\n}\n\nexport interface GamepadState {\n    connected: boolean;\n    axes: number[];\n    buttons: boolean[];\n}\n\nexport class InputManager {\n    private canvas: HTMLCanvasElement;\n    private platform: Platform;\n    private currentState: InputState;\n    private previousState: InputState;\n    \n    // Gamepad support\n    private gamepads: Map<number, GamepadState> = new Map();\n    \n    // Touch controls\n    private touchZones: Map<string, TouchZone> = new Map();\n    private activeTouches: Map<number, TouchInfo> = new Map();\n    \n    // Input configuration\n    private config = {\n        enableKeyboard: true,\n        enableMouse: true,\n        enableTouch: true,\n        enableGamepad: true,\n        touchSensitivity: 1.0,\n        keyRepeatDelay: 250,\n        keyRepeatRate: 50\n    };\n    \n    private logger: Logger;\n    private eventListeners: Array<() => void> = [];\n\n    constructor(canvas: HTMLCanvasElement, platform: Platform) {\n        this.canvas = canvas;\n        this.platform = platform;\n        this.logger = new Logger('InputManager');\n        \n        // Initialize input states\n        this.currentState = this.createEmptyInputState();\n        this.previousState = this.createEmptyInputState();\n        \n        // Configure input based on platform\n        this.configureForPlatform();\n        \n        // Setup event listeners\n        this.setupEventListeners();\n        \n        // Setup touch zones for mobile\n        if (this.config.enableTouch) {\n            this.setupTouchZones();\n        }\n        \n        this.logger.info('🎮 Input manager initialized', {\n            platform: platform,\n            config: this.config\n        });\n    }\n\n    /**\n     * Configure input settings based on platform\n     */\n    private configureForPlatform(): void {\n        switch (this.platform) {\n            case Platform.Desktop:\n            case Platform.Tauri:\n                this.config.enableKeyboard = true;\n                this.config.enableMouse = true;\n                this.config.enableTouch = false;\n                this.config.enableGamepad = true;\n                break;\n                \n            case Platform.Mobile:\n            case Platform.Cordova:\n                this.config.enableKeyboard = false;\n                this.config.enableMouse = false;\n                this.config.enableTouch = true;\n                this.config.enableGamepad = false;\n                this.config.touchSensitivity = 1.5;\n                break;\n                \n            case Platform.Web:\n                // Hybrid mode - detect capabilities\n                this.config.enableKeyboard = true;\n                this.config.enableMouse = true;\n                this.config.enableTouch = 'ontouchstart' in window;\n                this.config.enableGamepad = 'getGamepads' in navigator;\n                break;\n        }\n    }\n\n    /**\n     * Setup event listeners for input\n     */\n    private setupEventListeners(): void {\n        // Keyboard events\n        if (this.config.enableKeyboard) {\n            const keyDownHandler = (e: KeyboardEvent) => this.handleKeyDown(e);\n            const keyUpHandler = (e: KeyboardEvent) => this.handleKeyUp(e);\n            \n            document.addEventListener('keydown', keyDownHandler);\n            document.addEventListener('keyup', keyUpHandler);\n            \n            this.eventListeners.push(() => {\n                document.removeEventListener('keydown', keyDownHandler);\n                document.removeEventListener('keyup', keyUpHandler);\n            });\n        }\n        \n        // Mouse events\n        if (this.config.enableMouse) {\n            const mouseMoveHandler = (e: MouseEvent) => this.handleMouseMove(e);\n            const mouseDownHandler = (e: MouseEvent) => this.handleMouseDown(e);\n            const mouseUpHandler = (e: MouseEvent) => this.handleMouseUp(e);\n            const wheelHandler = (e: WheelEvent) => this.handleWheel(e);\n            \n            this.canvas.addEventListener('mousemove', mouseMoveHandler);\n            this.canvas.addEventListener('mousedown', mouseDownHandler);\n            this.canvas.addEventListener('mouseup', mouseUpHandler);\n            this.canvas.addEventListener('wheel', wheelHandler);\n            \n            this.eventListeners.push(() => {\n                this.canvas.removeEventListener('mousemove', mouseMoveHandler);\n                this.canvas.removeEventListener('mousedown', mouseDownHandler);\n                this.canvas.removeEventListener('mouseup', mouseUpHandler);\n                this.canvas.removeEventListener('wheel', wheelHandler);\n            });\n        }\n        \n        // Touch events\n        if (this.config.enableTouch) {\n            const touchStartHandler = (e: TouchEvent) => this.handleTouchStart(e);\n            const touchMoveHandler = (e: TouchEvent) => this.handleTouchMove(e);\n            const touchEndHandler = (e: TouchEvent) => this.handleTouchEnd(e);\n            \n            this.canvas.addEventListener('touchstart', touchStartHandler, { passive: false });\n            this.canvas.addEventListener('touchmove', touchMoveHandler, { passive: false });\n            this.canvas.addEventListener('touchend', touchEndHandler, { passive: false });\n            \n            this.eventListeners.push(() => {\n                this.canvas.removeEventListener('touchstart', touchStartHandler);\n                this.canvas.removeEventListener('touchmove', touchMoveHandler);\n                this.canvas.removeEventListener('touchend', touchEndHandler);\n            });\n        }\n        \n        // Gamepad events\n        if (this.config.enableGamepad) {\n            const gamepadConnectedHandler = (e: GamepadEvent) => this.handleGamepadConnected(e);\n            const gamepadDisconnectedHandler = (e: GamepadEvent) => this.handleGamepadDisconnected(e);\n            \n            window.addEventListener('gamepadconnected', gamepadConnectedHandler);\n            window.addEventListener('gamepaddisconnected', gamepadDisconnectedHandler);\n            \n            this.eventListeners.push(() => {\n                window.removeEventListener('gamepadconnected', gamepadConnectedHandler);\n                window.removeEventListener('gamepaddisconnected', gamepadDisconnectedHandler);\n            });\n        }\n        \n        // Focus events to handle window focus\n        const focusHandler = () => this.handleFocus();\n        const blurHandler = () => this.handleBlur();\n        \n        window.addEventListener('focus', focusHandler);\n        window.addEventListener('blur', blurHandler);\n        \n        this.eventListeners.push(() => {\n            window.removeEventListener('focus', focusHandler);\n            window.removeEventListener('blur', blurHandler);\n        });\n    }\n\n    /**\n     * Setup touch zones for mobile controls\n     */\n    private setupTouchZones(): void {\n        const canvasRect = this.canvas.getBoundingClientRect();\n        \n        // Left side - thrust control\n        this.touchZones.set('thrust', {\n            x: 0,\n            y: 0,\n            width: canvasRect.width / 2,\n            height: canvasRect.height,\n            type: 'joystick'\n        });\n        \n        // Right side - rotation control\n        this.touchZones.set('rotation', {\n            x: canvasRect.width / 2,\n            y: 0,\n            width: canvasRect.width / 2,\n            height: canvasRect.height,\n            type: 'joystick'\n        });\n        \n        this.logger.debug('Touch zones configured for mobile controls');\n    }\n\n    /**\n     * Update input state (called each frame)\n     */\n    update(deltaTime: number): void {\n        // Copy current state to previous\n        this.previousState = this.deepCopyInputState(this.currentState);\n        \n        // Clear frame-specific states\n        this.currentState.keysPressed.clear();\n        this.currentState.keysReleased.clear();\n        this.currentState.mouseButtonsPressed.clear();\n        this.currentState.mouseButtonsReleased.clear();\n        this.currentState.mouseWheel = 0;\n        this.currentState.touchStarted = false;\n        this.currentState.touchEnded = false;\n        \n        // Update gamepad state\n        if (this.config.enableGamepad) {\n            this.updateGamepadState();\n        }\n        \n        // Update virtual controls from touch input\n        if (this.config.enableTouch) {\n            this.updateVirtualControls();\n        }\n    }\n\n    /**\n     * Keyboard event handlers\n     */\n    private handleKeyDown(e: KeyboardEvent): void {\n        const key = e.code;\n        \n        if (!this.currentState.keys.has(key)) {\n            this.currentState.keysPressed.add(key);\n            this.logger.debug(`Key pressed: ${key}`);\n        }\n        \n        this.currentState.keys.add(key);\n        \n        // Prevent default for game keys\n        if (this.isGameKey(key)) {\n            e.preventDefault();\n        }\n    }\n\n    private handleKeyUp(e: KeyboardEvent): void {\n        const key = e.code;\n        \n        if (this.currentState.keys.has(key)) {\n            this.currentState.keysReleased.add(key);\n            this.logger.debug(`Key released: ${key}`);\n        }\n        \n        this.currentState.keys.delete(key);\n        \n        if (this.isGameKey(key)) {\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Mouse event handlers\n     */\n    private handleMouseMove(e: MouseEvent): void {\n        const rect = this.canvas.getBoundingClientRect();\n        this.currentState.mousePosition = {\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        };\n    }\n\n    private handleMouseDown(e: MouseEvent): void {\n        const button = e.button;\n        \n        if (!this.currentState.mouseButtons.has(button)) {\n            this.currentState.mouseButtonsPressed.add(button);\n        }\n        \n        this.currentState.mouseButtons.add(button);\n        e.preventDefault();\n    }\n\n    private handleMouseUp(e: MouseEvent): void {\n        const button = e.button;\n        \n        if (this.currentState.mouseButtons.has(button)) {\n            this.currentState.mouseButtonsReleased.add(button);\n        }\n        \n        this.currentState.mouseButtons.delete(button);\n        e.preventDefault();\n    }\n\n    private handleWheel(e: WheelEvent): void {\n        this.currentState.mouseWheel = e.deltaY;\n        e.preventDefault();\n    }\n\n    /**\n     * Touch event handlers\n     */\n    private handleTouchStart(e: TouchEvent): void {\n        this.currentState.touchStarted = true;\n        this.currentState.touches = Array.from(e.touches);\n        \n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches[i];\n            this.activeTouches.set(touch.identifier, {\n                id: touch.identifier,\n                startPosition: { x: touch.clientX, y: touch.clientY },\n                currentPosition: { x: touch.clientX, y: touch.clientY },\n                zone: this.getTouchZone(touch.clientX, touch.clientY)\n            });\n        }\n        \n        e.preventDefault();\n    }\n\n    private handleTouchMove(e: TouchEvent): void {\n        this.currentState.touches = Array.from(e.touches);\n        \n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches[i];\n            const touchInfo = this.activeTouches.get(touch.identifier);\n            \n            if (touchInfo) {\n                touchInfo.currentPosition = { x: touch.clientX, y: touch.clientY };\n            }\n        }\n        \n        e.preventDefault();\n    }\n\n    private handleTouchEnd(e: TouchEvent): void {\n        this.currentState.touchEnded = true;\n        this.currentState.touches = Array.from(e.touches);\n        \n        for (let i = 0; i < e.changedTouches.length; i++) {\n            const touch = e.changedTouches[i];\n            this.activeTouches.delete(touch.identifier);\n        }\n        \n        e.preventDefault();\n    }\n\n    /**\n     * Gamepad event handlers\n     */\n    private handleGamepadConnected(e: GamepadEvent): void {\n        this.logger.info(`Gamepad connected: ${e.gamepad.id}`);\n        this.gamepads.set(e.gamepad.index, {\n            connected: true,\n            axes: [],\n            buttons: []\n        });\n    }\n\n    private handleGamepadDisconnected(e: GamepadEvent): void {\n        this.logger.info(`Gamepad disconnected: ${e.gamepad.id}`);\n        this.gamepads.delete(e.gamepad.index);\n    }\n\n    /**\n     * Update gamepad state\n     */\n    private updateGamepadState(): void {\n        const gamepads = navigator.getGamepads();\n        \n        for (let i = 0; i < gamepads.length; i++) {\n            const gamepad = gamepads[i];\n            if (gamepad && this.gamepads.has(i)) {\n                const state = this.gamepads.get(i)!;\n                state.axes = Array.from(gamepad.axes);\n                state.buttons = gamepad.buttons.map(button => button.pressed);\n            }\n        }\n    }\n\n    /**\n     * Update virtual controls from touch input\n     */\n    private updateVirtualControls(): void {\n        this.currentState.virtualThrust = 0;\n        this.currentState.virtualRotation = 0;\n        this.currentState.virtualAction = false;\n        \n        for (const [touchId, touchInfo] of this.activeTouches) {\n            const deltaX = touchInfo.currentPosition.x - touchInfo.startPosition.x;\n            const deltaY = touchInfo.currentPosition.y - touchInfo.startPosition.y;\n            \n            if (touchInfo.zone === 'thrust') {\n                // Vertical movement controls thrust\n                this.currentState.virtualThrust = -deltaY / 100 * this.config.touchSensitivity;\n                this.currentState.virtualThrust = Math.max(-1, Math.min(1, this.currentState.virtualThrust));\n            } else if (touchInfo.zone === 'rotation') {\n                // Horizontal movement controls rotation\n                this.currentState.virtualRotation = deltaX / 100 * this.config.touchSensitivity;\n                this.currentState.virtualRotation = Math.max(-1, Math.min(1, this.currentState.virtualRotation));\n            }\n        }\n    }\n\n    /**\n     * Focus/blur handlers\n     */\n    private handleFocus(): void {\n        this.logger.debug('Window focused - input enabled');\n    }\n\n    private handleBlur(): void {\n        // Clear all input states when window loses focus\n        this.currentState.keys.clear();\n        this.currentState.mouseButtons.clear();\n        this.activeTouches.clear();\n        this.logger.debug('Window blurred - input cleared');\n    }\n\n    /**\n     * Helper methods\n     */\n    private createEmptyInputState(): InputState {\n        return {\n            keys: new Set(),\n            keysPressed: new Set(),\n            keysReleased: new Set(),\n            mousePosition: { x: 0, y: 0 },\n            mouseButtons: new Set(),\n            mouseButtonsPressed: new Set(),\n            mouseButtonsReleased: new Set(),\n            mouseWheel: 0,\n            touches: [],\n            touchStarted: false,\n            touchEnded: false,\n            virtualThrust: 0,\n            virtualRotation: 0,\n            virtualAction: false\n        };\n    }\n\n    private deepCopyInputState(state: InputState): InputState {\n        return {\n            keys: new Set(state.keys),\n            keysPressed: new Set(),\n            keysReleased: new Set(),\n            mousePosition: { ...state.mousePosition },\n            mouseButtons: new Set(state.mouseButtons),\n            mouseButtonsPressed: new Set(),\n            mouseButtonsReleased: new Set(),\n            mouseWheel: 0,\n            touches: [...state.touches],\n            touchStarted: false,\n            touchEnded: false,\n            virtualThrust: state.virtualThrust,\n            virtualRotation: state.virtualRotation,\n            virtualAction: state.virtualAction\n        };\n    }\n\n    private isGameKey(key: string): boolean {\n        const gameKeys = [\n            'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight',\n            'KeyW', 'KeyA', 'KeyS', 'KeyD',\n            'Space', 'Enter', 'Escape'\n        ];\n        return gameKeys.includes(key);\n    }\n\n    private getTouchZone(x: number, y: number): string | null {\n        for (const [zoneName, zone] of this.touchZones) {\n            if (x >= zone.x && x < zone.x + zone.width &&\n                y >= zone.y && y < zone.y + zone.height) {\n                return zoneName;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Public input query methods\n     */\n    isKeyDown(key: string): boolean {\n        return this.currentState.keys.has(key);\n    }\n\n    isKeyPressed(key: string): boolean {\n        return this.currentState.keysPressed.has(key);\n    }\n\n    isKeyReleased(key: string): boolean {\n        return this.currentState.keysReleased.has(key);\n    }\n\n    isMouseButtonDown(button: number): boolean {\n        return this.currentState.mouseButtons.has(button);\n    }\n\n    isMouseButtonPressed(button: number): boolean {\n        return this.currentState.mouseButtonsPressed.has(button);\n    }\n\n    getMousePosition(): Vector2 {\n        return { ...this.currentState.mousePosition };\n    }\n\n    getMouseWheel(): number {\n        return this.currentState.mouseWheel;\n    }\n\n    getTouchCount(): number {\n        return this.currentState.touches.length;\n    }\n\n    getVirtualThrust(): number {\n        return this.currentState.virtualThrust;\n    }\n\n    getVirtualRotation(): number {\n        return this.currentState.virtualRotation;\n    }\n\n    // Game-specific input methods\n    getThrustInput(): number {\n        if (this.config.enableTouch) {\n            return this.currentState.virtualThrust;\n        }\n        \n        let thrust = 0;\n        if (this.isKeyDown('ArrowUp') || this.isKeyDown('KeyW')) thrust += 1;\n        if (this.isKeyDown('ArrowDown') || this.isKeyDown('KeyS')) thrust -= 1;\n        \n        // Gamepad input\n        for (const gamepad of this.gamepads.values()) {\n            if (gamepad.connected && gamepad.axes.length > 1) {\n                thrust += -gamepad.axes[1]; // Invert Y axis\n            }\n        }\n        \n        return Math.max(-1, Math.min(1, thrust));\n    }\n\n    getRotationInput(): number {\n        if (this.config.enableTouch) {\n            return this.currentState.virtualRotation;\n        }\n        \n        let rotation = 0;\n        if (this.isKeyDown('ArrowLeft') || this.isKeyDown('KeyA')) rotation -= 1;\n        if (this.isKeyDown('ArrowRight') || this.isKeyDown('KeyD')) rotation += 1;\n        \n        // Gamepad input\n        for (const gamepad of this.gamepads.values()) {\n            if (gamepad.connected && gamepad.axes.length > 0) {\n                rotation += gamepad.axes[0]; // X axis\n            }\n        }\n        \n        return Math.max(-1, Math.min(1, rotation));\n    }\n\n    isActionPressed(): boolean {\n        return this.isKeyPressed('Space') || \n               this.isMouseButtonPressed(0) || \n               this.currentState.virtualAction;\n    }\n\n    isPausePressed(): boolean {\n        return this.isKeyPressed('Escape') || this.isKeyPressed('KeyP');\n    }\n\n    /**\n     * Cleanup\n     */\n    cleanup(): void {\n        // Remove all event listeners\n        this.eventListeners.forEach(cleanup => cleanup());\n        this.eventListeners = [];\n        \n        // Clear states\n        this.activeTouches.clear();\n        this.gamepads.clear();\n        \n        this.logger.info('🧹 Input manager cleanup completed');\n    }\n}\n\n// Helper interfaces\ninterface TouchZone {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    type: 'button' | 'joystick';\n}\n\ninterface TouchInfo {\n    id: number;\n    startPosition: Vector2;\n    currentPosition: Vector2;\n    zone: string | null;\n}","/**\n * Space Physics Engine\n * Handles realistic space movement, gravity, and orbital mechanics\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\n\nexport interface PhysicsObject {\n    id: string;\n    position: Vector2;\n    velocity: Vector2;\n    acceleration: Vector2;\n    mass: number;\n    radius: number;\n    isStatic: boolean;\n    type: 'ship' | 'planet' | 'star' | 'asteroid' | 'projectile';\n    \n    // Physics properties\n    drag: number;\n    restitution: number; // Bounce factor\n    friction: number;\n    \n    // Game-specific properties\n    health?: number;\n    faction?: string;\n    \n    // Callbacks\n    onCollision?: (other: PhysicsObject) => void;\n    onDestroy?: () => void;\n}\n\nexport interface CollisionInfo {\n    objectA: PhysicsObject;\n    objectB: PhysicsObject;\n    penetration: number;\n    normal: Vector2;\n    point: Vector2;\n}\n\nexport interface GravityWell {\n    position: Vector2;\n    mass: number;\n    radius: number; // Effective radius for gravity\n}\n\nexport class SpacePhysics {\n    private objects: Map<string, PhysicsObject> = new Map();\n    private gravityWells: Map<string, GravityWell> = new Map();\n    \n    // Physics constants\n    private readonly GRAVITATIONAL_CONSTANT = 6.67e-11; // Scaled for game\n    private readonly SPACE_DRAG = 0.999; // Very low drag in space\n    private readonly MIN_VELOCITY = 0.01; // Below this, velocity is zeroed\n    private readonly MAX_VELOCITY = 1000; // Maximum velocity cap\n    \n    // Collision detection\n    private collisionPairs: CollisionInfo[] = [];\n    \n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('SpacePhysics');\n        this.logger.info('🌌 Space physics engine initialized');\n    }\n\n    /**\n     * Add a physics object to the simulation\n     */\n    addObject(object: PhysicsObject): void {\n        this.objects.set(object.id, object);\n        this.logger.debug(`Added physics object: ${object.id} (${object.type})`);\n    }\n\n    /**\n     * Remove a physics object from the simulation\n     */\n    removeObject(id: string): boolean {\n        const removed = this.objects.delete(id);\n        if (removed) {\n            this.logger.debug(`Removed physics object: ${id}`);\n        }\n        return removed;\n    }\n\n    /**\n     * Get a physics object by ID\n     */\n    getObject(id: string): PhysicsObject | undefined {\n        return this.objects.get(id);\n    }\n\n    /**\n     * Add a gravity well (like a planet or star)\n     */\n    addGravityWell(id: string, well: GravityWell): void {\n        this.gravityWells.set(id, well);\n        this.logger.debug(`Added gravity well: ${id}`);\n    }\n\n    /**\n     * Remove a gravity well\n     */\n    removeGravityWell(id: string): boolean {\n        return this.gravityWells.delete(id);\n    }\n\n    /**\n     * Update the physics simulation\n     */\n    update(deltaTime: number): void {\n        // Cap delta time to prevent simulation instability\n        deltaTime = Math.min(deltaTime, 1/30); // Max 30 FPS minimum\n        \n        // Clear previous collision data\n        this.collisionPairs = [];\n        \n        // Apply forces to all objects\n        for (const object of this.objects.values()) {\n            if (!object.isStatic) {\n                this.updateObject(object, deltaTime);\n            }\n        }\n        \n        // Detect and resolve collisions\n        this.detectCollisions();\n        this.resolveCollisions();\n    }\n\n    /**\n     * Update a single physics object\n     */\n    private updateObject(object: PhysicsObject, deltaTime: number): void {\n        // Reset acceleration each frame\n        object.acceleration = { x: 0, y: 0 };\n        \n        // Apply gravitational forces\n        this.applyGravity(object);\n        \n        // Apply space drag (very minimal)\n        this.applyDrag(object);\n        \n        // Integrate velocity (acceleration → velocity)\n        object.velocity.x += object.acceleration.x * deltaTime;\n        object.velocity.y += object.acceleration.y * deltaTime;\n        \n        // Cap velocity to prevent runaway speeds\n        const speed = this.getVectorMagnitude(object.velocity);\n        if (speed > this.MAX_VELOCITY) {\n            const scale = this.MAX_VELOCITY / speed;\n            object.velocity.x *= scale;\n            object.velocity.y *= scale;\n        }\n        \n        // Zero very small velocities (simulate friction/energy loss)\n        if (speed < this.MIN_VELOCITY) {\n            object.velocity = { x: 0, y: 0 };\n        }\n        \n        // Integrate position (velocity → position)\n        object.position.x += object.velocity.x * deltaTime;\n        object.position.y += object.velocity.y * deltaTime;\n    }\n\n    /**\n     * Apply gravitational forces from all gravity wells\n     */\n    private applyGravity(object: PhysicsObject): void {\n        for (const well of this.gravityWells.values()) {\n            const dx = well.position.x - object.position.x;\n            const dy = well.position.y - object.position.y;\n            const distanceSquared = dx * dx + dy * dy;\n            const distance = Math.sqrt(distanceSquared);\n            \n            // Skip if too close (prevent division by zero and extreme forces)\n            if (distance < well.radius * 0.1) continue;\n            \n            // Calculate gravitational force\n            // F = G * (m1 * m2) / r²\n            const force = (this.GRAVITATIONAL_CONSTANT * well.mass * object.mass) / distanceSquared;\n            \n            // Apply force in direction of gravity well\n            const forceX = (dx / distance) * force;\n            const forceY = (dy / distance) * force;\n            \n            // F = ma, so a = F/m\n            object.acceleration.x += forceX / object.mass;\n            object.acceleration.y += forceY / object.mass;\n        }\n    }\n\n    /**\n     * Apply drag forces (minimal in space)\n     */\n    private applyDrag(object: PhysicsObject): void {\n        // Apply object-specific drag\n        object.velocity.x *= (this.SPACE_DRAG * object.drag);\n        object.velocity.y *= (this.SPACE_DRAG * object.drag);\n    }\n\n    /**\n     * Detect collisions between all objects\n     */\n    private detectCollisions(): void {\n        const objectArray = Array.from(this.objects.values());\n        \n        for (let i = 0; i < objectArray.length; i++) {\n            for (let j = i + 1; j < objectArray.length; j++) {\n                const objA = objectArray[i];\n                const objB = objectArray[j];\n                \n                const collision = this.checkCollision(objA, objB);\n                if (collision) {\n                    this.collisionPairs.push(collision);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check collision between two objects\n     */\n    private checkCollision(objA: PhysicsObject, objB: PhysicsObject): CollisionInfo | null {\n        const dx = objB.position.x - objA.position.x;\n        const dy = objB.position.y - objA.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const minDistance = objA.radius + objB.radius;\n        \n        if (distance < minDistance) {\n            // Collision detected\n            const penetration = minDistance - distance;\n            const normal = distance > 0 ? \n                { x: dx / distance, y: dy / distance } : \n                { x: 1, y: 0 }; // Fallback if objects are exactly overlapping\n            \n            const point = {\n                x: objA.position.x + dx * (objA.radius / minDistance),\n                y: objA.position.y + dy * (objA.radius / minDistance)\n            };\n            \n            return {\n                objectA: objA,\n                objectB: objB,\n                penetration,\n                normal,\n                point\n            };\n        }\n        \n        return null;\n    }\n\n    /**\n     * Resolve all detected collisions\n     */\n    private resolveCollisions(): void {\n        for (const collision of this.collisionPairs) {\n            this.resolveCollision(collision);\n            \n            // Call collision callbacks\n            if (collision.objectA.onCollision) {\n                collision.objectA.onCollision(collision.objectB);\n            }\n            if (collision.objectB.onCollision) {\n                collision.objectB.onCollision(collision.objectA);\n            }\n        }\n    }\n\n    /**\n     * Resolve a single collision\n     */\n    private resolveCollision(collision: CollisionInfo): void {\n        const { objectA, objectB, penetration, normal } = collision;\n        \n        // Separate objects to prevent overlap\n        if (!objectA.isStatic && !objectB.isStatic) {\n            // Both objects can move\n            const separationA = penetration * 0.5;\n            const separationB = penetration * 0.5;\n            \n            objectA.position.x -= normal.x * separationA;\n            objectA.position.y -= normal.y * separationA;\n            objectB.position.x += normal.x * separationB;\n            objectB.position.y += normal.y * separationB;\n        } else if (!objectA.isStatic) {\n            // Only object A can move\n            objectA.position.x -= normal.x * penetration;\n            objectA.position.y -= normal.y * penetration;\n        } else if (!objectB.isStatic) {\n            // Only object B can move\n            objectB.position.x += normal.x * penetration;\n            objectB.position.y += normal.y * penetration;\n        }\n        \n        // Calculate relative velocity\n        const relativeVelocity = {\n            x: objectB.velocity.x - objectA.velocity.x,\n            y: objectB.velocity.y - objectA.velocity.y\n        };\n        \n        // Calculate collision impulse\n        const velocityAlongNormal = relativeVelocity.x * normal.x + relativeVelocity.y * normal.y;\n        \n        // Objects are separating, no need to resolve\n        if (velocityAlongNormal > 0) return;\n        \n        // Calculate restitution (bounciness)\n        const restitution = Math.min(objectA.restitution, objectB.restitution);\n        \n        // Calculate impulse scalar\n        let impulse = -(1 + restitution) * velocityAlongNormal;\n        \n        // Calculate mass ratio\n        if (!objectA.isStatic && !objectB.isStatic) {\n            impulse /= (1 / objectA.mass + 1 / objectB.mass);\n        }\n        \n        // Apply impulse\n        const impulseVector = { x: impulse * normal.x, y: impulse * normal.y };\n        \n        if (!objectA.isStatic) {\n            objectA.velocity.x -= impulseVector.x / objectA.mass;\n            objectA.velocity.y -= impulseVector.y / objectA.mass;\n        }\n        \n        if (!objectB.isStatic) {\n            objectB.velocity.x += impulseVector.x / objectB.mass;\n            objectB.velocity.y += impulseVector.y / objectB.mass;\n        }\n    }\n\n    /**\n     * Apply thrust to an object (for ships)\n     */\n    applyThrust(objectId: string, thrustVector: Vector2, thrustPower: number): void {\n        const object = this.objects.get(objectId);\n        if (!object || object.isStatic) return;\n        \n        // Normalize thrust vector\n        const magnitude = this.getVectorMagnitude(thrustVector);\n        if (magnitude === 0) return;\n        \n        const normalizedThrust = {\n            x: thrustVector.x / magnitude,\n            y: thrustVector.y / magnitude\n        };\n        \n        // Apply thrust as acceleration\n        object.acceleration.x += normalizedThrust.x * thrustPower / object.mass;\n        object.acceleration.y += normalizedThrust.y * thrustPower / object.mass;\n    }\n\n    /**\n     * Calculate orbital velocity for circular orbit around a gravity well\n     */\n    calculateOrbitalVelocity(distance: number, centralMass: number): number {\n        // v = sqrt(GM/r)\n        return Math.sqrt(this.GRAVITATIONAL_CONSTANT * centralMass / distance);\n    }\n\n    /**\n     * Calculate escape velocity from a gravity well\n     */\n    calculateEscapeVelocity(distance: number, centralMass: number): number {\n        // v = sqrt(2GM/r)\n        return Math.sqrt(2 * this.GRAVITATIONAL_CONSTANT * centralMass / distance);\n    }\n\n    /**\n     * Get all objects within a radius\n     */\n    getObjectsInRadius(center: Vector2, radius: number): PhysicsObject[] {\n        const result: PhysicsObject[] = [];\n        \n        for (const object of this.objects.values()) {\n            const distance = this.getDistance(center, object.position);\n            if (distance <= radius) {\n                result.push(object);\n            }\n        }\n        \n        return result;\n    }\n\n    /**\n     * Raycast to find the first object hit\n     */\n    raycast(start: Vector2, direction: Vector2, maxDistance: number): PhysicsObject | null {\n        const normalizedDirection = this.normalizeVector(direction);\n        const step = 1; // Step size for ray marching\n        \n        for (let distance = 0; distance < maxDistance; distance += step) {\n            const point = {\n                x: start.x + normalizedDirection.x * distance,\n                y: start.y + normalizedDirection.y * distance\n            };\n            \n            for (const object of this.objects.values()) {\n                const objectDistance = this.getDistance(point, object.position);\n                if (objectDistance <= object.radius) {\n                    return object;\n                }\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Utility functions\n     */\n    private getVectorMagnitude(vector: Vector2): number {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    }\n\n    private normalizeVector(vector: Vector2): Vector2 {\n        const magnitude = this.getVectorMagnitude(vector);\n        if (magnitude === 0) return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    }\n\n    private getDistance(a: Vector2, b: Vector2): number {\n        const dx = b.x - a.x;\n        const dy = b.y - a.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Get simulation statistics\n     */\n    getStats() {\n        return {\n            objectCount: this.objects.size,\n            gravityWellCount: this.gravityWells.size,\n            collisionCount: this.collisionPairs.length,\n            activeObjects: Array.from(this.objects.values()).filter(obj => !obj.isStatic).length\n        };\n    }\n\n    /**\n     * Get object count for performance monitoring\n     */\n    getObjectCount(): number {\n        return this.objects.size;\n    }\n\n    /**\n     * Get all objects (for debugging/rendering)\n     */\n    getAllObjects(): PhysicsObject[] {\n        return Array.from(this.objects.values());\n    }\n\n    /**\n     * Clear all objects and gravity wells\n     */\n    clear(): void {\n        this.objects.clear();\n        this.gravityWells.clear();\n        this.collisionPairs = [];\n        this.logger.debug('Physics simulation cleared');\n    }\n\n    /**\n     * Create a basic ship physics object\n     */\n    createShip(id: string, position: Vector2, mass: number = 1000): PhysicsObject {\n        return {\n            id,\n            position: { ...position },\n            velocity: { x: 0, y: 0 },\n            acceleration: { x: 0, y: 0 },\n            mass,\n            radius: 16, // Ship radius in pixels\n            isStatic: false,\n            type: 'ship',\n            drag: 0.999, // Very little drag in space\n            restitution: 0.3, // Some bounce for collisions\n            friction: 0.1,\n            health: 100\n        };\n    }\n\n    /**\n     * Create a basic planet physics object\n     */\n    createPlanet(id: string, position: Vector2, mass: number, radius: number): PhysicsObject {\n        return {\n            id,\n            position: { ...position },\n            velocity: { x: 0, y: 0 },\n            acceleration: { x: 0, y: 0 },\n            mass,\n            radius,\n            isStatic: true, // Planets don't move\n            type: 'planet',\n            drag: 1.0,\n            restitution: 0.1, // Planets are not bouncy\n            friction: 0.9\n        };\n    }\n\n    /**\n     * Create a projectile physics object\n     */\n    createProjectile(id: string, position: Vector2, velocity: Vector2, mass: number = 1): PhysicsObject {\n        return {\n            id,\n            position: { ...position },\n            velocity: { ...velocity },\n            acceleration: { x: 0, y: 0 },\n            mass,\n            radius: 2, // Small projectile\n            isStatic: false,\n            type: 'projectile',\n            drag: 1.0, // No drag for projectiles\n            restitution: 0.8, // Bouncy projectiles\n            friction: 0.0\n        };\n    }\n}","/**\n * Web Audio API-based Audio Engine\n * Handles procedural sound synthesis and 16-bit style audio effects\n */\n\nimport { Platform } from '@utils/Platform';\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\n\nexport interface AudioConfig {\n    masterVolume: number;\n    musicVolume: number;\n    sfxVolume: number;\n    enableSpatialAudio: boolean;\n    maxChannels: number;\n    sampleRate: number;\n}\n\nexport interface SoundEffect {\n    id: string;\n    buffer: AudioBuffer;\n    loop: boolean;\n    volume: number;\n    pitch: number;\n    type: 'engine' | 'weapon' | 'ambient' | 'ui' | 'explosion';\n}\n\nexport interface AudioSource {\n    id: string;\n    node: AudioBufferSourceNode | OscillatorNode;\n    gainNode: GainNode;\n    pannerNode?: PannerNode;\n    position?: Vector2;\n    isPlaying: boolean;\n    loop: boolean;\n    startTime: number;\n}\n\nexport class AudioEngine {\n    private context: AudioContext | null = null;\n    private platform: Platform;\n    private config: AudioConfig;\n    \n    // Audio nodes\n    private masterGain: GainNode | null = null;\n    private musicGain: GainNode | null = null;\n    private sfxGain: GainNode | null = null;\n    \n    // Sound management\n    private soundEffects: Map<string, SoundEffect> = new Map();\n    private activeSources: Map<string, AudioSource> = new Map();\n    \n    // Music system\n    private musicTrack: AudioSource | null = null;\n    private ambientTrack: AudioSource | null = null;\n    \n    // 16-bit synthesis\n    private synthNodes: Map<string, OscillatorNode> = new Map();\n    \n    private logger: Logger;\n    private isInitialized = false;\n\n    constructor(platform: Platform) {\n        this.platform = platform;\n        this.logger = new Logger('AudioEngine');\n        \n        // Configure audio based on platform\n        this.config = {\n            masterVolume: 1.0,\n            musicVolume: 0.7,\n            sfxVolume: 0.8,\n            enableSpatialAudio: platform === Platform.Desktop,\n            maxChannels: platform === Platform.Mobile ? 8 : 16,\n            sampleRate: 44100\n        };\n        \n        this.logger.info('🔊 Audio engine created', {\n            platform: platform,\n            config: this.config\n        });\n    }\n\n    /**\n     * Initialize the audio engine\n     */\n    async initialize(): Promise<void> {\n        this.logger.info('🔧 Initializing audio engine...');\n        \n        try {\n            // Create audio context\n            this.context = new (window.AudioContext || (window as any).webkitAudioContext)({\n                sampleRate: this.config.sampleRate\n            });\n            \n            // Handle context state\n            if (this.context.state === 'suspended') {\n                this.logger.info('Audio context suspended, will resume on user interaction');\n                this.setupUserInteractionHandler();\n            }\n            \n            // Create master gain nodes\n            this.masterGain = this.context.createGain();\n            this.musicGain = this.context.createGain();\n            this.sfxGain = this.context.createGain();\n            \n            // Connect gain nodes\n            this.musicGain.connect(this.masterGain);\n            this.sfxGain.connect(this.masterGain);\n            this.masterGain.connect(this.context.destination);\n            \n            // Set initial volumes\n            this.setMasterVolume(this.config.masterVolume);\n            this.setMusicVolume(this.config.musicVolume);\n            this.setSfxVolume(this.config.sfxVolume);\n            \n            // Generate basic sound effects\n            await this.generateBasicSounds();\n            \n            this.isInitialized = true;\n            this.logger.info('✅ Audio engine initialized successfully');\n            \n        } catch (error) {\n            this.logger.error('❌ Audio engine initialization failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Setup user interaction handler for audio context\n     */\n    private setupUserInteractionHandler(): void {\n        const resumeAudio = async () => {\n            if (this.context && this.context.state === 'suspended') {\n                await this.context.resume();\n                this.logger.info('Audio context resumed');\n                \n                // Remove event listeners\n                document.removeEventListener('click', resumeAudio);\n                document.removeEventListener('keydown', resumeAudio);\n                document.removeEventListener('touchstart', resumeAudio);\n            }\n        };\n        \n        document.addEventListener('click', resumeAudio, { once: true });\n        document.addEventListener('keydown', resumeAudio, { once: true });\n        document.addEventListener('touchstart', resumeAudio, { once: true });\n    }\n\n    /**\n     * Generate basic 16-bit style sound effects\n     */\n    private async generateBasicSounds(): Promise<void> {\n        if (!this.context) return;\n        \n        // Engine thrust sound\n        const engineBuffer = this.generateEngineSound(1.0);\n        this.soundEffects.set('engine_thrust', {\n            id: 'engine_thrust',\n            buffer: engineBuffer,\n            loop: true,\n            volume: 0.6,\n            pitch: 1.0,\n            type: 'engine'\n        });\n        \n        // Laser weapon sound\n        const laserBuffer = this.generateLaserSound();\n        this.soundEffects.set('weapon_laser', {\n            id: 'weapon_laser',\n            buffer: laserBuffer,\n            loop: false,\n            volume: 0.8,\n            pitch: 1.0,\n            type: 'weapon'\n        });\n        \n        // Explosion sound\n        const explosionBuffer = this.generateExplosionSound();\n        this.soundEffects.set('explosion', {\n            id: 'explosion',\n            buffer: explosionBuffer,\n            loop: false,\n            volume: 1.0,\n            pitch: 1.0,\n            type: 'explosion'\n        });\n        \n        // UI beep sound\n        const beepBuffer = this.generateBeepSound(800, 0.1);\n        this.soundEffects.set('ui_beep', {\n            id: 'ui_beep',\n            buffer: beepBuffer,\n            loop: false,\n            volume: 0.5,\n            pitch: 1.0,\n            type: 'ui'\n        });\n        \n        this.logger.debug('Generated basic sound effects');\n    }\n\n    /**\n     * Generate procedural engine sound\n     */\n    private generateEngineSound(duration: number): AudioBuffer {\n        if (!this.context) throw new Error('Audio context not initialized');\n        \n        const sampleRate = this.context.sampleRate;\n        const samples = Math.floor(sampleRate * duration);\n        const buffer = this.context.createBuffer(1, samples, sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < samples; i++) {\n            const t = i / sampleRate;\n            \n            // Multiple oscillators for rich engine sound\n            const baseFreq = 60 + Math.sin(t * 5) * 10; // Low rumble with variation\n            const harmonic1 = Math.sin(2 * Math.PI * baseFreq * t) * 0.5;\n            const harmonic2 = Math.sin(2 * Math.PI * baseFreq * 2 * t) * 0.3;\n            const harmonic3 = Math.sin(2 * Math.PI * baseFreq * 3 * t) * 0.2;\n            \n            // Add noise for texture\n            const noise = (Math.random() - 0.5) * 0.1;\n            \n            data[i] = (harmonic1 + harmonic2 + harmonic3 + noise) * 0.3;\n        }\n        \n        return buffer;\n    }\n\n    /**\n     * Generate procedural laser sound\n     */\n    private generateLaserSound(): AudioBuffer {\n        if (!this.context) throw new Error('Audio context not initialized');\n        \n        const duration = 0.2;\n        const sampleRate = this.context.sampleRate;\n        const samples = Math.floor(sampleRate * duration);\n        const buffer = this.context.createBuffer(1, samples, sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < samples; i++) {\n            const t = i / sampleRate;\n            const progress = t / duration;\n            \n            // Frequency sweep from high to low\n            const freq = 1200 - progress * 800;\n            const amplitude = Math.exp(-progress * 8); // Exponential decay\n            \n            data[i] = Math.sin(2 * Math.PI * freq * t) * amplitude * 0.5;\n        }\n        \n        return buffer;\n    }\n\n    /**\n     * Generate procedural explosion sound\n     */\n    private generateExplosionSound(): AudioBuffer {\n        if (!this.context) throw new Error('Audio context not initialized');\n        \n        const duration = 1.0;\n        const sampleRate = this.context.sampleRate;\n        const samples = Math.floor(sampleRate * duration);\n        const buffer = this.context.createBuffer(1, samples, sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < samples; i++) {\n            const t = i / sampleRate;\n            const progress = t / duration;\n            \n            // Start with sharp attack, then decay\n            const amplitude = progress < 0.1 ? \n                progress * 10 : // Quick attack\n                Math.exp(-(progress - 0.1) * 5); // Exponential decay\n            \n            // Mix of noise and low frequency rumble\n            const noise = (Math.random() - 0.5) * 2;\n            const rumble = Math.sin(2 * Math.PI * 40 * t) * 0.5;\n            \n            data[i] = (noise * 0.7 + rumble * 0.3) * amplitude * 0.6;\n        }\n        \n        return buffer;\n    }\n\n    /**\n     * Generate simple beep sound\n     */\n    private generateBeepSound(frequency: number, duration: number): AudioBuffer {\n        if (!this.context) throw new Error('Audio context not initialized');\n        \n        const sampleRate = this.context.sampleRate;\n        const samples = Math.floor(sampleRate * duration);\n        const buffer = this.context.createBuffer(1, samples, sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < samples; i++) {\n            const t = i / sampleRate;\n            const amplitude = Math.exp(-t * 10); // Quick decay\n            \n            data[i] = Math.sin(2 * Math.PI * frequency * t) * amplitude * 0.4;\n        }\n        \n        return buffer;\n    }\n\n    /**\n     * Play a sound effect\n     */\n    playSfx(soundId: string, position?: Vector2, pitch: number = 1.0, volume: number = 1.0): string | null {\n        if (!this.isInitialized || !this.context) {\n            this.logger.warn('Audio engine not initialized, cannot play sound');\n            return null;\n        }\n        \n        const soundEffect = this.soundEffects.get(soundId);\n        if (!soundEffect) {\n            this.logger.warn(`Sound effect not found: ${soundId}`);\n            return null;\n        }\n        \n        try {\n            // Create audio source\n            const source = this.context.createBufferSource();\n            const gainNode = this.context.createGain();\n            const sourceId = `${soundId}_${Date.now()}_${Math.random()}`;\n            \n            // Setup source\n            source.buffer = soundEffect.buffer;\n            source.loop = soundEffect.loop;\n            source.playbackRate.value = pitch;\n            \n            // Setup gain\n            gainNode.gain.value = soundEffect.volume * volume;\n            \n            // Connect nodes\n            source.connect(gainNode);\n            \n            // Add spatial audio if enabled and position provided\n            let pannerNode: PannerNode | undefined;\n            if (this.config.enableSpatialAudio && position) {\n                pannerNode = this.context.createPanner();\n                pannerNode.panningModel = 'HRTF';\n                pannerNode.distanceModel = 'inverse';\n                pannerNode.refDistance = 100;\n                pannerNode.maxDistance = 1000;\n                pannerNode.rolloffFactor = 1;\n                \n                // Set position\n                pannerNode.positionX.value = position.x;\n                pannerNode.positionY.value = position.y;\n                pannerNode.positionZ.value = 0;\n                \n                gainNode.connect(pannerNode);\n                pannerNode.connect(this.sfxGain!);\n            } else {\n                gainNode.connect(this.sfxGain!);\n            }\n            \n            // Track the audio source\n            const audioSource: AudioSource = {\n                id: sourceId,\n                node: source,\n                gainNode,\n                pannerNode,\n                position,\n                isPlaying: true,\n                loop: soundEffect.loop,\n                startTime: this.context.currentTime\n            };\n            \n            this.activeSources.set(sourceId, audioSource);\n            \n            // Handle sound end\n            source.onended = () => {\n                this.activeSources.delete(sourceId);\n            };\n            \n            // Start playback\n            source.start();\n            \n            this.logger.debug(`Playing sound: ${soundId} (${sourceId})`);\n            return sourceId;\n            \n        } catch (error) {\n            this.logger.error(`Failed to play sound: ${soundId}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Stop a playing sound\n     */\n    stopSound(sourceId: string): void {\n        const audioSource = this.activeSources.get(sourceId);\n        if (audioSource && audioSource.isPlaying) {\n            try {\n                audioSource.node.stop();\n                audioSource.isPlaying = false;\n                this.activeSources.delete(sourceId);\n                this.logger.debug(`Stopped sound: ${sourceId}`);\n            } catch (error) {\n                this.logger.error(`Failed to stop sound: ${sourceId}`, error);\n            }\n        }\n    }\n\n    /**\n     * Update spatial audio positions\n     */\n    updateSpatialAudio(sourceId: string, position: Vector2): void {\n        const audioSource = this.activeSources.get(sourceId);\n        if (audioSource && audioSource.pannerNode) {\n            audioSource.pannerNode.positionX.value = position.x;\n            audioSource.pannerNode.positionY.value = position.y;\n            audioSource.position = position;\n        }\n    }\n\n    /**\n     * Set listener position for spatial audio\n     */\n    setListenerPosition(position: Vector2, orientation: number = 0): void {\n        if (!this.context || !this.config.enableSpatialAudio) return;\n        \n        const listener = this.context.listener;\n        if (listener.positionX) {\n            listener.positionX.value = position.x;\n            listener.positionY.value = position.y;\n            listener.positionZ.value = 0;\n            \n            // Set orientation\n            listener.forwardX.value = Math.cos(orientation);\n            listener.forwardY.value = Math.sin(orientation);\n            listener.forwardZ.value = 0;\n            \n            listener.upX.value = 0;\n            listener.upY.value = 0;\n            listener.upZ.value = 1;\n        }\n    }\n\n    /**\n     * Volume controls\n     */\n    setMasterVolume(volume: number): void {\n        this.config.masterVolume = Math.max(0, Math.min(1, volume));\n        if (this.masterGain) {\n            this.masterGain.gain.value = this.config.masterVolume;\n        }\n    }\n\n    setMusicVolume(volume: number): void {\n        this.config.musicVolume = Math.max(0, Math.min(1, volume));\n        if (this.musicGain) {\n            this.musicGain.gain.value = this.config.musicVolume;\n        }\n    }\n\n    setSfxVolume(volume: number): void {\n        this.config.sfxVolume = Math.max(0, Math.min(1, volume));\n        if (this.sfxGain) {\n            this.sfxGain.gain.value = this.config.sfxVolume;\n        }\n    }\n\n    /**\n     * Game-specific audio methods\n     */\n    playEngineSound(): string | null {\n        return this.playSfx('engine_thrust', undefined, 1.0, 0.6);\n    }\n\n    playLaserSound(position?: Vector2): string | null {\n        return this.playSfx('weapon_laser', position, 1.0 + (Math.random() - 0.5) * 0.2);\n    }\n\n    playExplosion(position?: Vector2): string | null {\n        return this.playSfx('explosion', position, 1.0, 0.8);\n    }\n\n    playUIBeep(): string | null {\n        return this.playSfx('ui_beep');\n    }\n\n    /**\n     * Update audio engine (called each frame)\n     */\n    update(deltaTime: number): void {\n        // Clean up finished sounds\n        for (const [id, source] of this.activeSources) {\n            if (!source.isPlaying && !source.loop) {\n                this.activeSources.delete(id);\n            }\n        }\n    }\n\n    /**\n     * Pause all audio\n     */\n    pauseAll(): void {\n        if (this.context && this.context.state === 'running') {\n            this.context.suspend();\n            this.logger.debug('Audio paused');\n        }\n    }\n\n    /**\n     * Resume all audio\n     */\n    resumeAll(): void {\n        if (this.context && this.context.state === 'suspended') {\n            this.context.resume();\n            this.logger.debug('Audio resumed');\n        }\n    }\n\n    /**\n     * Stop all audio\n     */\n    stopAll(): void {\n        for (const [id, source] of this.activeSources) {\n            if (source.isPlaying) {\n                try {\n                    source.node.stop();\n                } catch (error) {\n                    // Ignore errors when stopping\n                }\n            }\n        }\n        this.activeSources.clear();\n        this.logger.debug('All audio stopped');\n    }\n\n    /**\n     * Get audio statistics\n     */\n    getStats() {\n        return {\n            isInitialized: this.isInitialized,\n            contextState: this.context?.state || 'none',\n            activeSources: this.activeSources.size,\n            soundEffects: this.soundEffects.size,\n            config: { ...this.config }\n        };\n    }\n\n    /**\n     * Cleanup audio resources\n     */\n    cleanup(): void {\n        this.stopAll();\n        \n        if (this.context) {\n            this.context.close();\n        }\n        \n        this.soundEffects.clear();\n        this.synthNodes.clear();\n        \n        this.logger.info('🧹 Audio engine cleanup completed');\n    }\n}","/**\n * Procedural Audio System\n * Advanced Web Audio API synthesis for retro 16-bit space game sounds\n */\n\nimport { Logger } from '@utils/Logger';\n\nexport enum SoundType {\n    Engine = 'engine',\n    Laser = 'laser',\n    Explosion = 'explosion',\n    Beep = 'beep',\n    Warning = 'warning',\n    Warp = 'warp',\n    Shield = 'shield',\n    Impact = 'impact',\n    Communication = 'communication',\n    Ambient = 'ambient',\n    UI = 'ui',\n    Thrust = 'thrust'\n}\n\nexport enum WaveformType {\n    Sine = 'sine',\n    Square = 'square',\n    Sawtooth = 'sawtooth',\n    Triangle = 'triangle',\n    Noise = 'white'\n}\n\nexport interface SoundConfig {\n    type: SoundType;\n    frequency: number;\n    duration: number;\n    volume: number;\n    \n    // Waveform settings\n    waveform: WaveformType;\n    harmonics?: number[];\n    \n    // Envelope (ADSR)\n    attack: number;\n    decay: number;\n    sustain: number;\n    release: number;\n    \n    // Modulation\n    frequencyModulation?: {\n        rate: number;\n        depth: number;\n        waveform: WaveformType;\n    };\n    \n    // Filter\n    filter?: {\n        type: 'lowpass' | 'highpass' | 'bandpass';\n        frequency: number;\n        resonance: number;\n    };\n    \n    // Effects\n    distortion?: number;\n    reverb?: {\n        roomSize: number;\n        dampening: number;\n        wetness: number;\n    };\n    \n    // Spatial audio\n    position?: { x: number, y: number, z: number };\n    maxDistance?: number;\n}\n\nexport interface AmbientTrackConfig {\n    name: string;\n    layers: AmbientLayer[];\n    fadeInTime: number;\n    fadeOutTime: number;\n    crossfadeTime: number;\n}\n\nexport interface AmbientLayer {\n    id: string;\n    waveform: WaveformType;\n    baseFrequency: number;\n    volume: number;\n    pan: number; // -1 to 1\n    \n    // Modulation\n    frequencyVariation: number;\n    volumeVariation: number;\n    \n    // Movement\n    frequency: {\n        min: number;\n        max: number;\n        speed: number; // Hz per second\n    };\n    \n    // Filter sweep\n    filter?: {\n        type: 'lowpass' | 'highpass' | 'bandpass';\n        minFreq: number;\n        maxFreq: number;\n        speed: number;\n        resonance: number;\n    };\n}\n\nexport interface AudioEvents {\n    onSoundPlayed?: (type: SoundType, config: SoundConfig) => void;\n    onTrackChanged?: (trackName: string) => void;\n    onAudioError?: (error: Error) => void;\n}\n\nexport class ProceduralAudio {\n    private audioContext: AudioContext | null = null;\n    private masterGain: GainNode | null = null;\n    private soundEffectsGain: GainNode | null = null;\n    private musicGain: GainNode | null = null;\n    \n    // Ambient music system\n    private currentTrack: string | null = null;\n    private ambientLayers: Map<string, {\n        oscillator: AudioScheduledSourceNode;\n        gain: GainNode;\n        filter?: BiquadFilterNode;\n        panner: StereoPannerNode;\n    }> = new Map();\n    \n    // Sound effect pools\n    private activeSounds: Set<AudioNode> = new Set();\n    \n    // Noise buffer for effects\n    private noiseBuffer: AudioBuffer | null = null;\n    \n    // Reverb\n    private convolver: ConvolverNode | null = null;\n    private reverbBuffer: AudioBuffer | null = null;\n    \n    // Master settings\n    private masterVolume: number = 0.7;\n    private musicVolume: number = 0.5;\n    private sfxVolume: number = 0.8;\n    \n    private events: AudioEvents;\n    private logger: Logger;\n\n    constructor(events: AudioEvents = {}) {\n        this.logger = new Logger('ProceduralAudio');\n        this.events = events;\n    }\n\n    /**\n     * Initialize audio system\n     */\n    async initialize(): Promise<void> {\n        try {\n            // Create audio context\n            this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            \n            if (this.audioContext.state === 'suspended') {\n                await this.audioContext.resume();\n            }\n            \n            // Create master gain nodes\n            this.masterGain = this.audioContext.createGain();\n            this.soundEffectsGain = this.audioContext.createGain();\n            this.musicGain = this.audioContext.createGain();\n            \n            // Connect audio graph\n            this.soundEffectsGain.connect(this.masterGain);\n            this.musicGain.connect(this.masterGain);\n            this.masterGain.connect(this.audioContext.destination);\n            \n            // Set initial volumes\n            this.masterGain.gain.value = this.masterVolume;\n            this.soundEffectsGain.gain.value = this.sfxVolume;\n            this.musicGain.gain.value = this.musicVolume;\n            \n            // Create noise buffer\n            await this.createNoiseBuffer();\n            \n            // Create reverb\n            await this.createReverbBuffer();\n            \n            this.logger.info('🔊 Procedural audio system initialized');\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize audio system', error);\n            this.events.onAudioError?.(error as Error);\n        }\n    }\n\n    /**\n     * Create white noise buffer\n     */\n    private async createNoiseBuffer(): Promise<void> {\n        if (!this.audioContext) return;\n        \n        const bufferSize = this.audioContext.sampleRate * 2; // 2 seconds\n        this.noiseBuffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n        \n        const output = this.noiseBuffer.getChannelData(0);\n        for (let i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n    }\n\n    /**\n     * Create reverb impulse response\n     */\n    private async createReverbBuffer(): Promise<void> {\n        if (!this.audioContext) return;\n        \n        const length = this.audioContext.sampleRate * 3; // 3 seconds\n        this.reverbBuffer = this.audioContext.createBuffer(2, length, this.audioContext.sampleRate);\n        \n        for (let channel = 0; channel < 2; channel++) {\n            const channelData = this.reverbBuffer.getChannelData(channel);\n            for (let i = 0; i < length; i++) {\n                const decay = Math.pow(1 - i / length, 2);\n                channelData[i] = (Math.random() * 2 - 1) * decay;\n            }\n        }\n        \n        this.convolver = this.audioContext.createConvolver();\n        this.convolver.buffer = this.reverbBuffer;\n    }\n\n    /**\n     * Play procedural sound effect\n     */\n    playSound(config: SoundConfig): void {\n        if (!this.audioContext || !this.soundEffectsGain) {\n            this.logger.warn('Audio system not initialized');\n            return;\n        }\n        \n        try {\n            const now = this.audioContext.currentTime;\n            let source: AudioScheduledSourceNode;\n            let sourceGain: GainNode;\n            \n            // Create source based on waveform\n            if (config.waveform === WaveformType.Noise) {\n                source = this.createNoiseSource();\n            } else {\n                source = this.createOscillatorSource(config);\n            }\n            \n            // Create gain for this sound\n            sourceGain = this.audioContext.createGain();\n            sourceGain.gain.value = 0;\n            \n            // Create filter if specified\n            let filterNode: BiquadFilterNode | undefined;\n            if (config.filter) {\n                filterNode = this.audioContext.createBiquadFilter();\n                filterNode.type = config.filter.type;\n                filterNode.frequency.value = config.filter.frequency;\n                filterNode.Q.value = config.filter.resonance;\n            }\n            \n            // Create distortion if specified\n            let distortionNode: WaveShaperNode | undefined;\n            if (config.distortion && config.distortion > 0) {\n                distortionNode = this.createDistortion(config.distortion);\n            }\n            \n            // Create spatial panner if position specified\n            let pannerNode: PannerNode | undefined;\n            if (config.position) {\n                pannerNode = this.audioContext.createPanner();\n                pannerNode.panningModel = 'HRTF';\n                pannerNode.positionX.value = config.position.x;\n                pannerNode.positionY.value = config.position.y;\n                pannerNode.positionZ.value = config.position.z;\n                pannerNode.maxDistance = config.maxDistance || 1000;\n            }\n            \n            // Connect audio graph\n            let currentNode: AudioNode = source;\n            \n            if (filterNode) {\n                currentNode.connect(filterNode);\n                currentNode = filterNode;\n            }\n            \n            if (distortionNode) {\n                currentNode.connect(distortionNode);\n                currentNode = distortionNode;\n            }\n            \n            currentNode.connect(sourceGain);\n            \n            if (pannerNode) {\n                sourceGain.connect(pannerNode);\n                pannerNode.connect(this.soundEffectsGain);\n            } else {\n                sourceGain.connect(this.soundEffectsGain);\n            }\n            \n            // Apply ADSR envelope\n            this.applyEnvelope(sourceGain.gain, config, now);\n            \n            // Apply frequency modulation if specified\n            if (config.frequencyModulation && source instanceof OscillatorNode) {\n                this.applyFrequencyModulation(source, config.frequencyModulation, now);\n            }\n            \n            // Start and schedule stop\n            source.start(now);\n            source.stop(now + config.duration);\n            \n            // Track active sound\n            this.activeSounds.add(source);\n            source.addEventListener('ended', () => {\n                this.activeSounds.delete(source);\n            });\n            \n            this.events.onSoundPlayed?.(config.type, config);\n            \n        } catch (error) {\n            this.logger.error('Failed to play sound', error);\n        }\n    }\n\n    /**\n     * Create oscillator source\n     */\n    private createOscillatorSource(config: SoundConfig): OscillatorNode {\n        const oscillator = this.audioContext!.createOscillator();\n        oscillator.type = config.waveform as OscillatorType;\n        oscillator.frequency.value = config.frequency;\n        \n        // Add harmonics for richer sound\n        if (config.harmonics) {\n            // Create additional oscillators for harmonics\n            config.harmonics.forEach((harmonic, index) => {\n                if (harmonic > 0) {\n                    const harmonicOsc = this.audioContext!.createOscillator();\n                    const harmonicGain = this.audioContext!.createGain();\n                    \n                    harmonicOsc.type = config.waveform as OscillatorType;\n                    harmonicOsc.frequency.value = config.frequency * (index + 2);\n                    harmonicGain.gain.value = harmonic;\n                    \n                    harmonicOsc.connect(harmonicGain);\n                    // Note: This simplified version connects to the same destination\n                    // In practice, you'd want to manage these connections properly\n                }\n            });\n        }\n        \n        return oscillator;\n    }\n\n    /**\n     * Create noise source\n     */\n    private createNoiseSource(): AudioBufferSourceNode {\n        const source = this.audioContext!.createBufferSource();\n        source.buffer = this.noiseBuffer;\n        source.loop = true;\n        return source;\n    }\n\n    /**\n     * Create distortion effect\n     */\n    private createDistortion(amount: number): WaveShaperNode {\n        const distortion = this.audioContext!.createWaveShaper();\n        const samples = 44100;\n        const curve = new Float32Array(samples);\n        const deg = Math.PI / 180;\n        \n        for (let i = 0; i < samples; i++) {\n            const x = (i * 2) / samples - 1;\n            curve[i] = ((3 + amount) * x * 20 * deg) / (Math.PI + amount * Math.abs(x));\n        }\n        \n        distortion.curve = curve;\n        distortion.oversample = '4x';\n        \n        return distortion;\n    }\n\n    /**\n     * Apply ADSR envelope\n     */\n    private applyEnvelope(gainParam: AudioParam, config: SoundConfig, startTime: number): void {\n        const { attack, decay, sustain, release, volume, duration } = config;\n        \n        // Attack\n        gainParam.setValueAtTime(0, startTime);\n        gainParam.linearRampToValueAtTime(volume, startTime + attack);\n        \n        // Decay\n        gainParam.linearRampToValueAtTime(volume * sustain, startTime + attack + decay);\n        \n        // Sustain (hold until release)\n        const sustainEnd = Math.max(startTime + attack + decay, startTime + duration - release);\n        gainParam.setValueAtTime(volume * sustain, sustainEnd);\n        \n        // Release\n        gainParam.linearRampToValueAtTime(0, startTime + duration);\n    }\n\n    /**\n     * Apply frequency modulation\n     */\n    private applyFrequencyModulation(\n        oscillator: OscillatorNode, \n        modConfig: NonNullable<SoundConfig['frequencyModulation']>, \n        startTime: number\n    ): void {\n        const modOscillator = this.audioContext!.createOscillator();\n        const modGain = this.audioContext!.createGain();\n        \n        modOscillator.type = modConfig.waveform as OscillatorType;\n        modOscillator.frequency.value = modConfig.rate;\n        modGain.gain.value = modConfig.depth;\n        \n        modOscillator.connect(modGain);\n        modGain.connect(oscillator.frequency);\n        \n        modOscillator.start(startTime);\n        modOscillator.stop(startTime + 10); // Long enough for any sound\n    }\n\n    /**\n     * Play retro-style sound effects\n     */\n    playRetroSound(type: SoundType, intensity: number = 1.0): void {\n        const configs: { [key in SoundType]: SoundConfig } = {\n            [SoundType.Engine]: {\n                type: SoundType.Engine,\n                frequency: 60 + intensity * 40,\n                duration: 0.5,\n                volume: 0.3 * intensity,\n                waveform: WaveformType.Sawtooth,\n                attack: 0.1,\n                decay: 0.1,\n                sustain: 0.7,\n                release: 0.3,\n                filter: {\n                    type: 'lowpass',\n                    frequency: 800 + intensity * 400,\n                    resonance: 2\n                }\n            },\n            [SoundType.Laser]: {\n                type: SoundType.Laser,\n                frequency: 800,\n                duration: 0.15,\n                volume: 0.4 * intensity,\n                waveform: WaveformType.Square,\n                attack: 0.01,\n                decay: 0.05,\n                sustain: 0.3,\n                release: 0.09,\n                frequencyModulation: {\n                    rate: 30,\n                    depth: 200,\n                    waveform: WaveformType.Sine\n                }\n            },\n            [SoundType.Explosion]: {\n                type: SoundType.Explosion,\n                frequency: 120,\n                duration: 0.8,\n                volume: 0.6 * intensity,\n                waveform: WaveformType.Noise,\n                attack: 0.01,\n                decay: 0.3,\n                sustain: 0.2,\n                release: 0.49,\n                filter: {\n                    type: 'lowpass',\n                    frequency: 2000 - intensity * 500,\n                    resonance: 1\n                },\n                distortion: 0.5\n            },\n            [SoundType.Beep]: {\n                type: SoundType.Beep,\n                frequency: 1000,\n                duration: 0.1,\n                volume: 0.3 * intensity,\n                waveform: WaveformType.Square,\n                attack: 0.01,\n                decay: 0.02,\n                sustain: 0.8,\n                release: 0.07\n            },\n            [SoundType.Warning]: {\n                type: SoundType.Warning,\n                frequency: 800,\n                duration: 0.5,\n                volume: 0.5 * intensity,\n                waveform: WaveformType.Square,\n                attack: 0.05,\n                decay: 0.1,\n                sustain: 0.6,\n                release: 0.35,\n                frequencyModulation: {\n                    rate: 8,\n                    depth: 100,\n                    waveform: WaveformType.Triangle\n                }\n            },\n            [SoundType.Warp]: {\n                type: SoundType.Warp,\n                frequency: 200,\n                duration: 2.0,\n                volume: 0.4 * intensity,\n                waveform: WaveformType.Sine,\n                attack: 0.5,\n                decay: 0.5,\n                sustain: 0.8,\n                release: 1.0,\n                frequencyModulation: {\n                    rate: 0.5,\n                    depth: 400,\n                    waveform: WaveformType.Sine\n                },\n                reverb: {\n                    roomSize: 0.8,\n                    dampening: 0.3,\n                    wetness: 0.6\n                }\n            },\n            [SoundType.Shield]: {\n                type: SoundType.Shield,\n                frequency: 400,\n                duration: 0.3,\n                volume: 0.3 * intensity,\n                waveform: WaveformType.Triangle,\n                attack: 0.1,\n                decay: 0.1,\n                sustain: 0.5,\n                release: 0.1,\n                filter: {\n                    type: 'bandpass',\n                    frequency: 600,\n                    resonance: 5\n                }\n            },\n            [SoundType.Impact]: {\n                type: SoundType.Impact,\n                frequency: 80,\n                duration: 0.2,\n                volume: 0.5 * intensity,\n                waveform: WaveformType.Noise,\n                attack: 0.01,\n                decay: 0.05,\n                sustain: 0.3,\n                release: 0.14,\n                filter: {\n                    type: 'lowpass',\n                    frequency: 500,\n                    resonance: 2\n                },\n                distortion: 0.3\n            },\n            [SoundType.Communication]: {\n                type: SoundType.Communication,\n                frequency: 1200,\n                duration: 0.4,\n                volume: 0.25 * intensity,\n                waveform: WaveformType.Sine,\n                attack: 0.1,\n                decay: 0.1,\n                sustain: 0.6,\n                release: 0.2,\n                frequencyModulation: {\n                    rate: 5,\n                    depth: 50,\n                    waveform: WaveformType.Triangle\n                }\n            },\n            [SoundType.Ambient]: {\n                type: SoundType.Ambient,\n                frequency: 200,\n                duration: 5.0,\n                volume: 0.2 * intensity,\n                waveform: WaveformType.Sine,\n                attack: 2.0,\n                decay: 1.0,\n                sustain: 0.8,\n                release: 2.0\n            },\n            [SoundType.UI]: {\n                type: SoundType.UI,\n                frequency: 600,\n                duration: 0.08,\n                volume: 0.2 * intensity,\n                waveform: WaveformType.Square,\n                attack: 0.01,\n                decay: 0.02,\n                sustain: 0.5,\n                release: 0.05\n            },\n            [SoundType.Thrust]: {\n                type: SoundType.Thrust,\n                frequency: 100 + intensity * 50,\n                duration: 0.3,\n                volume: 0.4 * intensity,\n                waveform: WaveformType.Sawtooth,\n                attack: 0.05,\n                decay: 0.1,\n                sustain: 0.8,\n                release: 0.15,\n                filter: {\n                    type: 'lowpass',\n                    frequency: 400 + intensity * 200,\n                    resonance: 1\n                }\n            }\n        };\n        \n        this.playSound(configs[type]);\n    }\n\n    /**\n     * Start ambient space music\n     */\n    startAmbientTrack(trackName: string): void {\n        if (this.currentTrack === trackName) return;\n        \n        this.stopAmbientTrack();\n        \n        const trackConfigs: { [key: string]: AmbientTrackConfig } = {\n            'deep_space': {\n                name: 'Deep Space',\n                fadeInTime: 3.0,\n                fadeOutTime: 2.0,\n                crossfadeTime: 1.0,\n                layers: [\n                    {\n                        id: 'bass_drone',\n                        waveform: WaveformType.Sine,\n                        baseFrequency: 40,\n                        volume: 0.3,\n                        pan: 0,\n                        frequencyVariation: 0.1,\n                        volumeVariation: 0.2,\n                        frequency: { min: 35, max: 45, speed: 0.1 },\n                        filter: {\n                            type: 'lowpass',\n                            minFreq: 200,\n                            maxFreq: 800,\n                            speed: 0.05,\n                            resonance: 2\n                        }\n                    },\n                    {\n                        id: 'cosmic_wind',\n                        waveform: WaveformType.Noise,\n                        baseFrequency: 200,\n                        volume: 0.15,\n                        pan: -0.3,\n                        frequencyVariation: 0.3,\n                        volumeVariation: 0.4,\n                        frequency: { min: 150, max: 300, speed: 0.2 },\n                        filter: {\n                            type: 'bandpass',\n                            minFreq: 800,\n                            maxFreq: 3000,\n                            speed: 0.3,\n                            resonance: 1\n                        }\n                    },\n                    {\n                        id: 'stellar_harmonics',\n                        waveform: WaveformType.Triangle,\n                        baseFrequency: 220,\n                        volume: 0.2,\n                        pan: 0.4,\n                        frequencyVariation: 0.2,\n                        volumeVariation: 0.3,\n                        frequency: { min: 200, max: 440, speed: 0.15 },\n                        filter: {\n                            type: 'highpass',\n                            minFreq: 400,\n                            maxFreq: 1200,\n                            speed: 0.1,\n                            resonance: 0.5\n                        }\n                    }\n                ]\n            },\n            'nebula_drift': {\n                name: 'Nebula Drift',\n                fadeInTime: 4.0,\n                fadeOutTime: 3.0,\n                crossfadeTime: 2.0,\n                layers: [\n                    {\n                        id: 'nebula_wash',\n                        waveform: WaveformType.Sine,\n                        baseFrequency: 80,\n                        volume: 0.25,\n                        pan: 0,\n                        frequencyVariation: 0.3,\n                        volumeVariation: 0.5,\n                        frequency: { min: 60, max: 120, speed: 0.08 },\n                        filter: {\n                            type: 'lowpass',\n                            minFreq: 300,\n                            maxFreq: 1500,\n                            speed: 0.12,\n                            resonance: 3\n                        }\n                    },\n                    {\n                        id: 'particle_shimmer',\n                        waveform: WaveformType.Triangle,\n                        baseFrequency: 800,\n                        volume: 0.1,\n                        pan: -0.6,\n                        frequencyVariation: 0.4,\n                        volumeVariation: 0.6,\n                        frequency: { min: 600, max: 1200, speed: 0.4 },\n                        filter: {\n                            type: 'bandpass',\n                            minFreq: 1000,\n                            maxFreq: 4000,\n                            speed: 0.5,\n                            resonance: 2\n                        }\n                    }\n                ]\n            },\n            'void_silence': {\n                name: 'Void Silence',\n                fadeInTime: 5.0,\n                fadeOutTime: 4.0,\n                crossfadeTime: 3.0,\n                layers: [\n                    {\n                        id: 'quantum_whisper',\n                        waveform: WaveformType.Sine,\n                        baseFrequency: 30,\n                        volume: 0.15,\n                        pan: 0,\n                        frequencyVariation: 0.05,\n                        volumeVariation: 0.8,\n                        frequency: { min: 25, max: 35, speed: 0.02 },\n                        filter: {\n                            type: 'lowpass',\n                            minFreq: 100,\n                            maxFreq: 400,\n                            speed: 0.03,\n                            resonance: 1\n                        }\n                    }\n                ]\n            }\n        };\n        \n        const config = trackConfigs[trackName];\n        if (!config) {\n            this.logger.warn(`Unknown ambient track: ${trackName}`);\n            return;\n        }\n        \n        this.currentTrack = trackName;\n        this.createAmbientLayers(config);\n        \n        this.events.onTrackChanged?.(trackName);\n        this.logger.info(`🎵 Started ambient track: ${trackName}`);\n    }\n\n    /**\n     * Create ambient music layers\n     */\n    private createAmbientLayers(config: AmbientTrackConfig): void {\n        if (!this.audioContext || !this.musicGain) return;\n        \n        const now = this.audioContext.currentTime;\n        \n        config.layers.forEach(layerConfig => {\n            let source: AudioScheduledSourceNode;\n            \n            if (layerConfig.waveform === WaveformType.Noise) {\n                source = this.audioContext!.createBufferSource();\n                (source as AudioBufferSourceNode).buffer = this.noiseBuffer;\n                (source as AudioBufferSourceNode).loop = true;\n            } else {\n                const oscillator = this.audioContext!.createOscillator();\n                oscillator.type = layerConfig.waveform as OscillatorType;\n                oscillator.frequency.value = layerConfig.baseFrequency;\n                source = oscillator;\n            }\n            \n            // Create gain for this layer\n            const layerGain = this.audioContext!.createGain();\n            layerGain.gain.value = 0;\n            \n            // Create panner\n            const panner = this.audioContext!.createStereoPanner();\n            panner.pan.value = layerConfig.pan;\n            \n            // Create filter if specified\n            let filter: BiquadFilterNode | undefined;\n            if (layerConfig.filter) {\n                filter = this.audioContext!.createBiquadFilter();\n                filter.type = layerConfig.filter.type;\n                filter.frequency.value = layerConfig.filter.minFreq;\n                filter.Q.value = layerConfig.filter.resonance;\n            }\n            \n            // Connect audio graph\n            let currentNode: AudioNode = source;\n            \n            if (filter) {\n                currentNode.connect(filter);\n                currentNode = filter;\n            }\n            \n            currentNode.connect(layerGain);\n            layerGain.connect(panner);\n            panner.connect(this.musicGain!);\n            \n            // Fade in\n            layerGain.gain.linearRampToValueAtTime(\n                layerConfig.volume, \n                now + config.fadeInTime\n            );\n            \n            // Start the source\n            source.start(now);\n            \n            // Store layer references\n            this.ambientLayers.set(layerConfig.id, {\n                oscillator: source,\n                gain: layerGain,\n                filter,\n                panner\n            });\n            \n            // Start modulation if oscillator\n            if (source instanceof OscillatorNode) {\n                this.startLayerModulation(source, layerConfig, filter);\n            }\n        });\n    }\n\n    /**\n     * Start layer modulation effects\n     */\n    private startLayerModulation(\n        oscillator: OscillatorNode, \n        config: AmbientLayer, \n        filter?: BiquadFilterNode\n    ): void {\n        if (!this.audioContext) return;\n        \n        // Frequency modulation\n        const freqModOsc = this.audioContext.createOscillator();\n        const freqModGain = this.audioContext.createGain();\n        \n        freqModOsc.type = 'sine';\n        freqModOsc.frequency.value = config.frequency.speed;\n        freqModGain.gain.value = (config.frequency.max - config.frequency.min) / 2;\n        \n        freqModOsc.connect(freqModGain);\n        freqModGain.connect(oscillator.frequency);\n        freqModOsc.start();\n        \n        // Filter modulation\n        if (filter && config.filter) {\n            const filterModOsc = this.audioContext.createOscillator();\n            const filterModGain = this.audioContext.createGain();\n            \n            filterModOsc.type = 'triangle';\n            filterModOsc.frequency.value = config.filter.speed;\n            filterModGain.gain.value = (config.filter.maxFreq - config.filter.minFreq) / 2;\n            \n            filterModOsc.connect(filterModGain);\n            filterModGain.connect(filter.frequency);\n            filterModOsc.start();\n        }\n    }\n\n    /**\n     * Stop ambient track\n     */\n    stopAmbientTrack(): void {\n        if (!this.currentTrack || !this.audioContext) return;\n        \n        const now = this.audioContext.currentTime;\n        const fadeTime = 2.0;\n        \n        // Fade out all layers\n        this.ambientLayers.forEach(layer => {\n            layer.gain.gain.linearRampToValueAtTime(0, now + fadeTime);\n            layer.oscillator.stop(now + fadeTime + 0.1);\n        });\n        \n        // Clear layers after fade\n        setTimeout(() => {\n            this.ambientLayers.clear();\n        }, (fadeTime + 0.2) * 1000);\n        \n        this.currentTrack = null;\n        this.logger.info('🎵 Stopped ambient track');\n    }\n\n    /**\n     * Set master volume\n     */\n    setMasterVolume(volume: number): void {\n        this.masterVolume = Math.max(0, Math.min(1, volume));\n        if (this.masterGain) {\n            this.masterGain.gain.value = this.masterVolume;\n        }\n    }\n\n    /**\n     * Set music volume\n     */\n    setMusicVolume(volume: number): void {\n        this.musicVolume = Math.max(0, Math.min(1, volume));\n        if (this.musicGain) {\n            this.musicGain.gain.value = this.musicVolume;\n        }\n    }\n\n    /**\n     * Set sound effects volume\n     */\n    setSFXVolume(volume: number): void {\n        this.sfxVolume = Math.max(0, Math.min(1, volume));\n        if (this.soundEffectsGain) {\n            this.soundEffectsGain.gain.value = this.sfxVolume;\n        }\n    }\n\n    /**\n     * Get audio statistics\n     */\n    getAudioStats(): {\n        contextState: string;\n        activeSounds: number;\n        currentTrack: string | null;\n        ambientLayers: number;\n        masterVolume: number;\n        musicVolume: number;\n        sfxVolume: number;\n    } {\n        return {\n            contextState: this.audioContext?.state || 'not_initialized',\n            activeSounds: this.activeSounds.size,\n            currentTrack: this.currentTrack,\n            ambientLayers: this.ambientLayers.size,\n            masterVolume: this.masterVolume,\n            musicVolume: this.musicVolume,\n            sfxVolume: this.sfxVolume\n        };\n    }\n\n    /**\n     * Stop all sounds\n     */\n    stopAllSounds(): void {\n        // Stop sound effects\n        this.activeSounds.forEach(sound => {\n            if (sound instanceof AudioScheduledSourceNode) {\n                try {\n                    sound.stop();\n                } catch (e) {\n                    // Sound might already be stopped\n                }\n            }\n        });\n        this.activeSounds.clear();\n        \n        // Stop ambient music\n        this.stopAmbientTrack();\n    }\n\n    /**\n     * Dispose audio system\n     */\n    dispose(): void {\n        this.stopAllSounds();\n        \n        if (this.audioContext) {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n        \n        this.logger.info('🔊 Audio system disposed');\n    }\n}","/**\n * Main Menu System\n * Professional game menu with retro CRT styling and smooth transitions\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\nimport { InputManager } from '@core/InputManager';\nimport { ProceduralAudio, SoundType } from '@audio/ProceduralAudio';\nimport { ParticleSystem, ParticleType } from '@effects/ParticleSystem';\n\nexport enum MenuState {\n    MainMenu = 'main_menu',\n    NewGame = 'new_game',\n    LoadGame = 'load_game',\n    Settings = 'settings',\n    Credits = 'credits',\n    Connecting = 'connecting',\n    GameStart = 'game_start'\n}\n\nexport interface MenuButton {\n    id: string;\n    text: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    enabled: boolean;\n    highlighted: boolean;\n    action: () => void;\n    hotkey?: string;\n}\n\nexport interface MenuConfig {\n    title: string;\n    subtitle?: string;\n    showBackground: boolean;\n    showParticles: boolean;\n    enableSounds: boolean;\n    transitionTime: number;\n}\n\nexport interface NewGameSettings {\n    playerName: string;\n    difficulty: 'easy' | 'normal' | 'hard' | 'nightmare';\n    galaxySeed: string;\n    galaxySize: 'small' | 'medium' | 'large' | 'huge';\n    startingResources: 'minimal' | 'standard' | 'abundant';\n    enemyFrequency: 'low' | 'normal' | 'high' | 'extreme';\n    enablePermadeath: boolean;\n    enableTutorial: boolean;\n}\n\nexport interface GameSettings {\n    // Video settings\n    renderScale: number;\n    vsync: boolean;\n    fullscreen: boolean;\n    \n    // Audio settings\n    masterVolume: number;\n    musicVolume: number;\n    sfxVolume: number;\n    \n    // Gameplay settings\n    difficulty: 'easy' | 'normal' | 'hard';\n    mouseSensitivity: number;\n    showFPS: boolean;\n    autoSave: boolean;\n    autoSaveInterval: number;\n    \n    // Accessibility\n    colorblindMode: 'none' | 'deuteranopia' | 'protanopia' | 'tritanopia';\n    subtitles: boolean;\n    reducedMotion: boolean;\n    \n    // Controls\n    keyBindings: { [action: string]: string };\n}\n\nexport interface MenuEvents {\n    onNewGame?: (settings: NewGameSettings) => void;\n    onLoadGame?: (saveSlot: number) => void;\n    onSettings?: (settings: GameSettings) => void;\n    onExit?: () => void;\n    onGameStart?: () => void;\n}\n\nexport class MainMenu {\n    private currentState: MenuState = MenuState.MainMenu;\n    private previousState: MenuState | null = null;\n    \n    // UI state\n    private buttons: MenuButton[] = [];\n    private selectedButtonIndex: number = 0;\n    private animationTime: number = 0;\n    private transitionProgress: number = 0;\n    private isTransitioning: boolean = false;\n    \n    // Settings\n    private newGameSettings: NewGameSettings;\n    private gameSettings: GameSettings;\n    \n    // Visual effects\n    private backgroundParticles: string[] = [];\n    private titleGlow: number = 0;\n    private screenFlicker: number = 0;\n    \n    // Menu specific data\n    private saveSlots: Array<{\n        slot: number;\n        name: string;\n        date: string;\n        playtime: string;\n        level: number;\n        system: string;\n        exists: boolean;\n    }> = [];\n    \n    private events: MenuEvents;\n    private audio: ProceduralAudio | null = null;\n    private particles: ParticleSystem | null = null;\n    private logger: Logger;\n\n    constructor(\n        events: MenuEvents,\n        audio?: ProceduralAudio,\n        particles?: ParticleSystem\n    ) {\n        this.logger = new Logger('MainMenu');\n        this.events = events;\n        this.audio = audio || null;\n        this.particles = particles || null;\n        \n        // Initialize default settings\n        this.newGameSettings = this.getDefaultNewGameSettings();\n        this.gameSettings = this.getDefaultGameSettings();\n        \n        // Load save slots\n        this.loadSaveSlots();\n        \n        // Initialize main menu\n        this.initializeMainMenu();\n        \n        // Start background effects\n        this.startBackgroundEffects();\n        \n        this.logger.info('🎮 Main menu system initialized');\n    }\n\n    /**\n     * Update menu system\n     */\n    update(deltaTime: number, input: InputManager): void {\n        this.animationTime += deltaTime;\n        \n        // Update visual effects\n        this.updateVisualEffects(deltaTime);\n        \n        // Handle transitions\n        if (this.isTransitioning) {\n            this.updateTransition(deltaTime);\n            return;\n        }\n        \n        // Handle input based on current state\n        this.handleInput(input);\n        \n        // Update particles\n        this.updateParticleEffects(deltaTime);\n    }\n\n    /**\n     * Handle input for current menu state\n     */\n    private handleInput(input: InputManager): void {\n        // Navigation\n        if (input.isKeyPressed('ArrowUp') || input.isKeyPressed('KeyW')) {\n            this.navigateUp();\n        } else if (input.isKeyPressed('ArrowDown') || input.isKeyPressed('KeyS')) {\n            this.navigateDown();\n        }\n        \n        // Selection\n        if (input.isKeyPressed('Enter') || input.isKeyPressed('Space')) {\n            this.selectButton();\n        }\n        \n        // Back/Cancel\n        if (input.isKeyPressed('Escape')) {\n            this.goBack();\n        }\n        \n        // State-specific input\n        switch (this.currentState) {\n            case MenuState.NewGame:\n                this.handleNewGameInput(input);\n                break;\n            case MenuState.Settings:\n                this.handleSettingsInput(input);\n                break;\n        }\n        \n        // Hotkey support\n        this.handleHotkeys(input);\n    }\n\n    /**\n     * Navigate up in menu\n     */\n    private navigateUp(): void {\n        if (this.buttons.length === 0) return;\n        \n        this.playUISound('navigation');\n        \n        do {\n            this.selectedButtonIndex = (this.selectedButtonIndex - 1 + this.buttons.length) % this.buttons.length;\n        } while (!this.buttons[this.selectedButtonIndex].enabled);\n        \n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Navigate down in menu\n     */\n    private navigateDown(): void {\n        if (this.buttons.length === 0) return;\n        \n        this.playUISound('navigation');\n        \n        do {\n            this.selectedButtonIndex = (this.selectedButtonIndex + 1) % this.buttons.length;\n        } while (!this.buttons[this.selectedButtonIndex].enabled);\n        \n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Select current button\n     */\n    private selectButton(): void {\n        if (this.buttons.length === 0 || this.selectedButtonIndex >= this.buttons.length) return;\n        \n        const button = this.buttons[this.selectedButtonIndex];\n        if (!button.enabled) return;\n        \n        this.playUISound('select');\n        button.action();\n    }\n\n    /**\n     * Go back to previous menu\n     */\n    private goBack(): void {\n        this.playUISound('back');\n        \n        switch (this.currentState) {\n            case MenuState.MainMenu:\n                // Exit game or minimize\n                this.events.onExit?.();\n                break;\n            default:\n                this.transitionToState(MenuState.MainMenu);\n                break;\n        }\n    }\n\n    /**\n     * Initialize main menu buttons\n     */\n    private initializeMainMenu(): void {\n        this.buttons = [\n            {\n                id: 'new_game',\n                text: 'NEW GAME',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.NewGame),\n                hotkey: 'KeyN'\n            },\n            {\n                id: 'load_game',\n                text: 'LOAD GAME',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: this.hasSaveGames(),\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.LoadGame),\n                hotkey: 'KeyL'\n            },\n            {\n                id: 'settings',\n                text: 'SETTINGS',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.Settings),\n                hotkey: 'KeyS'\n            },\n            {\n                id: 'credits',\n                text: 'CREDITS',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.Credits),\n                hotkey: 'KeyC'\n            },\n            {\n                id: 'exit',\n                text: 'EXIT',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.events.onExit?.(),\n                hotkey: 'KeyQ'\n            }\n        ];\n        \n        this.selectedButtonIndex = 0;\n        this.updateButtonPositions();\n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Initialize new game menu\n     */\n    private initializeNewGameMenu(): void {\n        this.buttons = [\n            {\n                id: 'player_name',\n                text: `CAPTAIN NAME: ${this.newGameSettings.playerName}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.editPlayerName()\n            },\n            {\n                id: 'difficulty',\n                text: `DIFFICULTY: ${this.newGameSettings.difficulty.toUpperCase()}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.cycleDifficulty()\n            },\n            {\n                id: 'galaxy_size',\n                text: `GALAXY SIZE: ${this.newGameSettings.galaxySize.toUpperCase()}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.cycleGalaxySize()\n            },\n            {\n                id: 'enemy_frequency',\n                text: `HOSTILES: ${this.newGameSettings.enemyFrequency.toUpperCase()}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.cycleEnemyFrequency()\n            },\n            {\n                id: 'permadeath',\n                text: `PERMADEATH: ${this.newGameSettings.enablePermadeath ? 'ON' : 'OFF'}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.togglePermadeath()\n            },\n            {\n                id: 'tutorial',\n                text: `TUTORIAL: ${this.newGameSettings.enableTutorial ? 'ON' : 'OFF'}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.toggleTutorial()\n            },\n            {\n                id: 'start_game',\n                text: 'START MISSION',\n                x: 0, y: 0, width: 300, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.startNewGame()\n            },\n            {\n                id: 'back',\n                text: 'BACK',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.MainMenu)\n            }\n        ];\n        \n        this.selectedButtonIndex = 0;\n        this.updateButtonPositions();\n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Initialize load game menu\n     */\n    private initializeLoadGameMenu(): void {\n        this.buttons = [];\n        \n        // Add save slot buttons\n        for (let i = 0; i < this.saveSlots.length; i++) {\n            const slot = this.saveSlots[i];\n            \n            this.buttons.push({\n                id: `save_slot_${slot.slot}`,\n                text: slot.exists ? \n                    `SLOT ${slot.slot}: ${slot.name} - ${slot.system} (${slot.playtime})` :\n                    `SLOT ${slot.slot}: EMPTY`,\n                x: 0, y: 0, width: 600, height: 40,\n                enabled: slot.exists,\n                highlighted: false,\n                action: () => this.loadGame(slot.slot)\n            });\n        }\n        \n        // Add back button\n        this.buttons.push({\n            id: 'back',\n            text: 'BACK',\n            x: 0, y: 0, width: 200, height: 40,\n            enabled: true,\n            highlighted: false,\n            action: () => this.transitionToState(MenuState.MainMenu)\n        });\n        \n        this.selectedButtonIndex = 0;\n        this.updateButtonPositions();\n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Initialize settings menu\n     */\n    private initializeSettingsMenu(): void {\n        this.buttons = [\n            {\n                id: 'render_scale',\n                text: `RENDER QUALITY: ${Math.round(this.gameSettings.renderScale * 100)}%`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.adjustRenderScale()\n            },\n            {\n                id: 'master_volume',\n                text: `MASTER VOLUME: ${Math.round(this.gameSettings.masterVolume * 100)}%`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.adjustMasterVolume()\n            },\n            {\n                id: 'music_volume',\n                text: `MUSIC VOLUME: ${Math.round(this.gameSettings.musicVolume * 100)}%`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.adjustMusicVolume()\n            },\n            {\n                id: 'sfx_volume',\n                text: `SFX VOLUME: ${Math.round(this.gameSettings.sfxVolume * 100)}%`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.adjustSfxVolume()\n            },\n            {\n                id: 'show_fps',\n                text: `SHOW FPS: ${this.gameSettings.showFPS ? 'ON' : 'OFF'}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.toggleShowFPS()\n            },\n            {\n                id: 'vsync',\n                text: `VSYNC: ${this.gameSettings.vsync ? 'ON' : 'OFF'}`,\n                x: 0, y: 0, width: 400, height: 30,\n                enabled: true,\n                highlighted: false,\n                action: () => this.toggleVSync()\n            },\n            {\n                id: 'apply_settings',\n                text: 'APPLY CHANGES',\n                x: 0, y: 0, width: 300, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.applySettings()\n            },\n            {\n                id: 'reset_defaults',\n                text: 'RESET TO DEFAULTS',\n                x: 0, y: 0, width: 300, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.resetToDefaults()\n            },\n            {\n                id: 'back',\n                text: 'BACK',\n                x: 0, y: 0, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.MainMenu)\n            }\n        ];\n        \n        this.selectedButtonIndex = 0;\n        this.updateButtonPositions();\n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Initialize credits menu\n     */\n    private initializeCreditsMenu(): void {\n        this.buttons = [\n            {\n                id: 'back',\n                text: 'BACK',\n                x: 400, y: 500, width: 200, height: 40,\n                enabled: true,\n                highlighted: false,\n                action: () => this.transitionToState(MenuState.MainMenu)\n            }\n        ];\n        \n        this.selectedButtonIndex = 0;\n        this.updateButtonHighlights();\n    }\n\n    /**\n     * Update button positions based on screen size\n     */\n    private updateButtonPositions(): void {\n        const centerX = 400; // Assuming 800px width\n        const startY = 250;\n        const spacing = 50;\n        \n        for (let i = 0; i < this.buttons.length; i++) {\n            const button = this.buttons[i];\n            button.x = centerX - button.width / 2;\n            button.y = startY + i * spacing;\n        }\n    }\n\n    /**\n     * Update button highlight states\n     */\n    private updateButtonHighlights(): void {\n        for (let i = 0; i < this.buttons.length; i++) {\n            this.buttons[i].highlighted = (i === this.selectedButtonIndex);\n        }\n    }\n\n    /**\n     * Handle new game settings input\n     */\n    private handleNewGameInput(input: InputManager): void {\n        // Additional input handling for new game menu\n        if (input.isKeyPressed('KeyR')) {\n            this.generateRandomSeed();\n        }\n    }\n\n    /**\n     * Handle settings input\n     */\n    private handleSettingsInput(input: InputManager): void {\n        const button = this.buttons[this.selectedButtonIndex];\n        if (!button) return;\n        \n        // Use left/right arrows to adjust values\n        if (input.isKeyPressed('ArrowLeft')) {\n            this.adjustSettingDown(button.id);\n        } else if (input.isKeyPressed('ArrowRight')) {\n            this.adjustSettingUp(button.id);\n        }\n    }\n\n    /**\n     * Handle hotkey input\n     */\n    private handleHotkeys(input: InputManager): void {\n        if (this.currentState !== MenuState.MainMenu) return;\n        \n        for (const button of this.buttons) {\n            if (button.hotkey && input.isKeyPressed(button.hotkey) && button.enabled) {\n                this.playUISound('select');\n                button.action();\n                break;\n            }\n        }\n    }\n\n    /**\n     * Transition to new menu state\n     */\n    private transitionToState(newState: MenuState): void {\n        if (this.isTransitioning) return;\n        \n        this.previousState = this.currentState;\n        this.isTransitioning = true;\n        this.transitionProgress = 0;\n        \n        // Start transition effect\n        this.playUISound('transition');\n        this.createTransitionEffect();\n        \n        // Initialize new state after half transition\n        setTimeout(() => {\n            this.currentState = newState;\n            this.initializeMenuForState(newState);\n        }, 150); // Half of transition time\n    }\n\n    /**\n     * Initialize menu for specific state\n     */\n    private initializeMenuForState(state: MenuState): void {\n        switch (state) {\n            case MenuState.MainMenu:\n                this.initializeMainMenu();\n                break;\n            case MenuState.NewGame:\n                this.initializeNewGameMenu();\n                break;\n            case MenuState.LoadGame:\n                this.initializeLoadGameMenu();\n                break;\n            case MenuState.Settings:\n                this.initializeSettingsMenu();\n                break;\n            case MenuState.Credits:\n                this.initializeCreditsMenu();\n                break;\n        }\n    }\n\n    /**\n     * Update transition animation\n     */\n    private updateTransition(deltaTime: number): void {\n        this.transitionProgress += deltaTime / 300; // 300ms transition\n        \n        if (this.transitionProgress >= 1.0) {\n            this.transitionProgress = 1.0;\n            this.isTransitioning = false;\n        }\n    }\n\n    /**\n     * Update visual effects\n     */\n    private updateVisualEffects(deltaTime: number): void {\n        // Title glow animation\n        this.titleGlow = (Math.sin(this.animationTime * 0.003) + 1) * 0.5;\n        \n        // Screen flicker effect\n        this.screenFlicker = Math.random() * 0.05;\n        \n        // Background particle movement\n        this.updateBackgroundParticles(deltaTime);\n    }\n\n    /**\n     * Update particle effects\n     */\n    private updateParticleEffects(deltaTime: number): void {\n        if (!this.particles) return;\n        \n        this.particles.update(deltaTime);\n        \n        // Spawn occasional background particles\n        if (Math.random() < 0.01) {\n            const x = Math.random() * 800;\n            const y = Math.random() * 600;\n            this.particles.createExplosion({ x, y }, 0.1);\n        }\n    }\n\n    /**\n     * Start background effects\n     */\n    private startBackgroundEffects(): void {\n        if (!this.particles) return;\n        \n        // Create initial background particles\n        for (let i = 0; i < 20; i++) {\n            const x = Math.random() * 800;\n            const y = Math.random() * 600;\n            const emitterId = this.particles.createThrustTrail(\n                { x, y },\n                Math.random() * Math.PI * 2,\n                0.2\n            );\n            this.backgroundParticles.push(emitterId);\n        }\n        \n        // Start ambient music\n        if (this.audio) {\n            this.audio.startAmbientTrack('void_silence');\n        }\n    }\n\n    /**\n     * Update background particles\n     */\n    private updateBackgroundParticles(deltaTime: number): void {\n        // Background particles drift slowly\n        // Implementation depends on particle system API\n    }\n\n    /**\n     * Create transition effect\n     */\n    private createTransitionEffect(): void {\n        if (!this.particles) return;\n        \n        // Screen wipe effect with particles\n        for (let i = 0; i < 50; i++) {\n            const x = Math.random() * 800;\n            const y = Math.random() * 600;\n            this.particles.createExplosion({ x, y }, 0.3);\n        }\n    }\n\n    /**\n     * Play UI sound effect\n     */\n    private playUISound(type: 'navigation' | 'select' | 'back' | 'transition' | 'error'): void {\n        if (!this.audio) return;\n        \n        switch (type) {\n            case 'navigation':\n                this.audio.playRetroSound(SoundType.Beep, 0.3);\n                break;\n            case 'select':\n                this.audio.playRetroSound(SoundType.UI, 0.5);\n                break;\n            case 'back':\n                this.audio.playRetroSound(SoundType.UI, 0.3);\n                break;\n            case 'transition':\n                this.audio.playRetroSound(SoundType.Communication, 0.4);\n                break;\n            case 'error':\n                this.audio.playRetroSound(SoundType.Warning, 0.6);\n                break;\n        }\n    }\n\n    /**\n     * New game setting actions\n     */\n    private editPlayerName(): void {\n        // Simple name cycling for demo\n        const names = ['COMMANDER', 'CAPTAIN', 'ADMIRAL', 'PILOT', 'EXPLORER'];\n        const currentIndex = names.indexOf(this.newGameSettings.playerName);\n        this.newGameSettings.playerName = names[(currentIndex + 1) % names.length];\n        this.updateNewGameMenuText();\n    }\n\n    private cycleDifficulty(): void {\n        const difficulties: NewGameSettings['difficulty'][] = ['easy', 'normal', 'hard', 'nightmare'];\n        const currentIndex = difficulties.indexOf(this.newGameSettings.difficulty);\n        this.newGameSettings.difficulty = difficulties[(currentIndex + 1) % difficulties.length];\n        this.updateNewGameMenuText();\n    }\n\n    private cycleGalaxySize(): void {\n        const sizes: NewGameSettings['galaxySize'][] = ['small', 'medium', 'large', 'huge'];\n        const currentIndex = sizes.indexOf(this.newGameSettings.galaxySize);\n        this.newGameSettings.galaxySize = sizes[(currentIndex + 1) % sizes.length];\n        this.updateNewGameMenuText();\n    }\n\n    private cycleEnemyFrequency(): void {\n        const frequencies: NewGameSettings['enemyFrequency'][] = ['low', 'normal', 'high', 'extreme'];\n        const currentIndex = frequencies.indexOf(this.newGameSettings.enemyFrequency);\n        this.newGameSettings.enemyFrequency = frequencies[(currentIndex + 1) % frequencies.length];\n        this.updateNewGameMenuText();\n    }\n\n    private togglePermadeath(): void {\n        this.newGameSettings.enablePermadeath = !this.newGameSettings.enablePermadeath;\n        this.updateNewGameMenuText();\n    }\n\n    private toggleTutorial(): void {\n        this.newGameSettings.enableTutorial = !this.newGameSettings.enableTutorial;\n        this.updateNewGameMenuText();\n    }\n\n    private generateRandomSeed(): void {\n        this.newGameSettings.galaxySeed = Math.random().toString(36).substring(2, 8).toUpperCase();\n        this.updateNewGameMenuText();\n    }\n\n    private startNewGame(): void {\n        this.playUISound('select');\n        this.events.onNewGame?.(this.newGameSettings);\n        this.transitionToState(MenuState.GameStart);\n    }\n\n    /**\n     * Settings adjustment actions\n     */\n    private adjustSettingDown(settingId: string): void {\n        switch (settingId) {\n            case 'render_scale':\n                this.gameSettings.renderScale = Math.max(0.5, this.gameSettings.renderScale - 0.1);\n                break;\n            case 'master_volume':\n                this.gameSettings.masterVolume = Math.max(0, this.gameSettings.masterVolume - 0.1);\n                break;\n            case 'music_volume':\n                this.gameSettings.musicVolume = Math.max(0, this.gameSettings.musicVolume - 0.1);\n                break;\n            case 'sfx_volume':\n                this.gameSettings.sfxVolume = Math.max(0, this.gameSettings.sfxVolume - 0.1);\n                break;\n        }\n        this.updateSettingsMenuText();\n    }\n\n    private adjustSettingUp(settingId: string): void {\n        switch (settingId) {\n            case 'render_scale':\n                this.gameSettings.renderScale = Math.min(2.0, this.gameSettings.renderScale + 0.1);\n                break;\n            case 'master_volume':\n                this.gameSettings.masterVolume = Math.min(1.0, this.gameSettings.masterVolume + 0.1);\n                break;\n            case 'music_volume':\n                this.gameSettings.musicVolume = Math.min(1.0, this.gameSettings.musicVolume + 0.1);\n                break;\n            case 'sfx_volume':\n                this.gameSettings.sfxVolume = Math.min(1.0, this.gameSettings.sfxVolume + 0.1);\n                break;\n        }\n        this.updateSettingsMenuText();\n    }\n\n    private adjustRenderScale(): void {\n        this.gameSettings.renderScale = this.gameSettings.renderScale >= 2.0 ? 0.5 : this.gameSettings.renderScale + 0.25;\n        this.updateSettingsMenuText();\n    }\n\n    private adjustMasterVolume(): void {\n        this.gameSettings.masterVolume = (this.gameSettings.masterVolume + 0.2) % 1.2;\n        if (this.gameSettings.masterVolume > 1.0) this.gameSettings.masterVolume = 0;\n        this.updateSettingsMenuText();\n    }\n\n    private adjustMusicVolume(): void {\n        this.gameSettings.musicVolume = (this.gameSettings.musicVolume + 0.2) % 1.2;\n        if (this.gameSettings.musicVolume > 1.0) this.gameSettings.musicVolume = 0;\n        this.updateSettingsMenuText();\n    }\n\n    private adjustSfxVolume(): void {\n        this.gameSettings.sfxVolume = (this.gameSettings.sfxVolume + 0.2) % 1.2;\n        if (this.gameSettings.sfxVolume > 1.0) this.gameSettings.sfxVolume = 0;\n        this.updateSettingsMenuText();\n    }\n\n    private toggleShowFPS(): void {\n        this.gameSettings.showFPS = !this.gameSettings.showFPS;\n        this.updateSettingsMenuText();\n    }\n\n    private toggleVSync(): void {\n        this.gameSettings.vsync = !this.gameSettings.vsync;\n        this.updateSettingsMenuText();\n    }\n\n    private applySettings(): void {\n        this.playUISound('select');\n        this.events.onSettings?.(this.gameSettings);\n        this.saveSettings();\n    }\n\n    private resetToDefaults(): void {\n        this.gameSettings = this.getDefaultGameSettings();\n        this.updateSettingsMenuText();\n        this.playUISound('select');\n    }\n\n    /**\n     * Load game action\n     */\n    private loadGame(slot: number): void {\n        this.playUISound('select');\n        this.events.onLoadGame?.(slot);\n        this.transitionToState(MenuState.GameStart);\n    }\n\n    /**\n     * Update menu text after changes\n     */\n    private updateNewGameMenuText(): void {\n        if (this.currentState !== MenuState.NewGame) return;\n        \n        const buttonUpdates = [\n            { id: 'player_name', text: `CAPTAIN NAME: ${this.newGameSettings.playerName}` },\n            { id: 'difficulty', text: `DIFFICULTY: ${this.newGameSettings.difficulty.toUpperCase()}` },\n            { id: 'galaxy_size', text: `GALAXY SIZE: ${this.newGameSettings.galaxySize.toUpperCase()}` },\n            { id: 'enemy_frequency', text: `HOSTILES: ${this.newGameSettings.enemyFrequency.toUpperCase()}` },\n            { id: 'permadeath', text: `PERMADEATH: ${this.newGameSettings.enablePermadeath ? 'ON' : 'OFF'}` },\n            { id: 'tutorial', text: `TUTORIAL: ${this.newGameSettings.enableTutorial ? 'ON' : 'OFF'}` }\n        ];\n        \n        buttonUpdates.forEach(update => {\n            const button = this.buttons.find(b => b.id === update.id);\n            if (button) button.text = update.text;\n        });\n    }\n\n    private updateSettingsMenuText(): void {\n        if (this.currentState !== MenuState.Settings) return;\n        \n        const buttonUpdates = [\n            { id: 'render_scale', text: `RENDER QUALITY: ${Math.round(this.gameSettings.renderScale * 100)}%` },\n            { id: 'master_volume', text: `MASTER VOLUME: ${Math.round(this.gameSettings.masterVolume * 100)}%` },\n            { id: 'music_volume', text: `MUSIC VOLUME: ${Math.round(this.gameSettings.musicVolume * 100)}%` },\n            { id: 'sfx_volume', text: `SFX VOLUME: ${Math.round(this.gameSettings.sfxVolume * 100)}%` },\n            { id: 'show_fps', text: `SHOW FPS: ${this.gameSettings.showFPS ? 'ON' : 'OFF'}` },\n            { id: 'vsync', text: `VSYNC: ${this.gameSettings.vsync ? 'ON' : 'OFF'}` }\n        ];\n        \n        buttonUpdates.forEach(update => {\n            const button = this.buttons.find(b => b.id === update.id);\n            if (button) button.text = update.text;\n        });\n    }\n\n    /**\n     * Utility methods\n     */\n    private getDefaultNewGameSettings(): NewGameSettings {\n        return {\n            playerName: 'COMMANDER',\n            difficulty: 'normal',\n            galaxySeed: Math.random().toString(36).substring(2, 8).toUpperCase(),\n            galaxySize: 'medium',\n            startingResources: 'standard',\n            enemyFrequency: 'normal',\n            enablePermadeath: false,\n            enableTutorial: true\n        };\n    }\n\n    private getDefaultGameSettings(): GameSettings {\n        return {\n            renderScale: 1.0,\n            vsync: true,\n            fullscreen: false,\n            masterVolume: 0.7,\n            musicVolume: 0.5,\n            sfxVolume: 0.8,\n            difficulty: 'normal' as const,\n            mouseSensitivity: 1.0,\n            showFPS: false,\n            autoSave: true,\n            autoSaveInterval: 300, // 5 minutes\n            colorblindMode: 'none',\n            subtitles: false,\n            reducedMotion: false,\n            keyBindings: {\n                forward: 'KeyW',\n                backward: 'KeyS',\n                left: 'KeyA',\n                right: 'KeyD',\n                fire: 'Space',\n                warp: 'KeyW'\n            }\n        };\n    }\n\n    private hasSaveGames(): boolean {\n        return this.saveSlots.some(slot => slot.exists);\n    }\n\n    private loadSaveSlots(): void {\n        // Mock save data for demo\n        this.saveSlots = [\n            {\n                slot: 1,\n                name: 'Captain Nova',\n                date: '2024-01-15',\n                playtime: '12h 34m',\n                level: 15,\n                system: 'Alpha Centauri',\n                exists: true\n            },\n            {\n                slot: 2,\n                name: 'Commander Rex',\n                date: '2024-01-10',\n                playtime: '8h 22m',\n                level: 8,\n                system: 'Sol System',\n                exists: true\n            },\n            {\n                slot: 3,\n                name: '',\n                date: '',\n                playtime: '',\n                level: 0,\n                system: '',\n                exists: false\n            }\n        ];\n    }\n\n    private saveSettings(): void {\n        try {\n            localStorage.setItem('gameSettings', JSON.stringify(this.gameSettings));\n            this.logger.info('⚙️ Settings saved');\n        } catch (error) {\n            this.logger.error('Failed to save settings', error);\n        }\n    }\n\n    private loadSettings(): void {\n        try {\n            const saved = localStorage.getItem('gameSettings');\n            if (saved) {\n                this.gameSettings = { ...this.getDefaultGameSettings(), ...JSON.parse(saved) };\n                this.logger.info('⚙️ Settings loaded');\n            }\n        } catch (error) {\n            this.logger.warn('Failed to load settings, using defaults', error);\n        }\n    }\n\n    /**\n     * Render menu system\n     */\n    render(renderer: Renderer): void {\n        // Clear screen with dark background\n        renderer.fillRect(0, 0, 800, 600, { r: 8, g: 8, b: 8 });\n        \n        // Apply screen flicker effect\n        if (this.screenFlicker > 0.03) {\n            const flickerAlpha = this.screenFlicker * 0.3;\n            renderer.fillRect(0, 0, 800, 600, { r: 16, g: 16, b: 16 });\n        }\n        \n        // Render current state\n        switch (this.currentState) {\n            case MenuState.MainMenu:\n                this.renderMainMenu(renderer);\n                break;\n            case MenuState.NewGame:\n                this.renderNewGameMenu(renderer);\n                break;\n            case MenuState.LoadGame:\n                this.renderLoadGameMenu(renderer);\n                break;\n            case MenuState.Settings:\n                this.renderSettingsMenu(renderer);\n                break;\n            case MenuState.Credits:\n                this.renderCreditsMenu(renderer);\n                break;\n            case MenuState.GameStart:\n                this.renderGameStart(renderer);\n                break;\n        }\n        \n        // Render transition effect\n        if (this.isTransitioning) {\n            this.renderTransition(renderer);\n        }\n        \n        // Render particles\n        if (this.particles) {\n            this.particles.render(renderer);\n        }\n    }\n\n    /**\n     * Render main menu\n     */\n    private renderMainMenu(renderer: Renderer): void {\n        // Render title with glow effect\n        const titleColor = {\n            r: 72 + Math.floor(this.titleGlow * 24),\n            g: 48 + Math.floor(this.titleGlow * 16),\n            b: 12 + Math.floor(this.titleGlow * 8)\n        };\n        \n        this.renderText(renderer, 'STELLAR ODYSSEY', 400, 100, 'large', titleColor, 'center');\n        this.renderText(renderer, 'DEEP SPACE EXPLORATION', 400, 140, 'medium', { r: 48, g: 48, b: 48 }, 'center');\n        \n        // Render version\n        this.renderText(renderer, 'v1.0.0 ALPHA', 780, 580, 'small', { r: 32, g: 32, b: 32 }, 'right');\n        \n        // Render buttons\n        this.renderButtons(renderer);\n        \n        // Render hotkey hints\n        if (this.currentState === MenuState.MainMenu) {\n            const hints = [\n                'N - New Game    L - Load Game    S - Settings    C - Credits    Q - Exit',\n                'Use ARROW KEYS or WASD to navigate, ENTER to select, ESC to go back'\n            ];\n            \n            hints.forEach((hint, index) => {\n                this.renderText(renderer, hint, 400, 520 + index * 20, 'small', { r: 24, g: 24, b: 24 }, 'center');\n            });\n        }\n    }\n\n    /**\n     * Render new game menu\n     */\n    private renderNewGameMenu(renderer: Renderer): void {\n        this.renderText(renderer, 'NEW MISSION SETUP', 400, 80, 'large', { r: 72, g: 48, b: 12 }, 'center');\n        \n        // Render buttons\n        this.renderButtons(renderer);\n        \n        // Render galaxy seed info\n        this.renderText(renderer, `GALAXY SEED: ${this.newGameSettings.galaxySeed}`, 400, 480, 'medium', { r: 48, g: 48, b: 48 }, 'center');\n        this.renderText(renderer, 'Press R to generate random seed', 400, 500, 'small', { r: 32, g: 32, b: 32 }, 'center');\n    }\n\n    /**\n     * Render load game menu\n     */\n    private renderLoadGameMenu(renderer: Renderer): void {\n        this.renderText(renderer, 'LOAD MISSION', 400, 80, 'large', { r: 72, g: 48, b: 12 }, 'center');\n        \n        // Render save slot details\n        for (let i = 0; i < this.saveSlots.length; i++) {\n            const slot = this.saveSlots[i];\n            const y = 150 + i * 70;\n            \n            if (slot.exists) {\n                // Render detailed save info\n                this.renderText(renderer, `SLOT ${slot.slot}: ${slot.name}`, 50, y, 'medium', { r: 48, g: 48, b: 48 }, 'left');\n                this.renderText(renderer, `Location: ${slot.system}`, 50, y + 20, 'small', { r: 32, g: 32, b: 32 }, 'left');\n                this.renderText(renderer, `Playtime: ${slot.playtime}`, 400, y + 20, 'small', { r: 32, g: 32, b: 32 }, 'left');\n                this.renderText(renderer, `Date: ${slot.date}`, 600, y + 20, 'small', { r: 32, g: 32, b: 32 }, 'left');\n            } else {\n                this.renderText(renderer, `SLOT ${slot.slot}: EMPTY`, 50, y, 'medium', { r: 24, g: 24, b: 24 }, 'left');\n            }\n        }\n        \n        // Render back button\n        this.renderButtons(renderer);\n    }\n\n    /**\n     * Render settings menu\n     */\n    private renderSettingsMenu(renderer: Renderer): void {\n        this.renderText(renderer, 'SYSTEM CONFIGURATION', 400, 80, 'large', { r: 72, g: 48, b: 12 }, 'center');\n        \n        // Render buttons\n        this.renderButtons(renderer);\n        \n        // Render instructions\n        this.renderText(renderer, 'Use LEFT/RIGHT arrows to adjust values', 400, 500, 'small', { r: 32, g: 32, b: 32 }, 'center');\n    }\n\n    /**\n     * Render credits menu\n     */\n    private renderCreditsMenu(renderer: Renderer): void {\n        this.renderText(renderer, 'STELLAR ODYSSEY', 400, 100, 'large', { r: 72, g: 48, b: 12 }, 'center');\n        \n        const credits = [\n            '',\n            'AI-DRIVEN GAME DEVELOPMENT',\n            '',\n            'Game Design & Programming:',\n            'Claude Sonnet 4 (Anthropic)',\n            '',\n            'Technology Stack:',\n            'TypeScript + HTML5 Canvas + WebGL',\n            'Web Audio API + Performance Monitoring',\n            'Procedural Generation + Advanced AI',\n            '',\n            'Special Thanks:',\n            'The TypeScript Community',\n            'Web Standards Contributors',\n            'Space Exploration Pioneers',\n            '',\n            '© 2024 AI-Powered Game Development',\n            'Created entirely through AI collaboration'\n        ];\n        \n        credits.forEach((line, index) => {\n            const y = 150 + index * 20;\n            const color = line === '' ? { r: 0, g: 0, b: 0 } :\n                         line.includes(':') ? { r: 48, g: 48, b: 48 } :\n                         { r: 32, g: 32, b: 32 };\n            \n            if (line !== '') {\n                this.renderText(renderer, line, 400, y, 'small', color, 'center');\n            }\n        });\n        \n        // Render back button\n        this.renderButtons(renderer);\n    }\n\n    /**\n     * Render game start loading\n     */\n    private renderGameStart(renderer: Renderer): void {\n        this.renderText(renderer, 'INITIALIZING STELLAR DRIVE...', 400, 250, 'large', { r: 72, g: 48, b: 12 }, 'center');\n        \n        // Animated loading bar\n        const progress = (this.animationTime % 3000) / 3000;\n        const barWidth = 400;\n        const barHeight = 20;\n        const barX = 400 - barWidth / 2;\n        const barY = 300;\n        \n        // Background\n        renderer.drawRect(barX, barY, barWidth, barHeight, { r: 32, g: 32, b: 32 });\n        \n        // Progress\n        const progressWidth = barWidth * progress;\n        renderer.fillRect(barX, barY, progressWidth, barHeight, { r: 72, g: 48, b: 12 });\n        \n        // Loading text\n        const loadingTexts = [\n            'Generating galaxy...',\n            'Calculating stellar positions...',\n            'Initializing quantum drive...',\n            'Loading mission parameters...',\n            'Calibrating sensors...',\n            'Establishing communications...',\n            'Mission ready!'\n        ];\n        \n        const textIndex = Math.floor(progress * loadingTexts.length);\n        const currentText = loadingTexts[Math.min(textIndex, loadingTexts.length - 1)];\n        \n        this.renderText(renderer, currentText, 400, 350, 'medium', { r: 48, g: 48, b: 48 }, 'center');\n        \n        // Auto-start game after loading\n        if (progress >= 0.95) {\n            setTimeout(() => this.events.onGameStart?.(), 500);\n        }\n    }\n\n    /**\n     * Render transition effect\n     */\n    private renderTransition(renderer: Renderer): void {\n        const alpha = this.transitionProgress < 0.5 ? \n            this.transitionProgress * 2 : \n            (1 - this.transitionProgress) * 2;\n        \n        // Screen wipe effect\n        const wipeHeight = 600 * alpha;\n        renderer.fillRect(0, 0, 800, wipeHeight, { r: 16, g: 16, b: 16 });\n        renderer.fillRect(0, 600 - wipeHeight, 800, wipeHeight, { r: 16, g: 16, b: 16 });\n    }\n\n    /**\n     * Render buttons\n     */\n    private renderButtons(renderer: Renderer): void {\n        for (const button of this.buttons) {\n            this.renderButton(renderer, button);\n        }\n    }\n\n    /**\n     * Render individual button\n     */\n    private renderButton(renderer: Renderer, button: MenuButton): void {\n        const color = button.highlighted ? \n            { r: 72, g: 48, b: 12 } : \n            button.enabled ? \n                { r: 48, g: 48, b: 48 } : \n                { r: 24, g: 24, b: 24 };\n        \n        // Button background (if highlighted)\n        if (button.highlighted) {\n            renderer.fillRect(button.x - 5, button.y - 5, button.width + 10, button.height + 10, { r: 16, g: 16, b: 16 });\n            renderer.drawRect(button.x - 5, button.y - 5, button.width + 10, button.height + 10, color);\n        }\n        \n        // Button text\n        this.renderText(renderer, button.text, button.x + button.width / 2, button.y + button.height / 2, 'medium', color, 'center');\n        \n        // Hotkey hint\n        if (button.hotkey && button.enabled) {\n            const hotkeyText = `[${button.hotkey.replace('Key', '')}]`;\n            this.renderText(renderer, hotkeyText, button.x + button.width + 10, button.y + button.height / 2, 'small', { r: 32, g: 32, b: 32 }, 'left');\n        }\n    }\n\n    /**\n     * Render text with retro styling\n     */\n    private renderText(\n        renderer: Renderer, \n        text: string, \n        x: number, \n        y: number, \n        size: 'small' | 'medium' | 'large', \n        color: Color, \n        align: 'left' | 'center' | 'right'\n    ): void {\n        const fontSize = size === 'small' ? 12 : size === 'medium' ? 16 : 24;\n        \n        // Simple text rendering for now - would use proper font rendering in full implementation\n        let textX = x;\n        if (align === 'center') {\n            textX = x - (text.length * fontSize * 0.3);\n        } else if (align === 'right') {\n            textX = x - (text.length * fontSize * 0.6);\n        }\n        \n        // Draw text as rectangles (simplified implementation)\n        for (let i = 0; i < text.length; i++) {\n            const charX = textX + i * fontSize * 0.6;\n            \n            if (text[i] !== ' ') {\n                renderer.fillRect(charX, y - fontSize / 2, fontSize * 0.5, fontSize, color);\n            }\n        }\n    }\n\n    /**\n     * Get current menu state\n     */\n    getCurrentState(): MenuState {\n        return this.currentState;\n    }\n\n    /**\n     * Get current settings\n     */\n    getGameSettings(): GameSettings {\n        return { ...this.gameSettings };\n    }\n\n    /**\n     * Set new game settings externally\n     */\n    setNewGameSettings(settings: Partial<NewGameSettings>): void {\n        Object.assign(this.newGameSettings, settings);\n        if (this.currentState === MenuState.NewGame) {\n            this.updateNewGameMenuText();\n        }\n    }\n\n    /**\n     * Dispose menu system\n     */\n    dispose(): void {\n        // Clean up background particles\n        if (this.particles) {\n            this.backgroundParticles.forEach(id => {\n                this.particles!.removeEmitter(id);\n            });\n        }\n        \n        this.logger.info('🎮 Main menu system disposed');\n    }\n}","/**\n * Game State Manager\n * Handles different game states and manages transitions with save/load functionality\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer } from '@core/Renderer';\nimport { PhysicsObject } from '@core/Physics';\nimport { Vector2 } from '@core/Renderer';\nimport { MainMenu, MenuEvents, NewGameSettings, GameSettings } from '@ui/MainMenu';\nimport { InputManager } from '@core/InputManager';\nimport { ProceduralAudio } from '@audio/ProceduralAudio';\nimport { ParticleSystem } from '@effects/ParticleSystem';\n\nexport enum GameState {\n    MainMenu = 'main_menu',\n    Loading = 'loading',\n    Playing = 'playing',\n    Paused = 'paused',\n    Inventory = 'inventory',\n    Research = 'research',\n    Navigation = 'navigation',\n    Diplomacy = 'diplomacy',\n    Settings = 'settings',\n    Credits = 'credits',\n    NewGame = 'new_game',\n    LoadGame = 'load_game',\n    Error = 'error'\n}\n\nexport interface GameData {\n    // Player data\n    playerShip: {\n        id: string;\n        position: Vector2;\n        velocity: Vector2;\n        health: number;\n        fuel: number;\n        resources: Map<string, number>;\n    };\n    \n    // Current location\n    currentSystem: {\n        id: string;\n        name: string;\n        type: 'star_system' | 'interstellar_space';\n    };\n    \n    // Game progress\n    gameTime: number;\n    level: number;\n    experience: number;\n    discoveries: string[];\n    technologies: string[];\n    \n    // Settings\n    settings: {\n        masterVolume: number;\n        musicVolume: number;\n        sfxVolume: number;\n        difficulty: 'easy' | 'normal' | 'hard';\n    };\n    \n    // Statistics\n    stats: {\n        timePlayedSeconds: number;\n        systemsVisited: number;\n        aliensEncountered: number;\n        battlesWon: number;\n        resourcesCollected: number;\n    };\n}\n\nexport interface StateTransition {\n    from: GameState;\n    to: GameState;\n    condition?: () => boolean;\n    action?: () => void;\n}\n\nexport class GameStateManager {\n    private currentState: GameState = GameState.MainMenu;\n    private previousState: GameState = GameState.MainMenu;\n    private gameData: GameData;\n    \n    // State management\n    private stateStack: GameState[] = [];\n    private transitions: Map<string, StateTransition> = new Map();\n    private stateStartTime: number = Date.now();\n    \n    // Menu system\n    private mainMenu: MainMenu | null = null;\n    \n    // Demo entities for FÁZE 1\n    private demoShip: PhysicsObject | null = null;\n    private demoPlanets: PhysicsObject[] = [];\n    \n    private logger: Logger;\n    private isInitialized = false;\n    private saveInterval = 30000; // Auto-save every 30 seconds\n\n    constructor(audio?: ProceduralAudio, particles?: ParticleSystem) {\n        this.logger = new Logger('GameStateManager');\n        \n        // Initialize default game data\n        this.gameData = this.createDefaultGameData();\n        \n        // Initialize menu system\n        this.initializeMenuSystem(audio, particles);\n        \n        // Setup state transitions\n        this.setupStateTransitions();\n        \n        this.logger.info('🎯 Game state manager created');\n    }\n\n    /**\n     * Initialize menu system\n     */\n    private initializeMenuSystem(audio?: ProceduralAudio, particles?: ParticleSystem): void {\n        const menuEvents: MenuEvents = {\n            onNewGame: async (settings: NewGameSettings) => {\n                await this.handleNewGame(settings);\n            },\n            onLoadGame: async (saveSlot: number) => {\n                await this.handleLoadGame(saveSlot);\n            },\n            onSettings: (settings: GameSettings) => {\n                this.handleSettingsChange(settings);\n            },\n            onExit: () => {\n                this.handleExit();\n            },\n            onGameStart: async () => {\n                await this.setState(GameState.Playing);\n            }\n        };\n        \n        this.mainMenu = new MainMenu(menuEvents, audio, particles);\n        this.logger.info('🎮 Menu system initialized');\n    }\n\n    /**\n     * Initialize the game state manager\n     */\n    async initialize(): Promise<void> {\n        this.logger.info('🔧 Initializing game state manager...');\n        \n        try {\n            // Try to load existing save data, fallback to defaults if none exists\n            try {\n                await this.loadGameData();\n                this.logger.info('Existing save data loaded');\n            } catch (error) {\n                this.logger.info('No existing save data found, creating new game data');\n                this.gameData = this.createDefaultGameData();\n            }\n            \n            // Setup demo content for FÁZE 1\n            this.setupDemoContent();\n            \n            this.isInitialized = true;\n            this.logger.info('✅ Game state manager initialized');\n            \n        } catch (error) {\n            this.logger.error('❌ Game state manager initialization failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Create default game data\n     */\n    private createDefaultGameData(): GameData {\n        return {\n            playerShip: {\n                id: 'player_ship',\n                position: { x: 512, y: 384 }, // Center of 1024x768 screen\n                velocity: { x: 0, y: 0 },\n                health: 100,\n                fuel: 1000,\n                resources: new Map([\n                    ['credits', 1000],\n                    ['fuel', 1000],\n                    ['metal', 50],\n                    ['crystals', 10]\n                ])\n            },\n            currentSystem: {\n                id: 'sol_system',\n                name: 'Sol System',\n                type: 'star_system'\n            },\n            gameTime: 0,\n            level: 1,\n            experience: 0,\n            discoveries: [],\n            technologies: ['basic_engines', 'basic_weapons'],\n            settings: {\n                masterVolume: 1.0,\n                musicVolume: 0.7,\n                sfxVolume: 0.8,\n                difficulty: 'normal'\n            },\n            stats: {\n                timePlayedSeconds: 0,\n                systemsVisited: 1,\n                aliensEncountered: 0,\n                battlesWon: 0,\n                resourcesCollected: 0\n            }\n        };\n    }\n\n    /**\n     * Setup state transitions\n     */\n    private setupStateTransitions(): void {\n        // Loading → MainMenu\n        this.addTransition(GameState.Loading, GameState.MainMenu);\n        \n        // MainMenu ↔ Playing\n        this.addTransition(GameState.MainMenu, GameState.Playing);\n        this.addTransition(GameState.Playing, GameState.MainMenu);\n        \n        // Playing ↔ Paused\n        this.addTransition(GameState.Playing, GameState.Paused);\n        this.addTransition(GameState.Paused, GameState.Playing);\n        \n        // Playing → Sub-states\n        this.addTransition(GameState.Playing, GameState.Inventory);\n        this.addTransition(GameState.Playing, GameState.Research);\n        this.addTransition(GameState.Playing, GameState.Navigation);\n        this.addTransition(GameState.Playing, GameState.Diplomacy);\n        \n        // Sub-states → Playing\n        this.addTransition(GameState.Inventory, GameState.Playing);\n        this.addTransition(GameState.Research, GameState.Playing);\n        this.addTransition(GameState.Navigation, GameState.Playing);\n        this.addTransition(GameState.Diplomacy, GameState.Playing);\n        \n        // Error state\n        this.addTransition(GameState.Playing, GameState.Error);\n        this.addTransition(GameState.Error, GameState.MainMenu);\n        \n        this.logger.debug('State transitions configured');\n    }\n\n    /**\n     * Add a state transition\n     */\n    private addTransition(from: GameState, to: GameState, condition?: () => boolean, action?: () => void): void {\n        const key = `${from}->${to}`;\n        this.transitions.set(key, { from, to, condition, action });\n    }\n\n    /**\n     * Setup demo content for FÁZE 1\n     */\n    private setupDemoContent(): void {\n        // Demo content will be created when needed\n        // This is just initialization\n        this.logger.debug('Demo content setup prepared');\n    }\n\n    /**\n     * Set the current game state\n     */\n    async setState(newState: GameState): Promise<void> {\n        const transitionKey = `${this.currentState}->${newState}`;\n        const transition = this.transitions.get(transitionKey);\n        \n        if (!transition) {\n            this.logger.warn(`Invalid state transition: ${this.currentState} → ${newState}`);\n            return;\n        }\n        \n        // Check transition condition\n        if (transition.condition && !transition.condition()) {\n            this.logger.debug(`Transition condition not met: ${transitionKey}`);\n            return;\n        }\n        \n        this.logger.info(`State transition: ${this.currentState} → ${newState}`);\n        \n        // Save previous state\n        this.previousState = this.currentState;\n        \n        // Execute transition action\n        if (transition.action) {\n            transition.action();\n        }\n        \n        // Update state\n        this.currentState = newState;\n        \n        // Handle state-specific initialization\n        await this.onStateEnter(newState);\n    }\n\n    /**\n     * Push state onto stack (for modal states)\n     */\n    pushState(newState: GameState): void {\n        this.stateStack.push(this.currentState);\n        this.currentState = newState;\n        this.logger.debug(`Pushed state: ${newState} (stack depth: ${this.stateStack.length})`);\n    }\n\n    /**\n     * Pop state from stack\n     */\n    popState(): GameState | null {\n        if (this.stateStack.length === 0) {\n            this.logger.warn('Cannot pop state: stack is empty');\n            return null;\n        }\n        \n        const poppedState = this.currentState;\n        this.currentState = this.stateStack.pop()!;\n        this.logger.debug(`Popped state: ${poppedState} → ${this.currentState}`);\n        \n        return poppedState;\n    }\n\n    /**\n     * Handle state enter events\n     */\n    private async onStateEnter(state: GameState): Promise<void> {\n        switch (state) {\n            case GameState.Playing:\n                // Start game time tracking\n                this.startGameTimeTracking();\n                break;\n                \n            case GameState.Paused:\n                // Pause game time tracking\n                this.pauseGameTimeTracking();\n                break;\n                \n            case GameState.MainMenu:\n                // Auto-save when returning to menu\n                await this.save();\n                break;\n                \n            case GameState.Error:\n                // Log error state entry\n                this.logger.error('Entered error state');\n                break;\n        }\n    }\n\n    /**\n     * Update the game state manager\n     */\n    update(deltaTime: number, input?: InputManager): void {\n        if (!this.isInitialized) return;\n        \n        // Update game time\n        if (this.currentState === GameState.Playing) {\n            this.gameData.gameTime += deltaTime;\n            this.gameData.stats.timePlayedSeconds += deltaTime;\n        }\n        \n        // State-specific updates\n        switch (this.currentState) {\n            case GameState.MainMenu:\n            case GameState.NewGame:\n            case GameState.LoadGame:\n            case GameState.Settings:\n            case GameState.Credits:\n                if (this.mainMenu && input) {\n                    this.mainMenu.update(deltaTime, input);\n                }\n                break;\n                \n            case GameState.Playing:\n                this.updatePlayingState(deltaTime);\n                break;\n                \n            case GameState.Loading:\n                this.updateLoadingState(deltaTime);\n                break;\n        }\n    }\n\n    /**\n     * Update playing state\n     */\n    private updatePlayingState(deltaTime: number): void {\n        // Update player ship position in game data\n        if (this.demoShip) {\n            this.gameData.playerShip.position = { ...this.demoShip.position };\n            this.gameData.playerShip.velocity = { ...this.demoShip.velocity };\n            \n            // Update ship health if damaged\n            if (this.demoShip.health !== undefined) {\n                this.gameData.playerShip.health = this.demoShip.health;\n            }\n        }\n    }\n\n    /**\n     * Update loading state\n     */\n    private updateLoadingState(deltaTime: number): void {\n        // Simulate loading time\n        const loadingTime = Date.now() - this.stateStartTime;\n        \n        if (loadingTime > 2000) { // 2 seconds loading time\n            this.setState(GameState.Playing).catch(error => {\n                this.logger.error('Failed to transition to playing state', error);\n            });\n        }\n    }\n\n    /**\n     * Render the current game state\n     */\n    render(renderer: Renderer): void {\n        if (!this.isInitialized) {\n            this.renderLoadingState(renderer);\n            return;\n        }\n        \n        switch (this.currentState) {\n            case GameState.MainMenu:\n            case GameState.NewGame:\n            case GameState.LoadGame:\n            case GameState.Settings:\n            case GameState.Credits:\n                if (this.mainMenu) {\n                    this.mainMenu.render(renderer);\n                }\n                break;\n                \n            case GameState.Loading:\n                this.renderLoadingState(renderer);\n                break;\n                \n            case GameState.Playing:\n                this.renderPlayingState(renderer);\n                break;\n                \n            case GameState.Paused:\n                this.renderPausedState(renderer);\n                break;\n                \n            case GameState.Error:\n                this.renderErrorState(renderer);\n                break;\n                \n            default:\n                this.renderDefaultState(renderer);\n        }\n    }\n\n    /**\n     * Render loading state\n     */\n    private renderLoadingState(renderer: Renderer): void {\n        const centerX = 512;\n        const centerY = 384;\n        \n        renderer.renderText('INITIALIZING SPACE EXPLORER...', centerX - 150, centerY - 50, \n            { r: 0, g: 255, b: 0 }, 16);\n        \n        // Animated loading dots\n        const dots = '.'.repeat((Math.floor(Date.now() / 500) % 4));\n        renderer.renderText(`LOADING${dots}`, centerX - 50, centerY, \n            { r: 0, g: 128, b: 0 }, 14);\n    }\n\n    /**\n     * Render menu state\n     */\n    private renderMenuState(renderer: Renderer): void {\n        const centerX = 512;\n        const centerY = 384;\n        \n        // Title\n        renderer.renderText('SPACE EXPLORER 16-BIT', centerX - 140, centerY - 100, \n            { r: 0, g: 255, b: 0 }, 20);\n        \n        // Menu options\n        const menuItems = [\n            'CONTINUE EXPLORATION',\n            'NEW EXPEDITION',\n            'SETTINGS',\n            'EXIT'\n        ];\n        \n        menuItems.forEach((item, index) => {\n            const y = centerY - 20 + index * 30;\n            const color = index === 0 ? { r: 255, g: 255, b: 0 } : { r: 0, g: 192, b: 0 };\n            renderer.renderText(item, centerX - 80, y, color, 14);\n        });\n        \n        // Instructions\n        renderer.renderText('USE ARROW KEYS TO NAVIGATE, ENTER TO SELECT', \n            centerX - 180, centerY + 150, { r: 0, g: 128, b: 0 }, 12);\n    }\n\n    /**\n     * Render playing state\n     */\n    private renderPlayingState(renderer: Renderer): void {\n        // Render space background\n        this.renderSpaceBackground(renderer);\n        \n        // Render demo ship if available\n        if (this.demoShip) {\n            const shipSprite = renderer.generateShipSprite('player', 32);\n            renderer.drawSprite(shipSprite, this.demoShip.position.x - 16, this.demoShip.position.y - 16);\n        }\n        \n        // Render demo planets\n        this.demoPlanets.forEach(planet => {\n            renderer.drawCircle(planet.position.x, planet.position.y, planet.radius, \n                { r: 64, g: 128, b: 192 }, true);\n        });\n        \n        // Render basic HUD\n        this.renderBasicHUD(renderer);\n    }\n\n    /**\n     * Render paused state\n     */\n    private renderPausedState(renderer: Renderer): void {\n        // Render playing state first\n        this.renderPlayingState(renderer);\n        \n        // Overlay pause menu\n        const centerX = 512;\n        const centerY = 384;\n        \n        // Semi-transparent background\n        renderer.fillRect(centerX - 100, centerY - 50, 200, 100, { r: 0, g: 0, b: 0, a: 128 });\n        \n        // Pause text\n        renderer.renderText('GAME PAUSED', centerX - 60, centerY - 20, \n            { r: 255, g: 255, b: 0 }, 16);\n        \n        renderer.renderText('PRESS ESC TO RESUME', centerX - 80, centerY + 10, \n            { r: 0, g: 192, b: 0 }, 12);\n    }\n\n    /**\n     * Render error state\n     */\n    private renderErrorState(renderer: Renderer): void {\n        const centerX = 512;\n        const centerY = 384;\n        \n        // Error background\n        renderer.fillRect(0, 0, 1024, 768, { r: 64, g: 0, b: 0 });\n        \n        // Error message\n        renderer.renderText('SYSTEM ERROR', centerX - 60, centerY - 50, \n            { r: 255, g: 0, b: 0 }, 20);\n        \n        renderer.renderText('CRITICAL SYSTEM FAILURE DETECTED', centerX - 140, centerY - 10, \n            { r: 255, g: 64, b: 64 }, 14);\n        \n        renderer.renderText('PRESS ENTER TO RETURN TO MAIN MENU', centerX - 160, centerY + 30, \n            { r: 192, g: 192, b: 192 }, 12);\n    }\n\n    /**\n     * Render default state\n     */\n    private renderDefaultState(renderer: Renderer): void {\n        const centerX = 512;\n        const centerY = 384;\n        \n        renderer.renderText(`UNKNOWN STATE: ${this.currentState}`, centerX - 100, centerY, \n            { r: 255, g: 0, b: 255 }, 16);\n    }\n\n    /**\n     * Render space background\n     */\n    private renderSpaceBackground(renderer: Renderer): void {\n        // Simple star field\n        for (let i = 0; i < 100; i++) {\n            const x = (i * 73) % 1024; // Pseudo-random distribution\n            const y = (i * 149) % 768;\n            const brightness = (i % 3) + 1;\n            const color = { \n                r: brightness * 64, \n                g: brightness * 64, \n                b: brightness * 96 \n            };\n            \n            renderer.setPixel(x, y, color);\n        }\n    }\n\n    /**\n     * Render basic HUD\n     */\n    private renderBasicHUD(renderer: Renderer): void {\n        // Ship status\n        const health = this.gameData.playerShip.health;\n        const fuel = this.gameData.playerShip.fuel;\n        \n        renderer.renderText(`HEALTH: ${health.toFixed(0)}%`, 10, 10, \n            health > 50 ? { r: 0, g: 255, b: 0 } : { r: 255, g: 0, b: 0 }, 12);\n        \n        renderer.renderText(`FUEL: ${fuel.toFixed(0)}`, 10, 30, \n            fuel > 200 ? { r: 0, g: 255, b: 0 } : { r: 255, g: 255, b: 0 }, 12);\n        \n        // Resources\n        renderer.renderText(`CREDITS: ${this.gameData.playerShip.resources.get('credits') || 0}`, \n            10, 50, { r: 255, g: 255, b: 0 }, 12);\n        \n        // Game time\n        const minutes = Math.floor(this.gameData.gameTime / 60);\n        const seconds = Math.floor(this.gameData.gameTime % 60);\n        renderer.renderText(`TIME: ${minutes}:${seconds.toString().padStart(2, '0')}`, \n            10, 70, { r: 0, g: 192, b: 192 }, 12);\n        \n        // Galaxy info (if available)\n        renderer.renderText(`SYSTEM: ${this.gameData.currentSystem.name}`, \n            10, 90, { r: 0, g: 255, b: 255 }, 12);\n        \n        // Galaxy exploration progress\n        renderer.renderText(`EXPLORATION: ${(this.gameData.stats.systemsVisited || 0)} systems`, \n            10, 110, { r: 192, g: 192, b: 192 }, 12);\n    }\n\n    /**\n     * Game time tracking\n     */\n    private gameTimeStarted = false;\n    \n    private startGameTimeTracking(): void {\n        this.gameTimeStarted = true;\n        this.logger.debug('Game time tracking started');\n    }\n    \n    private pauseGameTimeTracking(): void {\n        this.gameTimeStarted = false;\n        this.logger.debug('Game time tracking paused');\n    }\n\n    /**\n     * Save game data\n     */\n    async save(): Promise<void> {\n        try {\n            const saveData = {\n                version: '1.0.0',\n                timestamp: Date.now(),\n                gameData: this.gameData\n            };\n            \n            const serialized = JSON.stringify(saveData);\n            localStorage.setItem('spaceExplorer_save', serialized);\n            \n            this.logger.debug('Game saved successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to save game', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Load game data\n     */\n    async load(): Promise<void> {\n        try {\n            await this.loadGameData();\n            this.logger.info('Game loaded successfully');\n            \n        } catch (error) {\n            this.logger.warn('Failed to load game, using defaults', error);\n            this.gameData = this.createDefaultGameData();\n        }\n    }\n\n    /**\n     * Load game data from storage\n     */\n    private async loadGameData(): Promise<void> {\n        const saved = localStorage.getItem('spaceExplorer_save');\n        if (!saved) {\n            throw new Error('No save data found');\n        }\n        \n        const saveData = JSON.parse(saved);\n        \n        // Validate save data\n        if (!saveData.gameData) {\n            throw new Error('Invalid save data format');\n        }\n        \n        // Restore resources as Map\n        if (saveData.gameData.playerShip.resources) {\n            const resourcesArray = saveData.gameData.playerShip.resources;\n            if (Array.isArray(resourcesArray)) {\n                saveData.gameData.playerShip.resources = new Map(resourcesArray);\n            } else {\n                // Convert object to Map\n                saveData.gameData.playerShip.resources = new Map(Object.entries(resourcesArray));\n            }\n        }\n        \n        this.gameData = saveData.gameData;\n        this.logger.debug('Game data loaded from storage');\n    }\n\n    /**\n     * Handle menu events\n     */\n    private async handleNewGame(settings: NewGameSettings): Promise<void> {\n        this.logger.info('🆕 Starting new game', settings);\n        \n        // Apply new game settings\n        this.gameData = this.createDefaultGameData();\n        this.gameData.playerShip.id = `ship_${settings.playerName.toLowerCase()}`;\n        \n        // Apply difficulty settings\n        switch (settings.difficulty) {\n            case 'easy':\n                this.gameData.playerShip.health = 150;\n                this.gameData.playerShip.fuel = 200;\n                break;\n            case 'hard':\n                this.gameData.playerShip.health = 75;\n                this.gameData.playerShip.fuel = 100;\n                break;\n            case 'nightmare':\n                this.gameData.playerShip.health = 50;\n                this.gameData.playerShip.fuel = 75;\n                break;\n            default: // normal\n                this.gameData.playerShip.health = 100;\n                this.gameData.playerShip.fuel = 150;\n        }\n        \n        // Set galaxy settings\n        this.gameData.currentSystem.name = `Galaxy_${settings.galaxySeed}`;\n        \n        await this.setState(GameState.Loading);\n    }\n    \n    private async handleLoadGame(saveSlot: number): Promise<void> {\n        this.logger.info(`📁 Loading game from slot ${saveSlot}`);\n        \n        try {\n            const saveKey = `stellarOdyssey_save_${saveSlot}`;\n            const saveData = localStorage.getItem(saveKey);\n            \n            if (saveData) {\n                this.gameData = JSON.parse(saveData);\n                await this.setState(GameState.Loading);\n            } else {\n                this.logger.warn('Save slot is empty');\n            }\n        } catch (error) {\n            this.logger.error('Failed to load game', error);\n        }\n    }\n    \n    private handleSettingsChange(settings: GameSettings): void {\n        this.logger.info('⚙️ Applying settings', settings);\n        \n        // Update game data settings\n        this.gameData.settings = {\n            masterVolume: settings.masterVolume,\n            musicVolume: settings.musicVolume,\n            sfxVolume: settings.sfxVolume,\n            difficulty: settings.difficulty || 'normal'\n        };\n        \n        // Save settings\n        try {\n            localStorage.setItem('stellarOdyssey_settings', JSON.stringify(settings));\n        } catch (error) {\n            this.logger.error('Failed to save settings', error);\n        }\n    }\n    \n    private async handleExit(): Promise<void> {\n        this.logger.info('👋 Exiting game');\n        \n        // Save current game state\n        await this.save();\n        \n        // Close game or minimize window\n        if ('close' in window) {\n            (window as any).close();\n        }\n    }\n\n    /**\n     * Public getters\n     */\n    getCurrentState(): GameState {\n        return this.currentState;\n    }\n\n    getPreviousState(): GameState {\n        return this.previousState;\n    }\n\n    getGameData(): GameData {\n        return this.gameData;\n    }\n\n    isInState(state: GameState): boolean {\n        return this.currentState === state;\n    }\n\n    /**\n     * Set demo entities for rendering\n     */\n    setDemoShip(ship: PhysicsObject): void {\n        this.demoShip = ship;\n    }\n\n    setDemoPlanets(planets: PhysicsObject[]): void {\n        this.demoPlanets = [...planets];\n    }\n\n    /**\n     * Game state checks\n     */\n    canPause(): boolean {\n        return this.currentState === GameState.Playing;\n    }\n\n    canResume(): boolean {\n        return this.currentState === GameState.Paused;\n    }\n\n    isGameActive(): boolean {\n        return this.currentState === GameState.Playing;\n    }\n    \n\n\n    isInMenu(): boolean {\n        return this.currentState === GameState.MainMenu;\n    }\n\n    /**\n     * Cleanup\n     */\n    cleanup(): void {\n        // Save game before cleanup\n        this.save().catch(error => {\n            this.logger.error('Failed to save during cleanup', error);\n        });\n        \n        this.logger.info('🧹 Game state manager cleanup completed');\n    }\n}","/**\n * Ship Systems Manager\n * Handles all ship subsystems including engines, shields, weapons, life support, and damage\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\n\nexport interface ShipSystemsConfig {\n    maxHull: number;\n    maxShields: number;\n    maxPower: number;\n    maxFuel: number;\n    maxHeat: number;\n    \n    // Engine configuration\n    enginePower: number;\n    engineEfficiency: number;\n    \n    // Shield configuration\n    shieldRegenRate: number;\n    shieldPowerDrain: number;\n    \n    // Weapon configuration\n    weaponCount: number;\n    weaponPower: number;\n    weaponHeatGeneration: number;\n}\n\nexport interface SystemStatus {\n    hull: number;           // 0-100%\n    shields: number;        // 0-100%\n    power: number;          // 0-100%\n    fuel: number;           // 0-100%\n    heat: number;           // 0-100%\n    \n    // System states\n    enginesOnline: boolean;\n    shieldsOnline: boolean;\n    weaponsOnline: boolean;\n    lifeSupport: boolean;\n    warpDrive: boolean;\n    \n    // Performance modifiers\n    engineEfficiency: number;  // 0-1\n    shieldStrength: number;    // 0-1\n    weaponAccuracy: number;    // 0-1\n    sensorRange: number;       // 0-1\n}\n\nexport interface DamageReport {\n    section: ShipSection;\n    severity: DamageSeverity;\n    systemsAffected: SystemType[];\n    repairCost: RepairCost;\n    repairTime: number; // seconds\n}\n\nexport interface RepairCost {\n    metal: number;\n    electronics: number;\n    crystals: number;\n    nanobots?: number;\n}\n\nexport enum ShipSection {\n    Bow = 'bow',\n    Stern = 'stern',\n    Port = 'port',\n    Starboard = 'starboard',\n    Core = 'core',\n    Bridge = 'bridge',\n    Engineering = 'engineering',\n    Weapons = 'weapons'\n}\n\nexport enum SystemType {\n    Engines = 'engines',\n    Shields = 'shields',\n    Weapons = 'weapons',\n    LifeSupport = 'life_support',\n    Sensors = 'sensors',\n    Navigation = 'navigation',\n    Communications = 'communications',\n    WarpDrive = 'warp_drive'\n}\n\nexport enum DamageSeverity {\n    Minor = 'minor',       // 0-25% damage\n    Moderate = 'moderate', // 25-50% damage\n    Major = 'major',       // 50-75% damage\n    Critical = 'critical', // 75-100% damage\n    Destroyed = 'destroyed' // 100% damage\n}\n\nexport interface PowerAllocation {\n    engines: number;    // 0-100%\n    shields: number;    // 0-100%\n    weapons: number;    // 0-100%\n    lifeSupport: number; // 0-100%\n    sensors: number;    // 0-100%\n}\n\nexport interface ShipSystemsEvents {\n    onSystemDamage: (system: SystemType, severity: DamageSeverity) => void;\n    onSystemRepaired: (system: SystemType) => void;\n    onCriticalDamage: (section: ShipSection) => void;\n    onPowerFailure: () => void;\n    onOverheat: () => void;\n}\n\nexport class ShipSystems {\n    private config: ShipSystemsConfig;\n    private status: SystemStatus;\n    private damage: Map<ShipSection, DamageReport[]> = new Map();\n    private powerAllocation: PowerAllocation;\n    \n    // System performance tracking\n    private heatGeneration: number = 0;\n    private powerConsumption: number = 0;\n    private fuelConsumption: number = 0;\n    \n    // Timers and intervals\n    private updateTimer: number = 0;\n    private lastUpdateTime: number = 0;\n    \n    // Events\n    private events: Partial<ShipSystemsEvents> = {};\n    \n    private logger: Logger;\n\n    constructor(config: Partial<ShipSystemsConfig> = {}, events: Partial<ShipSystemsEvents> = {}) {\n        this.logger = new Logger('ShipSystems');\n        this.events = events;\n        \n        // Default configuration\n        this.config = {\n            maxHull: 100,\n            maxShields: 100,\n            maxPower: 100,\n            maxFuel: 1000,\n            maxHeat: 100,\n            enginePower: 5000,\n            engineEfficiency: 0.8,\n            shieldRegenRate: 2.0,\n            shieldPowerDrain: 5.0,\n            weaponCount: 2,\n            weaponPower: 25,\n            weaponHeatGeneration: 15,\n            ...config\n        };\n        \n        // Initialize status\n        this.status = {\n            hull: 100,\n            shields: 100,\n            power: 100,\n            fuel: 100,\n            heat: 0,\n            enginesOnline: true,\n            shieldsOnline: true,\n            weaponsOnline: true,\n            lifeSupport: true,\n            warpDrive: true,\n            engineEfficiency: 1.0,\n            shieldStrength: 1.0,\n            weaponAccuracy: 1.0,\n            sensorRange: 1.0\n        };\n        \n        // Initialize power allocation\n        this.powerAllocation = {\n            engines: 30,\n            shields: 25,\n            weapons: 20,\n            lifeSupport: 15,\n            sensors: 10\n        };\n        \n        // Initialize damage tracking for all sections\n        Object.values(ShipSection).forEach(section => {\n            this.damage.set(section, []);\n        });\n        \n        this.logger.info('🛸 Ship systems initialized', {\n            config: this.config,\n            status: this.status\n        });\n    }\n\n    /**\n     * Update ship systems (called each frame)\n     */\n    update(deltaTime: number): void {\n        this.lastUpdateTime = deltaTime;\n        \n        // Update power consumption\n        this.updatePowerConsumption();\n        \n        // Update heat generation and cooling\n        this.updateThermalManagement(deltaTime);\n        \n        // Update shields\n        this.updateShields(deltaTime);\n        \n        // Update fuel consumption\n        this.updateFuelConsumption(deltaTime);\n        \n        // Update system efficiency based on damage\n        this.updateSystemEfficiency();\n        \n        // Check for critical system failures\n        this.checkCriticalSystems();\n        \n        // Update performance modifiers\n        this.updatePerformanceModifiers();\n    }\n\n    /**\n     * Update power consumption based on active systems\n     */\n    private updatePowerConsumption(): void {\n        let totalConsumption = 0;\n        \n        // Base life support always consumes power\n        totalConsumption += (this.powerAllocation.lifeSupport / 100) * 10;\n        \n        // Engine power consumption\n        if (this.status.enginesOnline) {\n            totalConsumption += (this.powerAllocation.engines / 100) * 20;\n        }\n        \n        // Shield power consumption\n        if (this.status.shieldsOnline) {\n            totalConsumption += (this.powerAllocation.shields / 100) * this.config.shieldPowerDrain;\n        }\n        \n        // Weapon power consumption\n        if (this.status.weaponsOnline) {\n            totalConsumption += (this.powerAllocation.weapons / 100) * 15;\n        }\n        \n        // Sensor power consumption\n        totalConsumption += (this.powerAllocation.sensors / 100) * 5;\n        \n        this.powerConsumption = totalConsumption;\n        \n        // Drain power\n        this.status.power = Math.max(0, this.status.power - (totalConsumption * this.lastUpdateTime));\n        \n        // Auto-shutdown systems if power critical\n        if (this.status.power < 10) {\n            this.handlePowerFailure();\n        }\n    }\n\n    /**\n     * Update thermal management (heat generation and cooling)\n     */\n    private updateThermalManagement(deltaTime: number): void {\n        // Heat generation\n        this.heatGeneration = 0;\n        \n        // Engine heat\n        if (this.status.enginesOnline) {\n            this.heatGeneration += (this.powerAllocation.engines / 100) * 8;\n        }\n        \n        // Shield heat\n        if (this.status.shieldsOnline) {\n            this.heatGeneration += (this.powerAllocation.shields / 100) * 3;\n        }\n        \n        // Weapon heat\n        if (this.status.weaponsOnline) {\n            this.heatGeneration += (this.powerAllocation.weapons / 100) * 5;\n        }\n        \n        // Add heat\n        this.status.heat = Math.min(this.config.maxHeat, \n            this.status.heat + this.heatGeneration * deltaTime);\n        \n        // Passive cooling (space is cold)\n        const coolingRate = 15; // Heat units per second\n        this.status.heat = Math.max(0, this.status.heat - coolingRate * deltaTime);\n        \n        // Overheat protection\n        if (this.status.heat > 90) {\n            this.handleOverheat();\n        }\n    }\n\n    /**\n     * Update shields (regeneration and power drain)\n     */\n    private updateShields(deltaTime: number): void {\n        if (this.status.shieldsOnline && this.status.power > 5) {\n            // Shield regeneration\n            const regenRate = this.config.shieldRegenRate * (this.powerAllocation.shields / 100);\n            this.status.shields = Math.min(this.config.maxShields, \n                this.status.shields + regenRate * deltaTime);\n        }\n    }\n\n    /**\n     * Update fuel consumption\n     */\n    private updateFuelConsumption(deltaTime: number): void {\n        if (this.status.enginesOnline) {\n            // Base fuel consumption for life support\n            let consumption = 0.5; // Units per second\n            \n            // Engine fuel consumption based on power allocation\n            consumption += (this.powerAllocation.engines / 100) * 2.0;\n            \n            // Inefficiency increases consumption\n            consumption *= (2.0 - this.status.engineEfficiency);\n            \n            this.fuelConsumption = consumption;\n            this.status.fuel = Math.max(0, this.status.fuel - consumption * deltaTime);\n            \n            // Emergency shutdown if no fuel\n            if (this.status.fuel === 0) {\n                this.emergencyShutdown();\n            }\n        }\n    }\n\n    /**\n     * Update system efficiency based on damage\n     */\n    private updateSystemEfficiency(): void {\n        // Calculate engine efficiency based on engineering section damage\n        const engineDamage = this.getSectionDamageLevel(ShipSection.Engineering);\n        this.status.engineEfficiency = Math.max(0.1, 1.0 - (engineDamage * 0.8));\n        \n        // Calculate shield strength based on core section damage\n        const coreDamage = this.getSectionDamageLevel(ShipSection.Core);\n        this.status.shieldStrength = Math.max(0.1, 1.0 - (coreDamage * 0.9));\n        \n        // Calculate weapon accuracy based on weapons section damage\n        const weaponDamage = this.getSectionDamageLevel(ShipSection.Weapons);\n        this.status.weaponAccuracy = Math.max(0.1, 1.0 - (weaponDamage * 0.7));\n        \n        // Calculate sensor range based on bridge damage\n        const bridgeDamage = this.getSectionDamageLevel(ShipSection.Bridge);\n        this.status.sensorRange = Math.max(0.2, 1.0 - (bridgeDamage * 0.6));\n    }\n\n    /**\n     * Update performance modifiers\n     */\n    private updatePerformanceModifiers(): void {\n        // Heat affects all systems\n        const heatPenalty = Math.max(0, (this.status.heat - 70) / 30); // Penalty starts at 70% heat\n        \n        this.status.engineEfficiency *= (1 - heatPenalty * 0.3);\n        this.status.shieldStrength *= (1 - heatPenalty * 0.2);\n        this.status.weaponAccuracy *= (1 - heatPenalty * 0.4);\n        \n        // Power affects system performance\n        const powerLevel = this.status.power / 100;\n        if (powerLevel < 0.5) {\n            const powerPenalty = (0.5 - powerLevel) * 2; // 0 to 1\n            this.status.engineEfficiency *= (1 - powerPenalty * 0.5);\n            this.status.shieldStrength *= (1 - powerPenalty * 0.7);\n            this.status.weaponAccuracy *= (1 - powerPenalty * 0.3);\n        }\n    }\n\n    /**\n     * Check for critical system failures\n     */\n    private checkCriticalSystems(): void {\n        // Check hull integrity\n        if (this.status.hull < 20) {\n            this.logger.warn('⚠️ Critical hull damage detected');\n            this.events.onCriticalDamage?.(ShipSection.Core);\n        }\n        \n        // Check life support\n        if (!this.status.lifeSupport || this.status.power < 5) {\n            this.logger.error('💀 Life support critical');\n        }\n        \n        // Check for system failures due to damage\n        Object.entries(ShipSection).forEach(([key, section]) => {\n            const damageLevel = this.getSectionDamageLevel(section);\n            if (damageLevel > 0.8) {\n                this.logger.warn(`⚠️ Critical damage in ${section} section`);\n                this.events.onCriticalDamage?.(section);\n            }\n        });\n    }\n\n    /**\n     * Handle power failure\n     */\n    private handlePowerFailure(): void {\n        this.logger.error('⚡ Power failure - emergency protocols activated');\n        \n        // Auto-shutdown non-essential systems\n        this.status.weaponsOnline = false;\n        this.powerAllocation.weapons = 0;\n        this.powerAllocation.sensors = 5; // Minimal sensors\n        \n        // Reduce other allocations\n        this.powerAllocation.engines = Math.min(this.powerAllocation.engines, 20);\n        this.powerAllocation.shields = Math.min(this.powerAllocation.shields, 15);\n        \n        this.events.onPowerFailure?.();\n    }\n\n    /**\n     * Handle overheat\n     */\n    private handleOverheat(): void {\n        this.logger.error('🔥 System overheat - emergency cooling');\n        \n        // Reduce power allocation to prevent further heating\n        this.powerAllocation.engines *= 0.7;\n        this.powerAllocation.weapons *= 0.5;\n        \n        // Emergency shutdown weapons if too hot\n        if (this.status.heat > 95) {\n            this.status.weaponsOnline = false;\n            this.powerAllocation.weapons = 0;\n        }\n        \n        this.events.onOverheat?.();\n    }\n\n    /**\n     * Emergency shutdown\n     */\n    private emergencyShutdown(): void {\n        this.logger.error('🛑 Emergency shutdown - no fuel');\n        \n        this.status.enginesOnline = false;\n        this.status.weaponsOnline = false;\n        this.status.shieldsOnline = false;\n        \n        // Keep minimal life support\n        this.powerAllocation = {\n            engines: 0,\n            shields: 0,\n            weapons: 0,\n            lifeSupport: 100,\n            sensors: 0\n        };\n    }\n\n    /**\n     * Apply damage to ship section\n     */\n    applyDamage(section: ShipSection, amount: number, damageType: 'kinetic' | 'energy' | 'thermal' = 'kinetic'): void {\n        // Calculate actual damage based on shields\n        let actualDamage = amount;\n        \n        if (this.status.shieldsOnline && this.status.shields > 0) {\n            const shieldAbsorption = Math.min(this.status.shields, amount * this.status.shieldStrength);\n            this.status.shields -= shieldAbsorption;\n            actualDamage -= shieldAbsorption;\n            \n            this.logger.debug(`Shields absorbed ${shieldAbsorption.toFixed(1)} damage`);\n        }\n        \n        if (actualDamage > 0) {\n            // Apply hull damage\n            this.status.hull = Math.max(0, this.status.hull - actualDamage);\n            \n            // Create damage report\n            this.addDamageReport(section, actualDamage);\n            \n            this.logger.warn(`${section} section took ${actualDamage.toFixed(1)} ${damageType} damage`);\n        }\n    }\n\n    /**\n     * Add damage report\n     */\n    private addDamageReport(section: ShipSection, damage: number): void {\n        const severity = this.calculateDamageSeverity(damage);\n        const systemsAffected = this.getAffectedSystems(section);\n        \n        const damageReport: DamageReport = {\n            section,\n            severity,\n            systemsAffected,\n            repairCost: this.calculateRepairCost(severity),\n            repairTime: this.calculateRepairTime(severity)\n        };\n        \n        const sectionDamage = this.damage.get(section) || [];\n        sectionDamage.push(damageReport);\n        this.damage.set(section, sectionDamage);\n        \n        // Trigger events\n        systemsAffected.forEach(system => {\n            this.events.onSystemDamage?.(system, severity);\n        });\n    }\n\n    /**\n     * Calculate damage severity\n     */\n    private calculateDamageSeverity(damage: number): DamageSeverity {\n        if (damage >= 50) return DamageSeverity.Critical;\n        if (damage >= 30) return DamageSeverity.Major;\n        if (damage >= 15) return DamageSeverity.Moderate;\n        return DamageSeverity.Minor;\n    }\n\n    /**\n     * Get systems affected by damage to a section\n     */\n    private getAffectedSystems(section: ShipSection): SystemType[] {\n        const systemMap: Record<ShipSection, SystemType[]> = {\n            [ShipSection.Bow]: [SystemType.Sensors, SystemType.Navigation],\n            [ShipSection.Stern]: [SystemType.Engines],\n            [ShipSection.Port]: [],\n            [ShipSection.Starboard]: [],\n            [ShipSection.Core]: [SystemType.LifeSupport, SystemType.Shields],\n            [ShipSection.Bridge]: [SystemType.Navigation, SystemType.Communications, SystemType.Sensors],\n            [ShipSection.Engineering]: [SystemType.Engines, SystemType.WarpDrive],\n            [ShipSection.Weapons]: [SystemType.Weapons]\n        };\n        \n        return systemMap[section] || [];\n    }\n\n    /**\n     * Calculate repair cost\n     */\n    private calculateRepairCost(severity: DamageSeverity): RepairCost {\n        const baseCost = {\n            [DamageSeverity.Minor]: { metal: 5, electronics: 2, crystals: 1 },\n            [DamageSeverity.Moderate]: { metal: 15, electronics: 8, crystals: 3 },\n            [DamageSeverity.Major]: { metal: 30, electronics: 20, crystals: 8 },\n            [DamageSeverity.Critical]: { metal: 60, electronics: 40, crystals: 20, nanobots: 5 },\n            [DamageSeverity.Destroyed]: { metal: 100, electronics: 80, crystals: 40, nanobots: 15 }\n        };\n        \n        return baseCost[severity];\n    }\n\n    /**\n     * Calculate repair time\n     */\n    private calculateRepairTime(severity: DamageSeverity): number {\n        const baseTimes = {\n            [DamageSeverity.Minor]: 30,      // 30 seconds\n            [DamageSeverity.Moderate]: 120,  // 2 minutes\n            [DamageSeverity.Major]: 300,     // 5 minutes\n            [DamageSeverity.Critical]: 600,  // 10 minutes\n            [DamageSeverity.Destroyed]: 1800 // 30 minutes\n        };\n        \n        return baseTimes[severity];\n    }\n\n    /**\n     * Get damage level for a section (0-1)\n     */\n    private getSectionDamageLevel(section: ShipSection): number {\n        const damages = this.damage.get(section) || [];\n        let totalDamage = 0;\n        \n        damages.forEach(damage => {\n            const severityValues = {\n                [DamageSeverity.Minor]: 0.1,\n                [DamageSeverity.Moderate]: 0.25,\n                [DamageSeverity.Major]: 0.5,\n                [DamageSeverity.Critical]: 0.8,\n                [DamageSeverity.Destroyed]: 1.0\n            };\n            totalDamage += severityValues[damage.severity];\n        });\n        \n        return Math.min(1.0, totalDamage);\n    }\n\n    /**\n     * Repair system damage\n     */\n    repairDamage(section: ShipSection, damageIndex: number, resources: RepairCost): boolean {\n        const damages = this.damage.get(section);\n        if (!damages || !damages[damageIndex]) return false;\n        \n        const damageReport = damages[damageIndex];\n        \n        // Check if we have enough resources\n        if (!this.hasEnoughResources(resources, damageReport.repairCost)) {\n            return false;\n        }\n        \n        // Remove the damage\n        damages.splice(damageIndex, 1);\n        this.damage.set(section, damages);\n        \n        // Restore some hull if applicable\n        this.status.hull = Math.min(this.config.maxHull, this.status.hull + 10);\n        \n        // Trigger repair event\n        damageReport.systemsAffected.forEach(system => {\n            this.events.onSystemRepaired?.(system);\n        });\n        \n        this.logger.info(`Repaired ${damageReport.severity} damage in ${section} section`);\n        return true;\n    }\n\n    /**\n     * Check if we have enough resources for repair\n     */\n    private hasEnoughResources(available: RepairCost, required: RepairCost): boolean {\n        return available.metal >= required.metal &&\n               available.electronics >= required.electronics &&\n               available.crystals >= required.crystals &&\n               (required.nanobots === undefined || (available.nanobots || 0) >= required.nanobots);\n    }\n\n    /**\n     * Set power allocation\n     */\n    setPowerAllocation(allocation: Partial<PowerAllocation>): void {\n        this.powerAllocation = { ...this.powerAllocation, ...allocation };\n        \n        // Ensure total doesn't exceed 100%\n        const total = Object.values(this.powerAllocation).reduce((sum, val) => sum + val, 0);\n        if (total > 100) {\n            // Scale down proportionally\n            const scale = 100 / total;\n            Object.keys(this.powerAllocation).forEach(key => {\n                (this.powerAllocation as any)[key] *= scale;\n            });\n        }\n        \n        this.logger.debug('Power allocation updated', this.powerAllocation);\n    }\n\n    /**\n     * Toggle system on/off\n     */\n    toggleSystem(system: SystemType, state?: boolean): void {\n        const newState = state !== undefined ? state : !this.getSystemState(system);\n        \n        switch (system) {\n            case SystemType.Engines:\n                this.status.enginesOnline = newState;\n                break;\n            case SystemType.Shields:\n                this.status.shieldsOnline = newState;\n                break;\n            case SystemType.Weapons:\n                this.status.weaponsOnline = newState;\n                break;\n            case SystemType.LifeSupport:\n                this.status.lifeSupport = newState;\n                break;\n            case SystemType.WarpDrive:\n                this.status.warpDrive = newState;\n                break;\n        }\n        \n        this.logger.debug(`${system} ${newState ? 'enabled' : 'disabled'}`);\n    }\n\n    /**\n     * Get system state\n     */\n    private getSystemState(system: SystemType): boolean {\n        switch (system) {\n            case SystemType.Engines: return this.status.enginesOnline;\n            case SystemType.Shields: return this.status.shieldsOnline;\n            case SystemType.Weapons: return this.status.weaponsOnline;\n            case SystemType.LifeSupport: return this.status.lifeSupport;\n            case SystemType.WarpDrive: return this.status.warpDrive;\n            default: return true;\n        }\n    }\n\n    /**\n     * Get current status\n     */\n    getStatus(): SystemStatus {\n        return { ...this.status };\n    }\n\n    /**\n     * Get power allocation\n     */\n    getPowerAllocation(): PowerAllocation {\n        return { ...this.powerAllocation };\n    }\n\n    /**\n     * Get damage reports\n     */\n    getDamageReports(): Map<ShipSection, DamageReport[]> {\n        return new Map(this.damage);\n    }\n\n    /**\n     * Get system diagnostics\n     */\n    getDiagnostics() {\n        return {\n            powerConsumption: this.powerConsumption,\n            heatGeneration: this.heatGeneration,\n            fuelConsumption: this.fuelConsumption,\n            totalDamageReports: Array.from(this.damage.values()).reduce((sum, reports) => sum + reports.length, 0),\n            criticalSystems: this.getCriticalSystems()\n        };\n    }\n\n    /**\n     * Get critical systems\n     */\n    private getCriticalSystems(): SystemType[] {\n        const critical: SystemType[] = [];\n        \n        if (this.status.hull < 25) critical.push(SystemType.LifeSupport);\n        if (this.status.power < 15) critical.push(SystemType.Engines);\n        if (this.status.heat > 85) critical.push(SystemType.Weapons);\n        if (!this.status.enginesOnline) critical.push(SystemType.Engines);\n        if (!this.status.lifeSupport) critical.push(SystemType.LifeSupport);\n        \n        return critical;\n    }\n\n    /**\n     * Add fuel\n     */\n    addFuel(amount: number): void {\n        this.status.fuel = Math.min(this.config.maxFuel, this.status.fuel + amount);\n    }\n\n    /**\n     * Add power (battery recharge)\n     */\n    addPower(amount: number): void {\n        this.status.power = Math.min(this.config.maxPower, this.status.power + amount);\n    }\n\n    /**\n     * Emergency repair (restores basic functionality)\n     */\n    emergencyRepair(): void {\n        this.status.hull = Math.max(this.status.hull, 25);\n        this.status.power = Math.max(this.status.power, 30);\n        this.status.heat = Math.min(this.status.heat, 50);\n        \n        // Restore critical systems\n        this.status.enginesOnline = true;\n        this.status.lifeSupport = true;\n        \n        this.logger.info('🔧 Emergency repair completed');\n    }\n}","/**\n * Warp Drive System\n * Complete warp drive mechanics with black hole formation, particle effects, and space distortion\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer, Color } from '@core/Renderer';\nimport { AudioEngine } from '@core/AudioEngine';\n\nexport interface WarpDriveConfig {\n    speedMultiplier: number; // 20x speed multiplier\n    energyCost: number; // Energy cost per second\n    particleCount: number; // Number of particles for effects\n    maxRange: number; // Maximum warp range\n    cooldownTime: number; // Cooldown between warps\n}\n\nexport enum WarpState {\n    Idle = 'idle',\n    Charging = 'charging',         // 0-5s: Particle absorption\n    BlackHoleGrowth = 'growth',    // 5-7s: Black hole formation\n    AccretionFormation = 'accretion', // 7-12s: Accretion disk formation\n    Active = 'active',             // Warp active with space distortion\n    Deactivating = 'deactivating' // 6s: Shutdown sequence\n}\n\ninterface WarpParticle {\n    position: Vector2;\n    velocity: Vector2;\n    color: Color;\n    life: number; // 0-1\n    size: number;\n    absorbed: boolean;\n}\n\ninterface AccretionParticle {\n    angle: number;\n    radius: number;\n    speed: number;\n    color: Color;\n    size: number;\n    life: number;\n}\n\ninterface SpaceDistortion {\n    intensity: number; // 0-1\n    radius: number;\n    center: Vector2;\n}\n\nexport interface WarpEvents {\n    onWarpStart?: () => void;\n    onWarpEnd?: () => void;\n    onBlackHoleFormed?: () => void;\n    onSpaceDistorted?: () => void;\n    onWarpFail?: (reason: string) => void;\n}\n\nexport class WarpDrive {\n    private config: WarpDriveConfig;\n    private events: WarpEvents;\n    \n    // Warp state\n    private state: WarpState = WarpState.Idle;\n    private stateTimer: number = 0;\n    private isCharging: boolean = false;\n    private isActive: boolean = false;\n    \n    // Visual effects\n    private particles: WarpParticle[] = [];\n    private accretionParticles: AccretionParticle[] = [];\n    private blackHoleRadius: number = 0;\n    private distortion: SpaceDistortion = { intensity: 0, radius: 0, center: { x: 0, y: 0 } };\n    \n    // Ship properties\n    private shipPosition: Vector2 = { x: 0, y: 0 };\n    private shipSize: number = 20;\n    private originalSpeed: number = 1.0;\n    \n    // Timing phases (seconds)\n    private readonly PHASE_PARTICLE_ABSORPTION = 5.0;\n    private readonly PHASE_BLACK_HOLE_GROWTH = 2.0; // 5-7s\n    private readonly PHASE_ACCRETION_FORMATION = 5.0; // 7-12s\n    private readonly PHASE_SHUTDOWN = 6.0;\n    \n    // Effect intensities\n    private particleIntensity: number = 0;\n    private blackHoleIntensity: number = 0;\n    private accretionIntensity: number = 0;\n    private distortionIntensity: number = 0;\n    \n    private logger: Logger;\n\n    constructor(\n        config: Partial<WarpDriveConfig> = {},\n        events: WarpEvents = {}\n    ) {\n        this.logger = new Logger('WarpDrive');\n        this.events = events;\n        \n        this.config = {\n            speedMultiplier: 20.0,\n            energyCost: 10.0, // Energy per second\n            particleCount: 50,\n            maxRange: 10000,\n            cooldownTime: 30.0,\n            ...config\n        };\n        \n        this.logger.info('🌌 Warp drive system initialized', {\n            speedMultiplier: this.config.speedMultiplier,\n            particleCount: this.config.particleCount\n        });\n    }\n\n    /**\n     * Activate warp drive\n     */\n    activateWarp(shipPosition: Vector2, shipSize: number): boolean {\n        if (this.state !== WarpState.Idle) {\n            this.logger.warn('⚠️ Warp already active or charging');\n            return false;\n        }\n        \n        this.shipPosition = { ...shipPosition };\n        this.shipSize = shipSize;\n        this.state = WarpState.Charging;\n        this.stateTimer = 0;\n        this.isCharging = true;\n        \n        // Initialize particle system\n        this.initializeParticles();\n        \n        this.logger.info('🚀 Warp drive activation sequence started');\n        this.events.onWarpStart?.();\n        \n        return true;\n    }\n\n    /**\n     * Deactivate warp drive\n     */\n    deactivateWarp(): void {\n        if (this.state === WarpState.Active) {\n            this.state = WarpState.Deactivating;\n            this.stateTimer = 0;\n            this.isActive = false;\n            \n            this.logger.info('🛑 Warp drive deactivation sequence started');\n        }\n    }\n\n    /**\n     * Initialize particle system for warp effects\n     */\n    private initializeParticles(): void {\n        this.particles = [];\n        const spawnRadius = 150; // Spawn particles around ship\n        \n        for (let i = 0; i < this.config.particleCount; i++) {\n            // Spawn particles in circle around ship\n            const angle = (Math.PI * 2 * i) / this.config.particleCount + Math.random() * 0.5;\n            const distance = spawnRadius + Math.random() * 50;\n            \n            const position = {\n                x: this.shipPosition.x + Math.cos(angle) * distance,\n                y: this.shipPosition.y + Math.sin(angle) * distance\n            };\n            \n            // Random particle colors (red, yellow, gray, purple, white, orange)\n            const colors = [\n                { r: 72, g: 24, b: 24 },  // Dark red\n                { r: 72, g: 48, b: 12 },  // Dark yellow\n                { r: 48, g: 48, b: 48 },  // Gray\n                { r: 48, g: 24, b: 72 },  // Dark purple\n                { r: 64, g: 64, b: 64 },  // White (muted)\n                { r: 64, g: 32, b: 16 }   // Dark orange\n            ];\n            \n            this.particles.push({\n                position: { ...position },\n                velocity: { x: 0, y: 0 },\n                color: colors[Math.floor(Math.random() * colors.length)],\n                life: 1.0,\n                size: Math.random() * 3 + 1,\n                absorbed: false\n            });\n        }\n    }\n\n    /**\n     * Update warp drive system\n     */\n    update(deltaTime: number, shipPosition: Vector2): number {\n        this.shipPosition = { ...shipPosition };\n        this.stateTimer += deltaTime;\n        \n        switch (this.state) {\n            case WarpState.Charging:\n                this.updateChargingPhase(deltaTime);\n                break;\n                \n            case WarpState.BlackHoleGrowth:\n                this.updateBlackHoleGrowth(deltaTime);\n                break;\n                \n            case WarpState.AccretionFormation:\n                this.updateAccretionFormation(deltaTime);\n                break;\n                \n            case WarpState.Active:\n                this.updateActiveWarp(deltaTime);\n                break;\n                \n            case WarpState.Deactivating:\n                this.updateDeactivation(deltaTime);\n                break;\n        }\n        \n        // Update particle systems\n        this.updateParticles(deltaTime);\n        this.updateAccretionDisk(deltaTime);\n        this.updateSpaceDistortion(deltaTime);\n        \n        // Return speed multiplier\n        return this.isActive ? this.config.speedMultiplier : 1.0;\n    }\n\n    /**\n     * Update charging phase (0-5 seconds)\n     */\n    private updateChargingPhase(deltaTime: number): void {\n        const progress = this.stateTimer / this.PHASE_PARTICLE_ABSORPTION;\n        this.particleIntensity = Math.min(1.0, progress);\n        \n        // Particles start moving toward ship center\n        this.particles.forEach(particle => {\n            if (!particle.absorbed) {\n                const toCenter = {\n                    x: this.shipPosition.x - particle.position.x,\n                    y: this.shipPosition.y - particle.position.y\n                };\n                const distance = Math.sqrt(toCenter.x * toCenter.x + toCenter.y * toCenter.y);\n                \n                if (distance > 5) {\n                    // Accelerate toward center\n                    const speed = 50 + (progress * 200); // Speed increases over time\n                    particle.velocity.x = (toCenter.x / distance) * speed;\n                    particle.velocity.y = (toCenter.y / distance) * speed;\n                    \n                    // Update position\n                    particle.position.x += particle.velocity.x * deltaTime;\n                    particle.position.y += particle.velocity.y * deltaTime;\n                } else {\n                    particle.absorbed = true;\n                }\n            }\n        });\n        \n        // Transition to black hole growth\n        if (this.stateTimer >= this.PHASE_PARTICLE_ABSORPTION) {\n            this.state = WarpState.BlackHoleGrowth;\n            this.stateTimer = 0;\n            this.logger.debug('🕳️ Black hole formation phase started');\n        }\n    }\n\n    /**\n     * Update black hole growth phase (5-7 seconds)\n     */\n    private updateBlackHoleGrowth(deltaTime: number): void {\n        const progress = this.stateTimer / this.PHASE_BLACK_HOLE_GROWTH;\n        this.blackHoleIntensity = Math.min(1.0, progress);\n        \n        // Black hole grows to 1/3 of ship size\n        this.blackHoleRadius = (this.shipSize / 3) * this.blackHoleIntensity;\n        \n        // Transition to accretion formation\n        if (this.stateTimer >= this.PHASE_BLACK_HOLE_GROWTH) {\n            this.state = WarpState.AccretionFormation;\n            this.stateTimer = 0;\n            this.initializeAccretionDisk();\n            this.logger.debug('💫 Accretion disk formation phase started');\n        }\n    }\n\n    /**\n     * Update accretion formation phase (7-12 seconds)\n     */\n    private updateAccretionFormation(deltaTime: number): void {\n        const progress = this.stateTimer / this.PHASE_ACCRETION_FORMATION;\n        this.accretionIntensity = Math.min(1.0, progress);\n        \n        // Black hole continues growing to consume whole ship\n        const totalGrowthProgress = (this.PHASE_BLACK_HOLE_GROWTH + this.stateTimer) / \n                                  (this.PHASE_BLACK_HOLE_GROWTH + this.PHASE_ACCRETION_FORMATION);\n        this.blackHoleRadius = this.shipSize * totalGrowthProgress;\n        \n        // Transition to active warp\n        if (this.stateTimer >= this.PHASE_ACCRETION_FORMATION) {\n            this.state = WarpState.Active;\n            this.stateTimer = 0;\n            this.isActive = true;\n            this.isCharging = false;\n            \n            // Initialize space distortion\n            this.distortion.center = { ...this.shipPosition };\n            this.distortion.radius = 200;\n            \n            this.logger.info('🌌 Warp drive fully active - space distortion engaged');\n            this.events.onBlackHoleFormed?.();\n            this.events.onSpaceDistorted?.();\n        }\n    }\n\n    /**\n     * Update active warp phase\n     */\n    private updateActiveWarp(deltaTime: number): void {\n        // Maintain full intensity effects\n        this.particleIntensity = 1.0;\n        this.blackHoleIntensity = 1.0;\n        this.accretionIntensity = 1.0;\n        this.distortionIntensity = 1.0;\n        \n        // Update distortion center to follow ship\n        this.distortion.center = { ...this.shipPosition };\n    }\n\n    /**\n     * Update deactivation phase (6 seconds)\n     */\n    private updateDeactivation(deltaTime: number): void {\n        const progress = this.stateTimer / this.PHASE_SHUTDOWN;\n        const reverseProgress = 1.0 - progress;\n        \n        // Gradually reduce all effects\n        this.distortionIntensity = reverseProgress;\n        this.blackHoleIntensity = Math.max(0, reverseProgress - 0.3); // Black hole dissolves faster\n        this.accretionIntensity = Math.max(0, reverseProgress - 0.1); // Accretion disk dissolves\n        this.particleIntensity = Math.max(0, reverseProgress - 0.5); // Particles fade last\n        \n        // Add dissolution particles\n        if (progress > 0.3 && Math.random() < 0.3) {\n            this.addDissolutionParticles();\n        }\n        \n        // Complete shutdown\n        if (this.stateTimer >= this.PHASE_SHUTDOWN) {\n            this.state = WarpState.Idle;\n            this.stateTimer = 0;\n            this.clearAllEffects();\n            \n            this.logger.info('✅ Warp drive deactivation complete');\n            this.events.onWarpEnd?.();\n        }\n    }\n\n    /**\n     * Initialize accretion disk\n     */\n    private initializeAccretionDisk(): void {\n        this.accretionParticles = [];\n        const particleCount = 40;\n        \n        for (let i = 0; i < particleCount; i++) {\n            this.accretionParticles.push({\n                angle: Math.random() * Math.PI * 2,\n                radius: 15 + Math.random() * 25, // Radius around black hole\n                speed: 2 + Math.random() * 4, // Rotation speed (chaotic)\n                color: this.getAccretionColor(),\n                size: Math.random() * 2 + 1,\n                life: 1.0\n            });\n        }\n    }\n\n    /**\n     * Get accretion disk particle color (red-orange-yellow-white swirl)\n     */\n    private getAccretionColor(): Color {\n        const colors = [\n            { r: 96, g: 32, b: 32 },  // Dark red\n            { r: 96, g: 48, b: 16 },  // Dark orange  \n            { r: 96, g: 64, b: 16 },  // Dark yellow\n            { r: 80, g: 80, b: 80 }   // Muted white\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    /**\n     * Update particle effects\n     */\n    private updateParticles(deltaTime: number): void {\n        this.particles.forEach(particle => {\n            if (this.state === WarpState.Deactivating && !particle.absorbed) {\n                // During deactivation, particles fly outward\n                const fromCenter = {\n                    x: particle.position.x - this.shipPosition.x,\n                    y: particle.position.y - this.shipPosition.y\n                };\n                const distance = Math.sqrt(fromCenter.x * fromCenter.x + fromCenter.y * fromCenter.y);\n                \n                if (distance > 0) {\n                    const speed = 100;\n                    particle.velocity.x = (fromCenter.x / distance) * speed;\n                    particle.velocity.y = (fromCenter.y / distance) * speed;\n                    \n                    particle.position.x += particle.velocity.x * deltaTime;\n                    particle.position.y += particle.velocity.y * deltaTime;\n                }\n                \n                particle.life -= deltaTime * 2; // Fade quickly\n            }\n        });\n    }\n\n    /**\n     * Update accretion disk\n     */\n    private updateAccretionDisk(deltaTime: number): void {\n        this.accretionParticles.forEach(particle => {\n            // Chaotic rotation\n            particle.angle += particle.speed * deltaTime * (0.5 + Math.random() * 0.5);\n            \n            // Slight radius variation for chaos\n            particle.radius += Math.sin(particle.angle * 3) * 2 * deltaTime;\n            \n            // During deactivation, particles spiral outward\n            if (this.state === WarpState.Deactivating) {\n                particle.radius += 50 * deltaTime;\n                particle.life -= deltaTime * 1.5;\n            }\n        });\n        \n        // Remove dead particles\n        this.accretionParticles = this.accretionParticles.filter(p => p.life > 0);\n    }\n\n    /**\n     * Update space distortion effect\n     */\n    private updateSpaceDistortion(deltaTime: number): void {\n        if (this.distortionIntensity > 0) {\n            // Subtle pulsing effect\n            this.distortion.intensity = this.distortionIntensity * (0.8 + Math.sin(this.stateTimer * 3) * 0.2);\n        }\n    }\n\n    /**\n     * Add dissolution particles during shutdown\n     */\n    private addDissolutionParticles(): void {\n        for (let i = 0; i < 5; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const distance = Math.random() * 30;\n            \n            this.particles.push({\n                position: {\n                    x: this.shipPosition.x + Math.cos(angle) * distance,\n                    y: this.shipPosition.y + Math.sin(angle) * distance\n                },\n                velocity: {\n                    x: Math.cos(angle) * 50,\n                    y: Math.sin(angle) * 50\n                },\n                color: { r: 32, g: 32, b: 32 }, // Darker particles for dissolution\n                life: 0.5,\n                size: Math.random() * 2 + 1,\n                absorbed: false\n            });\n        }\n    }\n\n    /**\n     * Clear all effects\n     */\n    private clearAllEffects(): void {\n        this.particles = [];\n        this.accretionParticles = [];\n        this.blackHoleRadius = 0;\n        this.particleIntensity = 0;\n        this.blackHoleIntensity = 0;\n        this.accretionIntensity = 0;\n        this.distortionIntensity = 0;\n    }\n\n    /**\n     * Render warp effects\n     */\n    render(renderer: Renderer): void {\n        if (this.state === WarpState.Idle) return;\n        \n        // Render space distortion first (background effect)\n        if (this.distortionIntensity > 0) {\n            this.renderSpaceDistortion(renderer);\n        }\n        \n        // Render absorption particles\n        if (this.particleIntensity > 0) {\n            this.renderParticles(renderer);\n        }\n        \n        // Render accretion disk\n        if (this.accretionIntensity > 0) {\n            this.renderAccretionDisk(renderer);\n        }\n        \n        // Render black hole (on top)\n        if (this.blackHoleIntensity > 0) {\n            this.renderBlackHole(renderer);\n        }\n    }\n\n    /**\n     * Render absorption particles\n     */\n    private renderParticles(renderer: Renderer): void {\n        this.particles.forEach(particle => {\n            if (particle.life > 0) {\n                const alpha = particle.life * this.particleIntensity;\n                const color = {\n                    r: Math.floor(particle.color.r * alpha),\n                    g: Math.floor(particle.color.g * alpha),\n                    b: Math.floor(particle.color.b * alpha)\n                };\n                \n                renderer.fillRect(\n                    particle.position.x - particle.size/2,\n                    particle.position.y - particle.size/2,\n                    particle.size,\n                    particle.size,\n                    color\n                );\n            }\n        });\n    }\n\n    /**\n     * Render black hole\n     */\n    private renderBlackHole(renderer: Renderer): void {\n        const radius = this.blackHoleRadius * this.blackHoleIntensity;\n        if (radius > 0) {\n            // Pure black center\n            renderer.drawCircle(this.shipPosition.x, this.shipPosition.y, radius, { r: 0, g: 0, b: 0 }, true);\n            \n            // Subtle event horizon glow\n            const glowRadius = radius * 1.2;\n            const glowColor = { r: 8, g: 8, b: 8 }; // Very dark glow\n            renderer.drawCircle(this.shipPosition.x, this.shipPosition.y, glowRadius, glowColor, false);\n        }\n    }\n\n    /**\n     * Render accretion disk\n     */\n    private renderAccretionDisk(renderer: Renderer): void {\n        this.accretionParticles.forEach(particle => {\n            if (particle.life > 0) {\n                const x = this.shipPosition.x + Math.cos(particle.angle) * particle.radius;\n                const y = this.shipPosition.y + Math.sin(particle.angle) * particle.radius;\n                \n                const alpha = particle.life * this.accretionIntensity;\n                const color = {\n                    r: Math.floor(particle.color.r * alpha),\n                    g: Math.floor(particle.color.g * alpha),\n                    b: Math.floor(particle.color.b * alpha)\n                };\n                \n                renderer.fillRect(\n                    x - particle.size/2,\n                    y - particle.size/2,\n                    particle.size,\n                    particle.size,\n                    color\n                );\n            }\n        });\n    }\n\n    /**\n     * Render space distortion effect\n     */\n    private renderSpaceDistortion(renderer: Renderer): void {\n        // This is a placeholder for space distortion\n        // In a real implementation, this would affect the entire background rendering\n        // For now, we'll render subtle distortion lines\n        \n        const intensity = this.distortion.intensity;\n        if (intensity > 0) {\n            const lines = 8;\n            for (let i = 0; i < lines; i++) {\n                const angle = (Math.PI * 2 * i) / lines;\n                const baseRadius = this.distortion.radius;\n                \n                for (let r = baseRadius * 0.5; r < baseRadius * 1.5; r += 10) {\n                    const distortion = Math.sin(this.stateTimer * 2 + r * 0.1) * intensity * 5;\n                    const x = this.distortion.center.x + Math.cos(angle) * (r + distortion);\n                    const y = this.distortion.center.y + Math.sin(angle) * (r + distortion);\n                    \n                    const alpha = intensity * 0.3 * (1 - (r - baseRadius * 0.5) / (baseRadius));\n                    const color = {\n                        r: Math.floor(16 * alpha),\n                        g: Math.floor(24 * alpha),\n                        b: Math.floor(32 * alpha)\n                    };\n                    \n                    renderer.fillRect(x - 1, y - 1, 2, 2, color);\n                }\n            }\n        }\n    }\n\n    /**\n     * Get current warp state\n     */\n    getState(): WarpState {\n        return this.state;\n    }\n\n    /**\n     * Check if warp is active\n     */\n    isWarpActive(): boolean {\n        return this.isActive;\n    }\n\n    /**\n     * Check if warp is charging\n     */\n    isWarpCharging(): boolean {\n        return this.isCharging;\n    }\n\n    /**\n     * Get warp progress (0-1) during charging/deactivation\n     */\n    getWarpProgress(): number {\n        switch (this.state) {\n            case WarpState.Charging:\n                return this.stateTimer / this.PHASE_PARTICLE_ABSORPTION;\n            case WarpState.BlackHoleGrowth:\n                return this.stateTimer / this.PHASE_BLACK_HOLE_GROWTH;\n            case WarpState.AccretionFormation:\n                return this.stateTimer / this.PHASE_ACCRETION_FORMATION;\n            case WarpState.Deactivating:\n                return 1.0 - (this.stateTimer / this.PHASE_SHUTDOWN);\n            case WarpState.Active:\n                return 1.0;\n            default:\n                return 0.0;\n        }\n    }\n\n    /**\n     * Get space distortion data for background rendering\n     */\n    getSpaceDistortion(): SpaceDistortion {\n        return { ...this.distortion };\n    }\n\n    /**\n     * Force emergency warp shutdown\n     */\n    emergencyShutdown(): void {\n        if (this.state !== WarpState.Idle) {\n            this.state = WarpState.Deactivating;\n            this.stateTimer = 0;\n            this.isActive = false;\n            this.isCharging = false;\n            \n            this.logger.warn('🚨 Emergency warp shutdown initiated');\n        }\n    }\n}","/**\n * Player Ship Entity\n * Integrates physics, input, and rendering for the player's controllable ship\n */\n\nimport { PhysicsObject, SpacePhysics } from '@core/Physics';\nimport { InputManager } from '@core/InputManager';\nimport { AudioEngine } from '@core/AudioEngine';\nimport { Vector2 } from '@core/Renderer';\nimport { Logger } from '@utils/Logger';\nimport { ShipSystems, SystemStatus, PowerAllocation, ShipSection, SystemType } from '@entities/ShipSystems';\nimport { WarpDrive, WarpState } from '@systems/WarpDrive';\n\nexport interface ShipStats {\n    maxHealth: number;\n    maxFuel: number;\n    thrustPower: number;\n    rotationSpeed: number;\n    maxVelocity: number;\n    mass: number;\n}\n\nexport class PlayerShip {\n    private physicsObject: PhysicsObject;\n    private physics: SpacePhysics;\n    private input: InputManager;\n    private audio: AudioEngine;\n    \n    // Ship systems\n    private shipSystems: ShipSystems;\n    private warpDrive: WarpDrive;\n    \n    // Ship properties\n    private stats: ShipStats;\n    private currentFuel: number;\n    private rotation: number = 0; // Rotation in radians\n    private thrustLevel: number = 0; // 0-1\n    private engineSoundId: string | null = null;\n    \n    // Visual effects\n    private thrustParticles: ThrustParticle[] = [];\n    \n    private logger: Logger;\n\n    constructor(\n        physics: SpacePhysics,\n        input: InputManager,\n        audio: AudioEngine,\n        startPosition: Vector2,\n        stats?: Partial<ShipStats>\n    ) {\n        this.physics = physics;\n        this.input = input;\n        this.audio = audio;\n        this.logger = new Logger('PlayerShip');\n        \n        // Default ship stats\n        this.stats = {\n            maxHealth: 100,\n            maxFuel: 1000,\n            thrustPower: 5000,\n            rotationSpeed: 3.0,\n            maxVelocity: 500,\n            mass: 1000,\n            ...stats\n        };\n        \n        this.currentFuel = this.stats.maxFuel;\n        \n        // Create physics object\n        this.physicsObject = this.physics.createShip('player_ship', startPosition, this.stats.mass);\n        this.physicsObject.health = this.stats.maxHealth;\n        \n        // Add collision callback\n        this.physicsObject.onCollision = (other) => this.handleCollision(other);\n        \n        // Add to physics simulation\n        this.physics.addObject(this.physicsObject);\n        \n        // Initialize ship systems\n        this.shipSystems = new ShipSystems({\n            maxHull: this.stats.maxHealth,\n            maxFuel: this.stats.maxFuel,\n            enginePower: this.stats.thrustPower,\n            engineEfficiency: 0.85\n        }, {\n            onSystemDamage: (system, severity) => {\n                this.logger.warn(`⚠️ ${system} system damaged: ${severity}`);\n                this.audio.playUIBeep();\n            },\n            onCriticalDamage: (section) => {\n                this.logger.error(`💥 Critical damage in ${section} section!`);\n            },\n            onPowerFailure: () => {\n                this.logger.error('⚡ Power failure - emergency protocols activated');\n            },\n            onOverheat: () => {\n                this.logger.warn('🔥 Ship overheating - reducing power');\n            }\n        });\n        \n        // Initialize warp drive\n        this.warpDrive = new WarpDrive({\n            speedMultiplier: 20.0,\n            energyCost: 15.0,\n            particleCount: 50\n        }, {\n            onWarpStart: () => {\n                this.logger.info('🌌 Warp drive activation sequence initiated');\n            },\n            onWarpEnd: () => {\n                this.logger.info('✅ Warp drive deactivation complete');\n            },\n            onBlackHoleFormed: () => {\n                this.logger.info('🕳️ Black hole formation complete');\n            },\n            onSpaceDistorted: () => {\n                this.logger.info('🌀 Space-time distortion field active');\n            }\n        });\n        \n        this.logger.info('🚀 Player ship created', {\n            position: startPosition,\n            stats: this.stats\n        });\n    }\n\n    /**\n     * Update the player ship\n     */\n    update(deltaTime: number): void {\n        // Update ship systems first\n        this.shipSystems.update(deltaTime);\n        \n        // Update warp drive\n        const warpSpeedMultiplier = this.warpDrive.update(deltaTime, this.physicsObject.position);\n        \n        // Handle input\n        this.handleInput(deltaTime);\n        \n        // Update rotation based on input\n        this.updateRotation(deltaTime);\n        \n        // Update thrust and movement (affected by warp speed)\n        this.updateMovement(deltaTime, warpSpeedMultiplier);\n        \n        // Update visual effects\n        this.updateThrustParticles(deltaTime);\n        \n        // Update audio\n        this.updateAudio();\n        \n        // Apply fuel consumption\n        this.consumeFuel(deltaTime);\n    }\n\n    /**\n     * Handle player input\n     */\n    private handleInput(deltaTime: number): void {\n        // Warp drive controls\n        if (this.input.isKeyPressed('KeyW') || this.input.isActionPressed()) {\n            this.handleWarpInput();\n        }\n        \n        // Get input values\n        const thrustInput = this.input.getThrustInput();\n        const rotationInput = this.input.getRotationInput();\n        \n        // Update thrust level\n        this.thrustLevel = Math.max(0, thrustInput); // Only forward thrust for now\n        \n        // Update rotation\n        this.rotation += rotationInput * this.stats.rotationSpeed * deltaTime;\n        \n        // Normalize rotation to 0-2π\n        while (this.rotation < 0) this.rotation += Math.PI * 2;\n        while (this.rotation > Math.PI * 2) this.rotation -= Math.PI * 2;\n    }\n\n    /**\n     * Update ship rotation\n     */\n    private updateRotation(deltaTime: number): void {\n        // Rotation is handled in handleInput\n        // This method can be used for additional rotation logic\n    }\n\n    /**\n     * Handle warp drive input\n     */\n    private handleWarpInput(): void {\n        const systemStatus = this.shipSystems.getStatus();\n        \n        // Check if warp drive is available\n        if (!systemStatus.warpDrive) {\n            this.logger.warn('⚠️ Warp drive offline');\n            return;\n        }\n        \n        if (systemStatus.power < 20) {\n            this.logger.warn('⚠️ Insufficient power for warp drive');\n            return;\n        }\n        \n        // Toggle warp drive\n        if (this.warpDrive.isWarpActive()) {\n            this.warpDrive.deactivateWarp();\n        } else if (!this.warpDrive.isWarpCharging()) {\n            this.warpDrive.activateWarp(this.physicsObject.position, 20); // Ship size\n        }\n    }\n\n    /**\n     * Update ship movement and thrust\n     */\n    private updateMovement(deltaTime: number, speedMultiplier: number = 1.0): void {\n        if (this.thrustLevel > 0 && this.currentFuel > 0) {\n            // Calculate thrust direction based on rotation\n            const thrustDirection: Vector2 = {\n                x: Math.cos(this.rotation - Math.PI / 2), // -PI/2 because 0 rotation points up\n                y: Math.sin(this.rotation - Math.PI / 2)\n            };\n            \n            // Apply thrust (affected by warp speed multiplier)\n            const thrustForce = this.thrustLevel * this.stats.thrustPower * speedMultiplier;\n            this.physics.applyThrust(this.physicsObject.id, thrustDirection, thrustForce);\n            \n            // Create thrust particles\n            this.createThrustParticles();\n        }\n        \n        // Limit velocity to max speed\n        const currentSpeed = Math.sqrt(\n            this.physicsObject.velocity.x ** 2 + this.physicsObject.velocity.y ** 2\n        );\n        \n        if (currentSpeed > this.stats.maxVelocity) {\n            const scale = this.stats.maxVelocity / currentSpeed;\n            this.physicsObject.velocity.x *= scale;\n            this.physicsObject.velocity.y *= scale;\n        }\n    }\n\n    /**\n     * Update thrust particle effects\n     */\n    private updateThrustParticles(deltaTime: number): void {\n        // Update existing particles\n        for (let i = this.thrustParticles.length - 1; i >= 0; i--) {\n            const particle = this.thrustParticles[i];\n            \n            // Update particle\n            particle.position.x += particle.velocity.x * deltaTime;\n            particle.position.y += particle.velocity.y * deltaTime;\n            particle.life -= deltaTime;\n            \n            // Remove dead particles\n            if (particle.life <= 0) {\n                this.thrustParticles.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Create thrust particles\n     */\n    private createThrustParticles(): void {\n        if (this.thrustParticles.length > 20) return; // Limit particle count\n        \n        // Calculate exhaust position (behind the ship)\n        const exhaustOffset = 20; // Distance behind ship center\n        const exhaustX = this.physicsObject.position.x - Math.cos(this.rotation - Math.PI / 2) * exhaustOffset;\n        const exhaustY = this.physicsObject.position.y - Math.sin(this.rotation - Math.PI / 2) * exhaustOffset;\n        \n        // Create particle\n        const particle: ThrustParticle = {\n            position: { x: exhaustX, y: exhaustY },\n            velocity: {\n                x: -Math.cos(this.rotation - Math.PI / 2) * 100 + (Math.random() - 0.5) * 50,\n                y: -Math.sin(this.rotation - Math.PI / 2) * 100 + (Math.random() - 0.5) * 50\n            },\n            life: 0.5,\n            maxLife: 0.5\n        };\n        \n        this.thrustParticles.push(particle);\n    }\n\n    /**\n     * Update audio based on ship state\n     */\n    private updateAudio(): void {\n        if (this.thrustLevel > 0 && this.currentFuel > 0) {\n            // Start engine sound if not playing\n            if (!this.engineSoundId) {\n                this.engineSoundId = this.audio.playEngineSound();\n            }\n        } else {\n            // Stop engine sound\n            if (this.engineSoundId) {\n                this.audio.stopSound(this.engineSoundId);\n                this.engineSoundId = null;\n            }\n        }\n    }\n\n    /**\n     * Consume fuel based on thrust\n     */\n    private consumeFuel(deltaTime: number): void {\n        if (this.thrustLevel > 0) {\n            const fuelConsumption = this.thrustLevel * 10 * deltaTime; // Adjust consumption rate\n            this.currentFuel = Math.max(0, this.currentFuel - fuelConsumption);\n            \n            if (this.currentFuel === 0) {\n                this.logger.warn('Ship out of fuel!');\n            }\n        }\n    }\n\n    /**\n     * Handle collision with other objects\n     */\n    private handleCollision(other: PhysicsObject): void {\n        this.logger.debug(`Ship collision with ${other.type}: ${other.id}`);\n        \n        switch (other.type) {\n            case 'planet':\n            case 'asteroid':\n                // Take damage from collision\n                const collisionDamage = 10;\n                this.takeDamage(collisionDamage);\n                \n                // Play collision sound\n                this.audio.playExplosion(this.physicsObject.position);\n                break;\n                \n            case 'projectile':\n                // Take damage from projectile\n                this.takeDamage(5);\n                break;\n        }\n    }\n\n    /**\n     * Take damage\n     */\n    takeDamage(amount: number): void {\n        if (this.physicsObject.health) {\n            this.physicsObject.health = Math.max(0, this.physicsObject.health - amount);\n            this.logger.debug(`Ship took ${amount} damage, health: ${this.physicsObject.health}`);\n            \n            if (this.physicsObject.health === 0) {\n                this.destroy();\n            }\n        }\n    }\n\n    /**\n     * Heal the ship\n     */\n    heal(amount: number): void {\n        if (this.physicsObject.health) {\n            this.physicsObject.health = Math.min(this.stats.maxHealth, this.physicsObject.health + amount);\n            this.logger.debug(`Ship healed ${amount}, health: ${this.physicsObject.health}`);\n        }\n    }\n\n    /**\n     * Add fuel\n     */\n    addFuel(amount: number): void {\n        this.currentFuel = Math.min(this.stats.maxFuel, this.currentFuel + amount);\n        this.logger.debug(`Added ${amount} fuel, current: ${this.currentFuel}`);\n    }\n\n    /**\n     * Fire weapon\n     */\n    fireWeapon(): void {\n        if (this.input.isActionPressed()) {\n            // Calculate projectile spawn position (front of ship)\n            const spawnOffset = 25;\n            const spawnX = this.physicsObject.position.x + Math.cos(this.rotation - Math.PI / 2) * spawnOffset;\n            const spawnY = this.physicsObject.position.y + Math.sin(this.rotation - Math.PI / 2) * spawnOffset;\n            \n            // Calculate projectile velocity\n            const projectileSpeed = 800;\n            const projectileVelocity: Vector2 = {\n                x: Math.cos(this.rotation - Math.PI / 2) * projectileSpeed + this.physicsObject.velocity.x,\n                y: Math.sin(this.rotation - Math.PI / 2) * projectileSpeed + this.physicsObject.velocity.y\n            };\n            \n            // Create projectile\n            const projectile = this.physics.createProjectile(\n                `projectile_${Date.now()}`,\n                { x: spawnX, y: spawnY },\n                projectileVelocity\n            );\n            \n            // Add projectile to physics\n            this.physics.addObject(projectile);\n            \n            // Play laser sound\n            this.audio.playLaserSound(this.physicsObject.position);\n            \n            this.logger.debug('Weapon fired');\n        }\n    }\n\n    /**\n     * Destroy the ship\n     */\n    private destroy(): void {\n        this.logger.warn('Ship destroyed!');\n        \n        // Play explosion sound\n        this.audio.playExplosion(this.physicsObject.position);\n        \n        // Stop engine sound\n        if (this.engineSoundId) {\n            this.audio.stopSound(this.engineSoundId);\n            this.engineSoundId = null;\n        }\n        \n        // Remove from physics simulation\n        this.physics.removeObject(this.physicsObject.id);\n    }\n\n    /**\n     * Render thrust particles\n     */\n    renderThrustParticles(renderer: any): void {\n        this.thrustParticles.forEach(particle => {\n            const alpha = particle.life / particle.maxLife;\n            const color = {\n                r: 255,\n                g: Math.floor(255 * alpha),\n                b: 0,\n                a: Math.floor(255 * alpha)\n            };\n            \n            renderer.setPixel(\n                Math.floor(particle.position.x),\n                Math.floor(particle.position.y),\n                color\n            );\n        });\n    }\n\n    /**\n     * Get ship data for UI display\n     */\n    getShipData() {\n        return {\n            position: { ...this.physicsObject.position },\n            velocity: { ...this.physicsObject.velocity },\n            rotation: this.rotation,\n            health: this.physicsObject.health || 0,\n            fuel: this.currentFuel,\n            thrustLevel: this.thrustLevel,\n            maxHealth: this.stats.maxHealth,\n            maxFuel: this.stats.maxFuel\n        };\n    }\n\n    /**\n     * Get physics object for external access\n     */\n    getPhysicsObject(): PhysicsObject {\n        return this.physicsObject;\n    }\n\n    /**\n     * Get current position\n     */\n    getPosition(): Vector2 {\n        return { ...this.physicsObject.position };\n    }\n\n    /**\n     * Get current velocity\n     */\n    getVelocity(): Vector2 {\n        return { ...this.physicsObject.velocity };\n    }\n\n    /**\n     * Get current rotation in radians\n     */\n    getRotation(): number {\n        return this.rotation;\n    }\n\n    /**\n     * Check if ship is alive\n     */\n    isAlive(): boolean {\n        return this.shipSystems.getStatus().hull > 0;\n    }\n    \n    /**\n     * Get ship systems status\n     */\n    getSystemStatus(): SystemStatus {\n        return this.shipSystems.getStatus();\n    }\n    \n    /**\n     * Get ship systems instance\n     */\n    getShipSystems(): ShipSystems {\n        return this.shipSystems;\n    }\n    \n    /**\n     * Apply damage to ship systems\n     */\n    applyDamage(amount: number, section: ShipSection = ShipSection.Core, damageType: 'kinetic' | 'energy' | 'thermal' = 'kinetic'): void {\n        this.shipSystems.applyDamage(section, amount, damageType);\n        \n        // Update physics object health\n        this.physicsObject.health = this.shipSystems.getStatus().hull;\n    }\n    \n    /**\n     * Set power allocation\n     */\n    setPowerAllocation(allocation: Partial<PowerAllocation>): void {\n        this.shipSystems.setPowerAllocation(allocation);\n    }\n    \n    /**\n     * Toggle ship system\n     */\n    toggleSystem(system: SystemType, state?: boolean): void {\n        this.shipSystems.toggleSystem(system, state);\n    }\n    \n    /**\n     * Get warp drive instance\n     */\n    getWarpDrive(): WarpDrive {\n        return this.warpDrive;\n    }\n    \n    /**\n     * Check if warp is active\n     */\n    isWarpActive(): boolean {\n        return this.warpDrive.isWarpActive();\n    }\n    \n    /**\n     * Get warp state\n     */\n    getWarpState(): WarpState {\n        return this.warpDrive.getState();\n    }\n    \n    /**\n     * Render warp effects\n     */\n    renderWarpEffects(renderer: any): void {\n        this.warpDrive.render(renderer);\n    }\n\n    /**\n     * Cleanup\n     */\n    cleanup(): void {\n        // Stop engine sound\n        if (this.engineSoundId) {\n            this.audio.stopSound(this.engineSoundId);\n        }\n        \n        // Remove from physics\n        this.physics.removeObject(this.physicsObject.id);\n        \n        this.logger.info('🧹 Player ship cleanup completed');\n    }\n}\n\n// Thrust particle interface\ninterface ThrustParticle {\n    position: Vector2;\n    velocity: Vector2;\n    life: number;\n    maxLife: number;\n}","/**\n * Galaxy Generation Engine\n * Creates realistic spiral galaxies with procedural star systems\n */\n\nimport { Vector2 } from '@core/Renderer';\nimport { Logger } from '@utils/Logger';\n\nexport interface GalaxyConfig {\n    seed: number;\n    size: number; // Galaxy radius in light years\n    starCount: number;\n    spiralArms: number;\n    armTightness: number; // How tightly wound the spiral arms are\n    coreSize: number; // Size of the galactic core\n    starDensity: number; // Stars per cubic light year\n}\n\nexport interface StarData {\n    id: string;\n    name: string;\n    position: Vector2; // Position in galaxy (light years)\n    type: StarType;\n    mass: number; // Solar masses\n    luminosity: number; // Solar luminosities\n    temperature: number; // Kelvin\n    age: number; // Million years\n    metallicity: number; // 0-1, higher = more heavy elements\n    \n    // Visual properties\n    color: { r: number; g: number; b: number };\n    brightness: number; // 0-1 for rendering\n    radius: number; // Solar radii\n}\n\nexport interface PlanetData {\n    id: string;\n    name: string;\n    starId: string;\n    orbitDistance: number; // AU from star\n    orbitPeriod: number; // Days\n    radius: number; // Earth radii\n    mass: number; // Earth masses\n    type: PlanetType;\n    temperature: number; // Kelvin\n    hasAtmosphere: boolean;\n    atmosphereType?: AtmosphereType;\n    hasRings: boolean;\n    moons: MoonData[];\n    \n    // Surface properties\n    surfaceType: SurfaceType;\n    surfaceColor: { r: number; g: number; b: number };\n    hasWater: boolean;\n    hasLife: boolean;\n}\n\nexport interface MoonData {\n    id: string;\n    name: string;\n    planetId: string;\n    orbitDistance: number; // Planet radii\n    orbitPeriod: number; // Hours\n    radius: number; // Earth radii\n    mass: number; // Earth masses\n    type: 'rocky' | 'icy' | 'captured_asteroid';\n    tidallyLocked: boolean;\n}\n\nexport interface StarSystemData {\n    id: string;\n    name: string;\n    position: Vector2;\n    star: StarData;\n    planets: PlanetData[];\n    asteroidBelts: AsteroidBeltData[];\n    \n    // System properties\n    habitableZoneInner: number; // AU\n    habitableZoneOuter: number; // AU\n    systemAge: number; // Million years\n    metallicity: number;\n    \n    // Generated objects\n    stations?: SpaceStationData[];\n    anomalies?: AnomalyData[];\n}\n\nexport enum StarType {\n    O = 'O', // Blue supergiant\n    B = 'B', // Blue giant\n    A = 'A', // White\n    F = 'F', // Yellow-white\n    G = 'G', // Yellow (like Sun)\n    K = 'K', // Orange\n    M = 'M', // Red dwarf\n    WD = 'WD', // White dwarf\n    NS = 'NS', // Neutron star\n    BH = 'BH'  // Black hole\n}\n\nexport enum PlanetType {\n    Terrestrial = 'terrestrial',\n    GasGiant = 'gas_giant',\n    IceGiant = 'ice_giant',\n    Desert = 'desert',\n    Ocean = 'ocean',\n    Volcanic = 'volcanic',\n    Frozen = 'frozen',\n    Toxic = 'toxic'\n}\n\nexport enum SurfaceType {\n    Rocky = 'rocky',\n    Desert = 'desert',\n    Ocean = 'ocean',\n    Ice = 'ice',\n    Lava = 'lava',\n    Gas = 'gas',\n    Toxic = 'toxic',\n    Crystalline = 'crystalline'\n}\n\nexport enum AtmosphereType {\n    None = 'none',\n    Thin = 'thin',\n    Thick = 'thick',\n    Toxic = 'toxic',\n    Methane = 'methane',\n    Hydrogen = 'hydrogen',\n    CarbonDioxide = 'carbon_dioxide'\n}\n\ninterface AsteroidBeltData {\n    id: string;\n    innerRadius: number; // AU\n    outerRadius: number; // AU\n    density: number; // 0-1\n    composition: 'rocky' | 'metallic' | 'icy';\n}\n\ninterface SpaceStationData {\n    id: string;\n    name: string;\n    position: Vector2;\n    type: 'trading' | 'mining' | 'research' | 'military' | 'abandoned';\n    faction: string;\n    population: number;\n}\n\ninterface AnomalyData {\n    id: string;\n    name: string;\n    position: Vector2;\n    type: 'wormhole' | 'nebula' | 'supernova_remnant' | 'dark_matter' | 'ancient_artifact';\n    strength: number; // 0-1\n}\n\nexport class GalaxyGenerator {\n    private config: GalaxyConfig;\n    private random: SeededRandom;\n    private logger: Logger;\n    \n    // Galaxy data\n    private stars: Map<string, StarData> = new Map();\n    private starSystems: Map<string, StarSystemData> = new Map();\n    private galaxyMap: StarData[] = [];\n\n    constructor(config: Partial<GalaxyConfig> = {}) {\n        this.logger = new Logger('GalaxyGenerator');\n        \n        // Default galaxy configuration\n        this.config = {\n            seed: 42,\n            size: 50000, // 50,000 light years radius\n            starCount: 1000, // Will be scaled for performance\n            spiralArms: 4,\n            armTightness: 0.3,\n            coreSize: 5000, // 5,000 light years\n            starDensity: 0.1,\n            ...config\n        };\n        \n        this.random = new SeededRandom(this.config.seed);\n        \n        this.logger.info('🌌 Galaxy generator initialized', {\n            seed: this.config.seed,\n            size: this.config.size,\n            starCount: this.config.starCount\n        });\n    }\n\n    /**\n     * Generate the entire galaxy\n     */\n    async generateGalaxy(): Promise<void> {\n        this.logger.info('🔄 Generating galaxy...');\n        \n        const startTime = performance.now();\n        \n        try {\n            // Generate star positions using spiral galaxy model\n            this.generateStarPositions();\n            \n            // Generate star properties\n            this.generateStarProperties();\n            \n            // Generate star systems (planets, moons, etc.)\n            await this.generateStarSystems();\n            \n            // Generate special objects and anomalies\n            this.generateAnomalies();\n            \n            const endTime = performance.now();\n            this.logger.info(`✅ Galaxy generated in ${(endTime - startTime).toFixed(2)}ms`, {\n                stars: this.stars.size,\n                systems: this.starSystems.size\n            });\n            \n        } catch (error) {\n            this.logger.error('❌ Galaxy generation failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Generate star positions using spiral galaxy model\n     */\n    private generateStarPositions(): void {\n        this.logger.debug('Generating star positions...');\n        \n        for (let i = 0; i < this.config.starCount; i++) {\n            const position = this.generateSpiralPosition(i);\n            const starId = `star_${i.toString().padStart(4, '0')}`;\n            \n            // Create basic star data (properties will be added later)\n            const star: StarData = {\n                id: starId,\n                name: this.generateStarName(i),\n                position: position,\n                type: StarType.G, // Will be determined later\n                mass: 1.0,\n                luminosity: 1.0,\n                temperature: 5778,\n                age: 4600,\n                metallicity: 0.02,\n                color: { r: 255, g: 255, b: 255 },\n                brightness: 1.0,\n                radius: 1.0\n            };\n            \n            this.stars.set(starId, star);\n            this.galaxyMap.push(star);\n        }\n        \n        this.logger.debug(`Generated ${this.stars.size} star positions`);\n    }\n\n    /**\n     * Generate position using spiral galaxy model\n     */\n    private generateSpiralPosition(index: number): Vector2 {\n        // Distance from galactic center (0 = center, 1 = edge)\n        const normalizedRadius = Math.pow(this.random.next(), 0.7); // Power law distribution\n        const radius = normalizedRadius * this.config.size;\n        \n        // Determine which spiral arm\n        const armIndex = Math.floor(this.random.next() * this.config.spiralArms);\n        const armAngleOffset = (armIndex * 2 * Math.PI) / this.config.spiralArms;\n        \n        // Spiral angle based on distance from center\n        const spiralAngle = armAngleOffset + normalizedRadius * this.config.armTightness * 4 * Math.PI;\n        \n        // Add some random offset to make it less perfect\n        const angleNoise = (this.random.next() - 0.5) * 0.5;\n        const radiusNoise = (this.random.next() - 0.5) * 0.2 * radius;\n        \n        const finalAngle = spiralAngle + angleNoise;\n        const finalRadius = Math.max(0, radius + radiusNoise);\n        \n        return {\n            x: Math.cos(finalAngle) * finalRadius,\n            y: Math.sin(finalAngle) * finalRadius\n        };\n    }\n\n    /**\n     * Generate star names using procedural naming\n     */\n    private generateStarName(index: number): string {\n        const prefixes = ['Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa'];\n        const suffixes = ['Centauri', 'Draconis', 'Lyrae', 'Cygni', 'Aquilae', 'Orionis', 'Ursae', 'Cassiopeiae'];\n        \n        const prefix = prefixes[index % prefixes.length];\n        const suffix = suffixes[Math.floor(index / prefixes.length) % suffixes.length];\n        const number = Math.floor(index / (prefixes.length * suffixes.length)) + 1;\n        \n        return number > 1 ? `${prefix} ${suffix} ${number}` : `${prefix} ${suffix}`;\n    }\n\n    /**\n     * Generate star properties based on stellar evolution\n     */\n    private generateStarProperties(): void {\n        this.logger.debug('Generating star properties...');\n        \n        for (const star of this.stars.values()) {\n            // Determine star type based on galactic position and random factors\n            const distanceFromCore = Math.sqrt(star.position.x ** 2 + star.position.y ** 2);\n            const coreInfluence = Math.max(0, 1 - distanceFromCore / this.config.coreSize);\n            \n            // Metallicity increases closer to galactic center\n            star.metallicity = Math.max(0.001, 0.02 * (0.5 + coreInfluence * 0.5) * this.random.range(0.5, 1.5));\n            \n            // Generate stellar mass (affects everything else)\n            star.mass = this.generateStellarMass();\n            \n            // Determine star type from mass\n            star.type = this.getStarTypeFromMass(star.mass);\n            \n            // Calculate other properties\n            star.luminosity = this.calculateLuminosity(star.mass, star.type);\n            star.temperature = this.calculateTemperature(star.mass, star.type);\n            star.radius = this.calculateRadius(star.mass, star.luminosity, star.temperature);\n            star.age = this.generateStellarAge(star.mass, star.type);\n            \n            // Visual properties\n            star.color = this.getStarColor(star.temperature);\n            star.brightness = Math.min(1.0, star.luminosity / 100); // Scale for visibility\n        }\n        \n        this.logger.debug('Star properties generated');\n    }\n\n    /**\n     * Generate stellar mass using realistic distribution\n     */\n    private generateStellarMass(): number {\n        // Salpeter initial mass function approximation\n        const x = this.random.next();\n        if (x < 0.8) {\n            // Low mass stars (0.1 - 0.8 solar masses)\n            return 0.1 + (0.7 * Math.pow(x / 0.8, 2));\n        } else if (x < 0.95) {\n            // Medium mass stars (0.8 - 3 solar masses)\n            return 0.8 + (2.2 * Math.pow((x - 0.8) / 0.15, 1.5));\n        } else {\n            // High mass stars (3 - 50 solar masses)\n            return 3 + (47 * Math.pow((x - 0.95) / 0.05, 3));\n        }\n    }\n\n    /**\n     * Determine star type from mass\n     */\n    private getStarTypeFromMass(mass: number): StarType {\n        if (mass > 30) return StarType.O;\n        if (mass > 10) return StarType.B;\n        if (mass > 2.5) return StarType.A;\n        if (mass > 1.4) return StarType.F;\n        if (mass > 0.8) return StarType.G;\n        if (mass > 0.5) return StarType.K;\n        return StarType.M;\n    }\n\n    /**\n     * Calculate luminosity from mass and type\n     */\n    private calculateLuminosity(mass: number, type: StarType): number {\n        // Mass-luminosity relation: L ∝ M^α\n        let alpha = 3.5; // Default for main sequence\n        \n        switch (type) {\n            case StarType.O:\n            case StarType.B:\n                alpha = 4.0;\n                break;\n            case StarType.A:\n            case StarType.F:\n                alpha = 3.5;\n                break;\n            case StarType.G:\n                alpha = 4.0;\n                break;\n            case StarType.K:\n            case StarType.M:\n                alpha = 2.3;\n                break;\n        }\n        \n        return Math.pow(mass, alpha);\n    }\n\n    /**\n     * Calculate temperature from mass and type\n     */\n    private calculateTemperature(mass: number, type: StarType): number {\n        const baseTemps = {\n            [StarType.O]: 35000,\n            [StarType.B]: 20000,\n            [StarType.A]: 8500,\n            [StarType.F]: 6500,\n            [StarType.G]: 5500,\n            [StarType.K]: 4000,\n            [StarType.M]: 3000\n        };\n        \n        const baseTemp = (baseTemps as any)[type] || 5500;\n        return baseTemp * this.random.range(0.9, 1.1);\n    }\n\n    /**\n     * Calculate radius from mass, luminosity, and temperature\n     */\n    private calculateRadius(mass: number, luminosity: number, temperature: number): number {\n        // Stefan-Boltzmann law: L = 4πR²σT⁴\n        // R ∝ √(L/T⁴)\n        const solarTemp = 5778;\n        return Math.sqrt(luminosity) * Math.pow(solarTemp / temperature, 2);\n    }\n\n    /**\n     * Generate stellar age\n     */\n    private generateStellarAge(mass: number, type: StarType): number {\n        // Main sequence lifetime ∝ M/L ∝ M^(-2.5)\n        const solarLifetime = 10000; // Million years\n        const lifetime = solarLifetime * Math.pow(mass, -2.5);\n        \n        // Random age between 0 and lifetime\n        return this.random.next() * lifetime;\n    }\n\n    /**\n     * Get star color from temperature\n     */\n    private getStarColor(temperature: number): { r: number; g: number; b: number } {\n        // Simplified blackbody color approximation\n        if (temperature > 25000) return { r: 155, g: 176, b: 255 }; // Blue\n        if (temperature > 10000) return { r: 202, g: 215, b: 255 }; // Blue-white\n        if (temperature > 7500) return { r: 248, g: 247, b: 255 };  // White\n        if (temperature > 6000) return { r: 255, g: 244, b: 234 };  // Yellow-white\n        if (temperature > 5000) return { r: 255, g: 214, b: 170 };  // Yellow\n        if (temperature > 3500) return { r: 255, g: 204, b: 111 };  // Orange\n        return { r: 255, g: 204, b: 111 }; // Red\n    }\n\n    /**\n     * Generate complete star systems\n     */\n    private async generateStarSystems(): Promise<void> {\n        this.logger.debug('Generating star systems...');\n        \n        let systemCount = 0;\n        for (const star of this.stars.values()) {\n            // Not all stars have planetary systems\n            if (this.random.next() < 0.7) { // 70% chance of planets\n                const system = await this.generateStarSystem(star);\n                this.starSystems.set(star.id, system);\n                systemCount++;\n            }\n        }\n        \n        this.logger.debug(`Generated ${systemCount} star systems`);\n    }\n\n    /**\n     * Generate a single star system\n     */\n    private async generateStarSystem(star: StarData): Promise<StarSystemData> {\n        const system: StarSystemData = {\n            id: star.id,\n            name: `${star.name} System`,\n            position: star.position,\n            star: star,\n            planets: [],\n            asteroidBelts: [],\n            habitableZoneInner: 0,\n            habitableZoneOuter: 0,\n            systemAge: star.age,\n            metallicity: star.metallicity\n        };\n        \n        // Calculate habitable zone\n        const luminosity = star.luminosity;\n        system.habitableZoneInner = Math.sqrt(luminosity / 1.1);\n        system.habitableZoneOuter = Math.sqrt(luminosity / 0.53);\n        \n        // Generate planets\n        const planetCount = Math.floor(this.random.range(0, 8));\n        let currentOrbit = this.random.range(0.1, 0.5); // Start close to star\n        \n        for (let i = 0; i < planetCount; i++) {\n            const planet = this.generatePlanet(star, system, i, currentOrbit);\n            system.planets.push(planet);\n            \n            // Space out orbits realistically\n            currentOrbit *= this.random.range(1.4, 2.0);\n        }\n        \n        // Generate asteroid belts\n        if (this.random.next() < 0.3) { // 30% chance\n            system.asteroidBelts.push({\n                id: `${star.id}_belt_1`,\n                innerRadius: currentOrbit,\n                outerRadius: currentOrbit * 1.5,\n                density: this.random.range(0.3, 0.8),\n                composition: this.random.choice(['rocky', 'metallic', 'icy'])\n            });\n        }\n        \n        return system;\n    }\n\n    /**\n     * Generate a planet\n     */\n    private generatePlanet(star: StarData, system: StarSystemData, index: number, orbitDistance: number): PlanetData {\n        const planetId = `${star.id}_planet_${index}`;\n        \n        // Determine planet type based on distance from star\n        let planetType: PlanetType;\n        if (orbitDistance < system.habitableZoneInner * 0.5) {\n            planetType = PlanetType.Volcanic;\n        } else if (orbitDistance > system.habitableZoneOuter * 2) {\n            planetType = this.random.choice([PlanetType.GasGiant, PlanetType.IceGiant, PlanetType.Frozen]);\n        } else if (orbitDistance >= system.habitableZoneInner && orbitDistance <= system.habitableZoneOuter) {\n            planetType = this.random.choice([PlanetType.Terrestrial, PlanetType.Ocean, PlanetType.Desert]);\n        } else {\n            planetType = this.random.choice([PlanetType.Terrestrial, PlanetType.Desert, PlanetType.Frozen]);\n        }\n        \n        // Calculate planet properties\n        const mass = this.generatePlanetMass(planetType);\n        const radius = this.calculatePlanetRadius(mass, planetType);\n        const temperature = this.calculatePlanetTemperature(star, orbitDistance);\n        \n        const planet: PlanetData = {\n            id: planetId,\n            name: `${star.name} ${this.numberToRoman(index + 1)}`,\n            starId: star.id,\n            orbitDistance: orbitDistance,\n            orbitPeriod: this.calculateOrbitPeriod(orbitDistance, star.mass),\n            radius: radius,\n            mass: mass,\n            type: planetType,\n            temperature: temperature,\n            hasAtmosphere: this.determineAtmosphere(planetType, mass, temperature),\n            hasRings: this.random.next() < 0.1, // 10% chance\n            moons: [],\n            surfaceType: this.determineSurfaceType(planetType, temperature),\n            surfaceColor: this.generateSurfaceColor(planetType),\n            hasWater: temperature > 273 && temperature < 373 && planetType !== PlanetType.GasGiant,\n            hasLife: false // Will be determined later\n        };\n        \n        // Determine atmosphere type\n        if (planet.hasAtmosphere) {\n            planet.atmosphereType = this.determineAtmosphereType(planetType, temperature);\n        }\n        \n        // Generate moons\n        const moonCount = this.generateMoonCount(planetType, mass);\n        for (let j = 0; j < moonCount; j++) {\n            planet.moons.push(this.generateMoon(planet, j));\n        }\n        \n        return planet;\n    }\n\n    /**\n     * Generate planet mass based on type\n     */\n    private generatePlanetMass(type: PlanetType): number {\n        switch (type) {\n            case PlanetType.GasGiant:\n                return this.random.range(50, 500); // Earth masses\n            case PlanetType.IceGiant:\n                return this.random.range(10, 50);\n            case PlanetType.Terrestrial:\n            case PlanetType.Ocean:\n            case PlanetType.Desert:\n            case PlanetType.Volcanic:\n            case PlanetType.Frozen:\n            case PlanetType.Toxic:\n                return this.random.range(0.1, 3.0);\n            default:\n                return 1.0;\n        }\n    }\n\n    /**\n     * Calculate planet radius from mass and type\n     */\n    private calculatePlanetRadius(mass: number, type: PlanetType): number {\n        if (type === PlanetType.GasGiant || type === PlanetType.IceGiant) {\n            return Math.pow(mass, 0.27); // Gas giants have different mass-radius relation\n        } else {\n            return Math.pow(mass, 0.27); // Rocky planets\n        }\n    }\n\n    /**\n     * Calculate planet temperature\n     */\n    private calculatePlanetTemperature(star: StarData, distance: number): number {\n        // Simplified temperature calculation\n        const solarConstant = star.luminosity / (distance * distance);\n        const baseTemp = 278.5 * Math.pow(solarConstant, 0.25); // Effective temperature\n        \n        // Add some randomness for atmosphere effects\n        return baseTemp * this.random.range(0.8, 1.2);\n    }\n\n    /**\n     * Calculate orbit period using Kepler's laws\n     */\n    private calculateOrbitPeriod(distance: number, starMass: number): number {\n        // T² ∝ a³/M (in Earth years)\n        return Math.sqrt(Math.pow(distance, 3) / starMass) * 365.25; // Convert to days\n    }\n\n    /**\n     * Generate other helper methods...\n     */\n    private determineAtmosphere(type: PlanetType, mass: number, temperature: number): boolean {\n        if (type === PlanetType.GasGiant || type === PlanetType.IceGiant) return true;\n        if (mass < 0.1) return false; // Too small to hold atmosphere\n        if (temperature > 2000) return false; // Too hot\n        return this.random.next() < 0.7;\n    }\n\n    private determineSurfaceType(type: PlanetType, temperature: number): SurfaceType {\n        switch (type) {\n            case PlanetType.Ocean: return SurfaceType.Ocean;\n            case PlanetType.Desert: return SurfaceType.Desert;\n            case PlanetType.Volcanic: return SurfaceType.Lava;\n            case PlanetType.Frozen: return SurfaceType.Ice;\n            case PlanetType.GasGiant:\n            case PlanetType.IceGiant: return SurfaceType.Gas;\n            case PlanetType.Toxic: return SurfaceType.Toxic;\n            default: return SurfaceType.Rocky;\n        }\n    }\n\n    private generateSurfaceColor(type: PlanetType): { r: number; g: number; b: number } {\n        switch (type) {\n            case PlanetType.Ocean: return { r: 0, g: 100, b: 200 };\n            case PlanetType.Desert: return { r: 200, g: 150, b: 100 };\n            case PlanetType.Volcanic: return { r: 150, g: 50, b: 0 };\n            case PlanetType.Frozen: return { r: 200, g: 220, b: 255 };\n            case PlanetType.GasGiant: return { r: 180, g: 140, b: 100 };\n            case PlanetType.IceGiant: return { r: 100, g: 150, b: 200 };\n            case PlanetType.Toxic: return { r: 100, g: 150, b: 50 };\n            default: return { r: 120, g: 100, b: 80 };\n        }\n    }\n\n    private determineAtmosphereType(type: PlanetType, temperature: number): AtmosphereType {\n        if (temperature > 1000) return AtmosphereType.Toxic;\n        if (type === PlanetType.GasGiant) return AtmosphereType.Hydrogen;\n        if (type === PlanetType.IceGiant) return AtmosphereType.Methane;\n        if (temperature < 200) return AtmosphereType.Thin;\n        return AtmosphereType.CarbonDioxide;\n    }\n\n    private generateMoonCount(planetType: PlanetType, mass: number): number {\n        if (planetType === PlanetType.GasGiant) return Math.floor(this.random.range(5, 20));\n        if (planetType === PlanetType.IceGiant) return Math.floor(this.random.range(2, 10));\n        if (mass > 1.0) return Math.floor(this.random.range(0, 3));\n        return this.random.next() < 0.3 ? 1 : 0;\n    }\n\n    private generateMoon(planet: PlanetData, index: number): MoonData {\n        return {\n            id: `${planet.id}_moon_${index}`,\n            name: `${planet.name} ${String.fromCharCode(97 + index)}`, // a, b, c...\n            planetId: planet.id,\n            orbitDistance: this.random.range(3, 20), // Planet radii\n            orbitPeriod: this.random.range(12, 168), // Hours\n            radius: this.random.range(0.1, 0.5), // Earth radii\n            mass: this.random.range(0.01, 0.2), // Earth masses\n            type: this.random.choice(['rocky', 'icy', 'captured_asteroid']),\n            tidallyLocked: this.random.next() < 0.8\n        };\n    }\n\n    private generateAnomalies(): void {\n        // Generate special objects and anomalies\n        // This will be implemented based on specific game requirements\n    }\n\n    private numberToRoman(num: number): string {\n        const values = [10, 9, 5, 4, 1];\n        const symbols = ['X', 'IX', 'V', 'IV', 'I'];\n        let result = '';\n        \n        for (let i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                result += symbols[i];\n                num -= values[i];\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Public API methods\n     */\n    getStarsInRadius(center: Vector2, radius: number): StarData[] {\n        return this.galaxyMap.filter(star => {\n            const distance = Math.sqrt(\n                Math.pow(star.position.x - center.x, 2) + \n                Math.pow(star.position.y - center.y, 2)\n            );\n            return distance <= radius;\n        });\n    }\n\n    getStarSystem(starId: string): StarSystemData | undefined {\n        return this.starSystems.get(starId);\n    }\n\n    getAllStars(): StarData[] {\n        return [...this.galaxyMap];\n    }\n\n    getAllSystems(): StarSystemData[] {\n        return Array.from(this.starSystems.values());\n    }\n\n    getGalaxyConfig(): GalaxyConfig {\n        return { ...this.config };\n    }\n}\n\n/**\n * Seeded random number generator for consistent generation\n */\nclass SeededRandom {\n    private seed: number;\n\n    constructor(seed: number) {\n        this.seed = seed;\n    }\n\n    next(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    range(min: number, max: number): number {\n        return min + this.next() * (max - min);\n    }\n\n    choice<T>(array: T[]): T {\n        return array[Math.floor(this.next() * array.length)];\n    }\n\n    integer(min: number, max: number): number {\n        return Math.floor(this.range(min, max + 1));\n    }\n}","/**\n * Galaxy Persistence System\n * Handles saving and loading of galaxy data with compression and chunked loading\n */\n\nimport { Logger } from '@utils/Logger';\nimport { \n    GalaxyConfig, \n    StarData, \n    StarSystemData, \n    PlanetData,\n    GalaxyGenerator \n} from './GalaxyGenerator';\nimport { Vector2 } from '@core/Renderer';\nimport { Platform, PlatformDetector } from '@utils/Platform';\n\nexport interface GalaxySaveData {\n    version: string;\n    timestamp: number;\n    config: GalaxyConfig;\n    playerData: PlayerGalaxyData;\n    \n    // Galaxy data\n    stars: CompressedStarData[];\n    systems: CompressedSystemData[];\n    \n    // Discovery and exploration data\n    exploredSystems: string[];\n    discoveredPlanets: string[];\n    visitedLocations: VisitedLocation[];\n    \n    // Player progression in galaxy\n    reputation: Map<string, number>; // Faction reputation\n    tradeRoutes: TradeRoute[];\n}\n\nexport interface PlayerGalaxyData {\n    currentSystemId: string;\n    homeSystemId: string;\n    totalSystemsVisited: number;\n    totalPlanetsExplored: number;\n    totalDistanceTraveled: number; // Light years\n    galaxyDiscoveryProgress: number; // 0-1\n}\n\nexport interface CompressedStarData {\n    id: string;\n    name: string;\n    pos: [number, number]; // [x, y] position\n    type: string; // StarType\n    mass: number;\n    temp: number; // Temperature\n    color: [number, number, number]; // [r, g, b]\n}\n\nexport interface CompressedSystemData {\n    id: string;\n    planets: CompressedPlanetData[];\n    explored: boolean;\n    lastVisited?: number; // Timestamp\n}\n\nexport interface CompressedPlanetData {\n    id: string;\n    name: string;\n    type: string; // PlanetType\n    orbit: number; // Orbit distance\n    radius: number;\n    temp: number; // Temperature\n    hasAtmo: boolean;\n    moons: number; // Moon count\n    color: [number, number, number]; // [r, g, b]\n}\n\nexport interface VisitedLocation {\n    systemId: string;\n    planetId?: string;\n    timestamp: number;\n    coordinates: Vector2;\n    notes?: string;\n}\n\nexport interface TradeRoute {\n    id: string;\n    fromSystemId: string;\n    toSystemId: string;\n    commodity: string;\n    profitMargin: number;\n    discovered: boolean;\n}\n\nexport interface ChunkLoadOptions {\n    center: Vector2;\n    radius: number;\n    maxSystems: number;\n    includeUnexplored: boolean;\n}\n\nexport class GalaxyPersistence {\n    private platform: Platform;\n    private logger: Logger;\n    \n    // Cached data for performance\n    private cachedSaveData: GalaxySaveData | null = null;\n    private loadedChunks: Map<string, StarSystemData[]> = new Map();\n    private compressionEnabled: boolean;\n\n    constructor() {\n        this.platform = PlatformDetector.detect();\n        this.logger = new Logger('GalaxyPersistence');\n        this.compressionEnabled = true; // Enable compression by default\n        \n        this.logger.info('💾 Galaxy persistence system initialized', {\n            platform: this.platform,\n            compressionEnabled: this.compressionEnabled\n        });\n    }\n\n    /**\n     * Save complete galaxy data\n     */\n    async saveGalaxy(\n        generator: GalaxyGenerator,\n        playerData: PlayerGalaxyData,\n        explorationData: {\n            exploredSystems: string[];\n            discoveredPlanets: string[];\n            visitedLocations: VisitedLocation[];\n        }\n    ): Promise<void> {\n        this.logger.info('💾 Saving galaxy data...');\n        \n        const startTime = performance.now();\n        \n        try {\n            // Prepare save data\n            const saveData: GalaxySaveData = {\n                version: '2.0.0',\n                timestamp: Date.now(),\n                config: generator.getGalaxyConfig(),\n                playerData: { ...playerData },\n                stars: [],\n                systems: [],\n                exploredSystems: [...explorationData.exploredSystems],\n                discoveredPlanets: [...explorationData.discoveredPlanets],\n                visitedLocations: [...explorationData.visitedLocations],\n                reputation: new Map(),\n                tradeRoutes: []\n            };\n            \n            // Compress galaxy data\n            saveData.stars = this.compressStarData(generator.getAllStars());\n            saveData.systems = this.compressSystemData(generator.getAllSystems());\n            \n            // Cache the save data\n            this.cachedSaveData = saveData;\n            \n            // Save to storage based on platform\n            await this.saveToStorage(saveData);\n            \n            const endTime = performance.now();\n            this.logger.info(`✅ Galaxy saved successfully in ${(endTime - startTime).toFixed(2)}ms`, {\n                stars: saveData.stars.length,\n                systems: saveData.systems.length,\n                size: this.calculateSaveSize(saveData)\n            });\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to save galaxy', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Load complete galaxy data\n     */\n    async loadGalaxy(): Promise<{\n        generator: GalaxyGenerator;\n        playerData: PlayerGalaxyData;\n        explorationData: {\n            exploredSystems: string[];\n            discoveredPlanets: string[];\n            visitedLocations: VisitedLocation[];\n        };\n    } | null> {\n        this.logger.info('📁 Loading galaxy data...');\n        \n        const startTime = performance.now();\n        \n        try {\n            // Load from storage\n            const saveData = await this.loadFromStorage();\n            if (!saveData) {\n                this.logger.warn('No galaxy save data found');\n                return null;\n            }\n            \n            // Validate save data\n            this.validateSaveData(saveData);\n            \n            // Create generator with saved config\n            const generator = new GalaxyGenerator(saveData.config);\n            \n            // Decompress and restore galaxy data\n            await this.restoreGalaxyData(generator, saveData);\n            \n            const endTime = performance.now();\n            this.logger.info(`✅ Galaxy loaded successfully in ${(endTime - startTime).toFixed(2)}ms`);\n            \n            return {\n                generator,\n                playerData: saveData.playerData,\n                explorationData: {\n                    exploredSystems: saveData.exploredSystems,\n                    discoveredPlanets: saveData.discoveredPlanets,\n                    visitedLocations: saveData.visitedLocations\n                }\n            };\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to load galaxy', error);\n            return null;\n        }\n    }\n\n    /**\n     * Load galaxy chunk for specific region\n     */\n    async loadGalaxyChunk(\n        generator: GalaxyGenerator,\n        options: ChunkLoadOptions\n    ): Promise<StarSystemData[]> {\n        const chunkKey = this.getChunkKey(options.center, options.radius);\n        \n        // Check if chunk is already loaded\n        if (this.loadedChunks.has(chunkKey)) {\n            return this.loadedChunks.get(chunkKey)!;\n        }\n        \n        this.logger.debug(`Loading galaxy chunk: ${chunkKey}`);\n        \n        try {\n            // Get stars in radius\n            const starsInRegion = generator.getStarsInRadius(options.center, options.radius);\n            \n            // Limit to max systems\n            const limitedStars = starsInRegion.slice(0, options.maxSystems);\n            \n            // Load systems for these stars\n            const systems: StarSystemData[] = [];\n            for (const star of limitedStars) {\n                const system = generator.getStarSystem(star.id);\n                if (system) {\n                    // Check if should include unexplored systems\n                    if (options.includeUnexplored || this.isSystemExplored(system.id)) {\n                        systems.push(system);\n                    }\n                }\n            }\n            \n            // Cache the chunk\n            this.loadedChunks.set(chunkKey, systems);\n            \n            this.logger.debug(`Loaded chunk with ${systems.length} systems`);\n            return systems;\n            \n        } catch (error) {\n            this.logger.error(`Failed to load galaxy chunk: ${chunkKey}`, error);\n            return [];\n        }\n    }\n\n    /**\n     * Compress star data for storage\n     */\n    private compressStarData(stars: StarData[]): CompressedStarData[] {\n        return stars.map(star => ({\n            id: star.id,\n            name: star.name,\n            pos: [Math.round(star.position.x), Math.round(star.position.y)],\n            type: star.type,\n            mass: Math.round(star.mass * 100) / 100, // 2 decimal places\n            temp: Math.round(star.temperature),\n            color: [star.color.r, star.color.g, star.color.b]\n        }));\n    }\n\n    /**\n     * Compress system data for storage\n     */\n    private compressSystemData(systems: StarSystemData[]): CompressedSystemData[] {\n        return systems.map(system => ({\n            id: system.id,\n            planets: this.compressPlanetData(system.planets),\n            explored: this.isSystemExplored(system.id)\n        }));\n    }\n\n    /**\n     * Compress planet data for storage\n     */\n    private compressPlanetData(planets: PlanetData[]): CompressedPlanetData[] {\n        return planets.map(planet => ({\n            id: planet.id,\n            name: planet.name,\n            type: planet.type,\n            orbit: Math.round(planet.orbitDistance * 100) / 100,\n            radius: Math.round(planet.radius * 100) / 100,\n            temp: Math.round(planet.temperature),\n            hasAtmo: planet.hasAtmosphere,\n            moons: planet.moons.length,\n            color: [planet.surfaceColor.r, planet.surfaceColor.g, planet.surfaceColor.b]\n        }));\n    }\n\n    /**\n     * Restore galaxy data from compressed format\n     */\n    private async restoreGalaxyData(generator: GalaxyGenerator, saveData: GalaxySaveData): Promise<void> {\n        // Note: This is a simplified restoration process\n        // In a full implementation, we would need to properly reconstruct\n        // the galaxy data structures from compressed format\n        \n        this.logger.debug('Restoring galaxy data from compressed format...');\n        \n        // For now, regenerate the galaxy with the same seed\n        // This ensures consistency while avoiding complex decompression\n        await generator.generateGalaxy();\n        \n        this.logger.debug('Galaxy data restoration completed');\n    }\n\n    /**\n     * Save to storage based on platform\n     */\n    private async saveToStorage(saveData: GalaxySaveData): Promise<void> {\n        const serialized = JSON.stringify(saveData);\n        \n        switch (this.platform) {\n            case Platform.Desktop:\n            case Platform.Web:\n            case Platform.Mobile:\n                // Use localStorage/IndexedDB\n                await this.saveToWebStorage(serialized);\n                break;\n                \n            case Platform.Tauri:\n                // Use file system through Tauri API\n                await this.saveToFileSystem(serialized);\n                break;\n                \n            case Platform.Cordova:\n                // Use Cordova file plugin\n                await this.saveToCordovaFile(serialized);\n                break;\n                \n            default:\n                throw new Error(`Unsupported platform for saving: ${this.platform}`);\n        }\n    }\n\n    /**\n     * Load from storage based on platform\n     */\n    private async loadFromStorage(): Promise<GalaxySaveData | null> {\n        switch (this.platform) {\n            case Platform.Desktop:\n            case Platform.Web:\n            case Platform.Mobile:\n                return await this.loadFromWebStorage();\n                \n            case Platform.Tauri:\n                return await this.loadFromFileSystem();\n                \n            case Platform.Cordova:\n                return await this.loadFromCordovaFile();\n                \n            default:\n                throw new Error(`Unsupported platform for loading: ${this.platform}`);\n        }\n    }\n\n    /**\n     * Save to web storage (localStorage/IndexedDB)\n     */\n    private async saveToWebStorage(data: string): Promise<void> {\n        try {\n            // Try IndexedDB first for larger storage capacity\n            if ('indexedDB' in window) {\n                await this.saveToIndexedDB(data);\n            } else {\n                // Fallback to localStorage\n                localStorage.setItem('spaceExplorer_galaxy', data);\n            }\n        } catch (error) {\n            // If IndexedDB fails, try localStorage\n            try {\n                localStorage.setItem('spaceExplorer_galaxy', data);\n            } catch (localStorageError) {\n                throw new Error('Failed to save to both IndexedDB and localStorage');\n            }\n        }\n    }\n\n    /**\n     * Load from web storage\n     */\n    private async loadFromWebStorage(): Promise<GalaxySaveData | null> {\n        try {\n            // Try IndexedDB first\n            if ('indexedDB' in window) {\n                const data = await this.loadFromIndexedDB();\n                if (data) return data;\n            }\n            \n            // Fallback to localStorage\n            const stored = localStorage.getItem('spaceExplorer_galaxy');\n            return stored ? JSON.parse(stored) : null;\n            \n        } catch (error) {\n            this.logger.error('Failed to load from web storage', error);\n            return null;\n        }\n    }\n\n    /**\n     * Save to IndexedDB for larger storage capacity\n     */\n    private async saveToIndexedDB(data: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open('SpaceExplorerDB', 1);\n            \n            request.onerror = () => reject(request.error);\n            \n            request.onupgradeneeded = () => {\n                const db = request.result;\n                if (!db.objectStoreNames.contains('galaxy')) {\n                    db.createObjectStore('galaxy');\n                }\n            };\n            \n            request.onsuccess = () => {\n                const db = request.result;\n                const transaction = db.transaction(['galaxy'], 'readwrite');\n                const store = transaction.objectStore('galaxy');\n                \n                const putRequest = store.put(data, 'galaxyData');\n                putRequest.onsuccess = () => resolve();\n                putRequest.onerror = () => reject(putRequest.error);\n            };\n        });\n    }\n\n    /**\n     * Load from IndexedDB\n     */\n    private async loadFromIndexedDB(): Promise<GalaxySaveData | null> {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open('SpaceExplorerDB', 1);\n            \n            request.onerror = () => resolve(null);\n            \n            request.onsuccess = () => {\n                const db = request.result;\n                \n                if (!db.objectStoreNames.contains('galaxy')) {\n                    resolve(null);\n                    return;\n                }\n                \n                const transaction = db.transaction(['galaxy'], 'readonly');\n                const store = transaction.objectStore('galaxy');\n                \n                const getRequest = store.get('galaxyData');\n                getRequest.onsuccess = () => {\n                    const data = getRequest.result;\n                    resolve(data ? JSON.parse(data) : null);\n                };\n                getRequest.onerror = () => resolve(null);\n            };\n        });\n    }\n\n    /**\n     * Save to file system (Tauri)\n     */\n    private async saveToFileSystem(data: string): Promise<void> {\n        // Placeholder for Tauri file system API\n        // This would use the Tauri fs API when available\n        this.logger.warn('File system save not implemented yet');\n        throw new Error('File system save not implemented');\n    }\n\n    /**\n     * Load from file system (Tauri)\n     */\n    private async loadFromFileSystem(): Promise<GalaxySaveData | null> {\n        // Placeholder for Tauri file system API\n        this.logger.warn('File system load not implemented yet');\n        return null;\n    }\n\n    /**\n     * Save to Cordova file\n     */\n    private async saveToCordovaFile(data: string): Promise<void> {\n        // Placeholder for Cordova file plugin\n        this.logger.warn('Cordova file save not implemented yet');\n        throw new Error('Cordova file save not implemented');\n    }\n\n    /**\n     * Load from Cordova file\n     */\n    private async loadFromCordovaFile(): Promise<GalaxySaveData | null> {\n        // Placeholder for Cordova file plugin\n        this.logger.warn('Cordova file load not implemented yet');\n        return null;\n    }\n\n    /**\n     * Validate save data integrity\n     */\n    private validateSaveData(saveData: GalaxySaveData): void {\n        if (!saveData.version) {\n            throw new Error('Invalid save data: missing version');\n        }\n        \n        if (!saveData.config || !saveData.stars || !saveData.systems) {\n            throw new Error('Invalid save data: missing core data');\n        }\n        \n        // Version compatibility check\n        const [major] = saveData.version.split('.').map(Number);\n        if (major !== 2) {\n            throw new Error(`Incompatible save version: ${saveData.version}`);\n        }\n    }\n\n    /**\n     * Calculate save data size\n     */\n    private calculateSaveSize(saveData: GalaxySaveData): string {\n        const serialized = JSON.stringify(saveData);\n        const bytes = new Blob([serialized]).size;\n        \n        if (bytes < 1024) return `${bytes} B`;\n        if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n        return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    }\n\n    /**\n     * Generate chunk key for caching\n     */\n    private getChunkKey(center: Vector2, radius: number): string {\n        const x = Math.round(center.x / 1000) * 1000;\n        const y = Math.round(center.y / 1000) * 1000;\n        const r = Math.round(radius / 100) * 100;\n        return `chunk_${x}_${y}_${r}`;\n    }\n\n    /**\n     * Check if system is explored\n     */\n    private isSystemExplored(systemId: string): boolean {\n        if (!this.cachedSaveData) return false;\n        return this.cachedSaveData.exploredSystems.includes(systemId);\n    }\n\n    /**\n     * Clear cached data\n     */\n    clearCache(): void {\n        this.cachedSaveData = null;\n        this.loadedChunks.clear();\n        this.logger.debug('Galaxy persistence cache cleared');\n    }\n\n    /**\n     * Get storage statistics\n     */\n    getStorageStats(): {\n        cacheSize: number;\n        loadedChunks: number;\n        lastSaveTime?: number;\n    } {\n        return {\n            cacheSize: this.cachedSaveData ? 1 : 0,\n            loadedChunks: this.loadedChunks.size,\n            lastSaveTime: this.cachedSaveData?.timestamp\n        };\n    }\n\n    /**\n     * Export galaxy data for sharing/backup\n     */\n    async exportGalaxy(): Promise<string> {\n        if (!this.cachedSaveData) {\n            throw new Error('No galaxy data to export');\n        }\n        \n        return JSON.stringify(this.cachedSaveData, null, 2);\n    }\n\n    /**\n     * Import galaxy data from backup\n     */\n    async importGalaxy(data: string): Promise<void> {\n        try {\n            const saveData: GalaxySaveData = JSON.parse(data);\n            this.validateSaveData(saveData);\n            \n            await this.saveToStorage(saveData);\n            this.cachedSaveData = saveData;\n            \n            this.logger.info('Galaxy data imported successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to import galaxy data', error);\n            throw error;\n        }\n    }\n}","/**\n * Galaxy Manager - Integration Layer\n * Provides unified interface for galaxy generation, persistence, and exploration\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\nimport { \n    GalaxyGenerator, \n    GalaxyConfig, \n    StarData, \n    StarSystemData,\n    PlanetData \n} from './GalaxyGenerator';\nimport { \n    GalaxyPersistence, \n    PlayerGalaxyData,\n    VisitedLocation,\n    ChunkLoadOptions \n} from './GalaxyPersistence';\n\nexport interface ExplorationData {\n    exploredSystems: Set<string>;\n    discoveredPlanets: Set<string>;\n    visitedLocations: VisitedLocation[];\n    currentSystemId: string;\n    homeSystemId: string;\n}\n\nexport interface GalaxyManagerConfig {\n    enableAutoSave: boolean;\n    autoSaveInterval: number; // milliseconds\n    chunkLoadRadius: number; // light years\n    maxLoadedSystems: number;\n    galaxyConfig?: Partial<GalaxyConfig>;\n}\n\nexport interface GalaxyStats {\n    totalStars: number;\n    totalSystems: number;\n    exploredSystems: number;\n    discoveredPlanets: number;\n    systemsVisited: number;\n    distanceTraveled: number;\n    currentSystemName: string;\n    galaxySize: number;\n    explorationProgress: number; // 0-1\n}\n\nexport class GalaxyManager {\n    private generator: GalaxyGenerator;\n    private persistence: GalaxyPersistence;\n    private config: GalaxyManagerConfig;\n    \n    // Galaxy state\n    private explorationData: ExplorationData;\n    private playerData: PlayerGalaxyData;\n    private isInitialized = false;\n    \n    // Runtime data\n    private loadedSystems: Map<string, StarSystemData> = new Map();\n    private nearbyStars: StarData[] = [];\n    private currentSystem: StarSystemData | null = null;\n    \n    // Auto-save\n    private autoSaveTimer: number | null = null;\n    \n    private logger: Logger;\n\n    constructor(config: Partial<GalaxyManagerConfig> = {}) {\n        this.logger = new Logger('GalaxyManager');\n        \n        // Default configuration\n        this.config = {\n            enableAutoSave: true,\n            autoSaveInterval: 60000, // 1 minute\n            chunkLoadRadius: 500, // 500 light years\n            maxLoadedSystems: 100,\n            galaxyConfig: {\n                seed: Math.floor(Math.random() * 1000000),\n                starCount: 800, // Reduced for better performance\n                size: 30000 // 30,000 light years\n            },\n            ...config\n        };\n        \n        // Initialize components\n        this.generator = new GalaxyGenerator(this.config.galaxyConfig);\n        this.persistence = new GalaxyPersistence();\n        \n        // Initialize exploration data\n        this.explorationData = {\n            exploredSystems: new Set(),\n            discoveredPlanets: new Set(),\n            visitedLocations: [],\n            currentSystemId: '',\n            homeSystemId: ''\n        };\n        \n        // Initialize player data\n        this.playerData = {\n            currentSystemId: '',\n            homeSystemId: '',\n            totalSystemsVisited: 0,\n            totalPlanetsExplored: 0,\n            totalDistanceTraveled: 0,\n            galaxyDiscoveryProgress: 0\n        };\n        \n        this.logger.info('🌌 Galaxy manager initialized', {\n            config: this.config\n        });\n    }\n\n    /**\n     * Initialize the galaxy (load existing or generate new)\n     */\n    async initialize(): Promise<void> {\n        this.logger.info('🚀 Initializing galaxy...');\n        \n        try {\n            // Try to load existing galaxy\n            const savedData = await this.persistence.loadGalaxy();\n            \n            if (savedData) {\n                // Load from save\n                this.logger.info('📁 Loading existing galaxy...');\n                this.generator = savedData.generator;\n                this.playerData = savedData.playerData;\n                \n                // Convert arrays back to Sets\n                this.explorationData = {\n                    exploredSystems: new Set(savedData.explorationData.exploredSystems),\n                    discoveredPlanets: new Set(savedData.explorationData.discoveredPlanets),\n                    visitedLocations: savedData.explorationData.visitedLocations,\n                    currentSystemId: savedData.playerData.currentSystemId,\n                    homeSystemId: savedData.playerData.homeSystemId\n                };\n                \n            } else {\n                // Generate new galaxy\n                this.logger.info('🔄 Generating new galaxy...');\n                await this.generator.generateGalaxy();\n                \n                // Set up initial player data\n                await this.setupNewGame();\n            }\n            \n            // Load current system and nearby area\n            await this.loadCurrentArea();\n            \n            // Setup auto-save\n            if (this.config.enableAutoSave) {\n                this.setupAutoSave();\n            }\n            \n            this.isInitialized = true;\n            this.logger.info('✅ Galaxy initialization completed');\n            \n        } catch (error) {\n            this.logger.error('❌ Galaxy initialization failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Setup new game with starting system\n     */\n    private async setupNewGame(): Promise<void> {\n        // Find a suitable starting system near galactic center\n        const centerStars = this.generator.getStarsInRadius({ x: 0, y: 0 }, 5000);\n        \n        // Find a G-type star with planets\n        let startingSystem: StarSystemData | null = null;\n        for (const star of centerStars) {\n            if (star.type === 'G') { // Sun-like star\n                const system = this.generator.getStarSystem(star.id);\n                if (system && system.planets.length > 0) {\n                    startingSystem = system;\n                    break;\n                }\n            }\n        }\n        \n        // Fallback to any system with planets\n        if (!startingSystem) {\n            for (const star of centerStars) {\n                const system = this.generator.getStarSystem(star.id);\n                if (system && system.planets.length > 0) {\n                    startingSystem = system;\n                    break;\n                }\n            }\n        }\n        \n        if (!startingSystem) {\n            throw new Error('Could not find suitable starting system');\n        }\n        \n        // Set starting system\n        this.explorationData.currentSystemId = startingSystem.id;\n        this.explorationData.homeSystemId = startingSystem.id;\n        this.playerData.currentSystemId = startingSystem.id;\n        this.playerData.homeSystemId = startingSystem.id;\n        \n        // Mark as explored\n        this.exploreSystem(startingSystem.id);\n        \n        this.logger.info(`🏠 Starting system set: ${startingSystem.name}`);\n    }\n\n    /**\n     * Load current area around player\n     */\n    private async loadCurrentArea(): Promise<void> {\n        if (!this.explorationData.currentSystemId) return;\n        \n        // Get current system\n        this.currentSystem = this.generator.getStarSystem(this.explorationData.currentSystemId) || null;\n        if (!this.currentSystem) {\n            this.logger.error('Current system not found');\n            return;\n        }\n        \n        // Load nearby systems\n        const chunkOptions: ChunkLoadOptions = {\n            center: this.currentSystem.position,\n            radius: this.config.chunkLoadRadius,\n            maxSystems: this.config.maxLoadedSystems,\n            includeUnexplored: true\n        };\n        \n        const nearbySystems = await this.persistence.loadGalaxyChunk(this.generator, chunkOptions);\n        \n        // Update loaded systems\n        this.loadedSystems.clear();\n        for (const system of nearbySystems) {\n            this.loadedSystems.set(system.id, system);\n        }\n        \n        // Get nearby stars for rendering\n        this.nearbyStars = this.generator.getStarsInRadius(\n            this.currentSystem.position,\n            this.config.chunkLoadRadius / 2\n        );\n        \n        this.logger.debug(`Loaded ${nearbySystems.length} systems and ${this.nearbyStars.length} stars`);\n    }\n\n    /**\n     * Travel to a new system\n     */\n    async travelToSystem(systemId: string): Promise<boolean> {\n        const targetSystem = this.generator.getStarSystem(systemId);\n        if (!targetSystem) {\n            this.logger.error(`System not found: ${systemId}`);\n            return false;\n        }\n        \n        // Calculate travel distance\n        const currentPos = this.currentSystem?.position || { x: 0, y: 0 };\n        const distance = Math.sqrt(\n            Math.pow(targetSystem.position.x - currentPos.x, 2) +\n            Math.pow(targetSystem.position.y - currentPos.y, 2)\n        );\n        \n        // Update player data\n        this.explorationData.currentSystemId = systemId;\n        this.playerData.currentSystemId = systemId;\n        this.playerData.totalDistanceTraveled += distance;\n        \n        // Add to visited systems if not already visited\n        if (!this.explorationData.exploredSystems.has(systemId)) {\n            this.playerData.totalSystemsVisited++;\n        }\n        \n        // Explore the system\n        this.exploreSystem(systemId);\n        \n        // Add to visited locations\n        this.explorationData.visitedLocations.push({\n            systemId: systemId,\n            timestamp: Date.now(),\n            coordinates: targetSystem.position\n        });\n        \n        // Reload area around new system\n        await this.loadCurrentArea();\n        \n        this.logger.info(`🚀 Traveled to ${targetSystem.name} (${distance.toFixed(1)} LY)`);\n        return true;\n    }\n\n    /**\n     * Explore a system (mark as explored)\n     */\n    exploreSystem(systemId: string): void {\n        if (!this.explorationData.exploredSystems.has(systemId)) {\n            this.explorationData.exploredSystems.add(systemId);\n            \n            // Explore all planets in the system\n            const system = this.generator.getStarSystem(systemId);\n            if (system) {\n                for (const planet of system.planets) {\n                    this.discoverPlanet(planet.id);\n                }\n            }\n            \n            this.updateExplorationProgress();\n            this.logger.debug(`System explored: ${systemId}`);\n        }\n    }\n\n    /**\n     * Discover a planet\n     */\n    discoverPlanet(planetId: string): void {\n        if (!this.explorationData.discoveredPlanets.has(planetId)) {\n            this.explorationData.discoveredPlanets.add(planetId);\n            this.playerData.totalPlanetsExplored++;\n            \n            this.logger.debug(`Planet discovered: ${planetId}`);\n        }\n    }\n\n    /**\n     * Update exploration progress\n     */\n    private updateExplorationProgress(): void {\n        const totalSystems = this.generator.getAllSystems().length;\n        const exploredSystems = this.explorationData.exploredSystems.size;\n        \n        this.playerData.galaxyDiscoveryProgress = totalSystems > 0 ? exploredSystems / totalSystems : 0;\n    }\n\n    /**\n     * Get nearby systems for rendering\n     */\n    getNearbyStars(): StarData[] {\n        return [...this.nearbyStars];\n    }\n\n    /**\n     * Get loaded systems\n     */\n    getLoadedSystems(): StarSystemData[] {\n        return Array.from(this.loadedSystems.values());\n    }\n\n    /**\n     * Get current system\n     */\n    getCurrentSystem(): StarSystemData | null {\n        return this.currentSystem;\n    }\n\n    /**\n     * Get system by ID\n     */\n    getSystem(systemId: string): StarSystemData | undefined {\n        return this.loadedSystems.get(systemId) || this.generator.getStarSystem(systemId);\n    }\n\n    /**\n     * Find systems within radius\n     */\n    findSystemsInRadius(center: Vector2, radius: number): StarSystemData[] {\n        const nearbyStars = this.generator.getStarsInRadius(center, radius);\n        const systems: StarSystemData[] = [];\n        \n        for (const star of nearbyStars) {\n            const system = this.generator.getStarSystem(star.id);\n            if (system) {\n                systems.push(system);\n            }\n        }\n        \n        return systems;\n    }\n\n    /**\n     * Check if system is explored\n     */\n    isSystemExplored(systemId: string): boolean {\n        return this.explorationData.exploredSystems.has(systemId);\n    }\n\n    /**\n     * Check if planet is discovered\n     */\n    isPlanetDiscovered(planetId: string): boolean {\n        return this.explorationData.discoveredPlanets.has(planetId);\n    }\n\n    /**\n     * Get galaxy statistics\n     */\n    getGalaxyStats(): GalaxyStats {\n        const totalStars = this.generator.getAllStars().length;\n        const allSystems = this.generator.getAllSystems();\n        const totalSystems = allSystems.length;\n        const totalPlanets = allSystems.reduce((sum, system) => sum + system.planets.length, 0);\n        \n        return {\n            totalStars: totalStars,\n            totalSystems: totalSystems,\n            exploredSystems: this.explorationData.exploredSystems.size,\n            discoveredPlanets: this.explorationData.discoveredPlanets.size,\n            systemsVisited: this.playerData.totalSystemsVisited,\n            distanceTraveled: this.playerData.totalDistanceTraveled,\n            currentSystemName: this.currentSystem?.name || 'Unknown',\n            galaxySize: this.generator.getGalaxyConfig().size,\n            explorationProgress: this.playerData.galaxyDiscoveryProgress\n        };\n    }\n\n    /**\n     * Save galaxy state\n     */\n    async saveGalaxy(): Promise<void> {\n        if (!this.isInitialized) return;\n        \n        try {\n            // Convert Sets to Arrays for serialization\n            const explorationData = {\n                exploredSystems: Array.from(this.explorationData.exploredSystems),\n                discoveredPlanets: Array.from(this.explorationData.discoveredPlanets),\n                visitedLocations: this.explorationData.visitedLocations\n            };\n            \n            await this.persistence.saveGalaxy(\n                this.generator,\n                this.playerData,\n                explorationData\n            );\n            \n            this.logger.debug('Galaxy saved successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to save galaxy', error);\n        }\n    }\n\n    /**\n     * Setup auto-save timer\n     */\n    private setupAutoSave(): void {\n        if (this.autoSaveTimer) {\n            clearInterval(this.autoSaveTimer);\n        }\n        \n        this.autoSaveTimer = window.setInterval(async () => {\n            await this.saveGalaxy();\n        }, this.config.autoSaveInterval);\n        \n        this.logger.debug(`Auto-save enabled (${this.config.autoSaveInterval}ms interval)`);\n    }\n\n    /**\n     * Get player galaxy data\n     */\n    getPlayerData(): PlayerGalaxyData {\n        return { ...this.playerData };\n    }\n\n    /**\n     * Get exploration data\n     */\n    getExplorationData(): ExplorationData {\n        return {\n            exploredSystems: new Set(this.explorationData.exploredSystems),\n            discoveredPlanets: new Set(this.explorationData.discoveredPlanets),\n            visitedLocations: [...this.explorationData.visitedLocations],\n            currentSystemId: this.explorationData.currentSystemId,\n            homeSystemId: this.explorationData.homeSystemId\n        };\n    }\n\n    /**\n     * Export galaxy for sharing\n     */\n    async exportGalaxy(): Promise<string> {\n        return await this.persistence.exportGalaxy();\n    }\n\n    /**\n     * Import galaxy from backup\n     */\n    async importGalaxy(data: string): Promise<void> {\n        await this.persistence.importGalaxy(data);\n        \n        // Reinitialize after import\n        this.isInitialized = false;\n        await this.initialize();\n    }\n\n    /**\n     * Get storage statistics\n     */\n    getStorageStats() {\n        return this.persistence.getStorageStats();\n    }\n\n    /**\n     * Search for systems by name\n     */\n    searchSystems(query: string): StarSystemData[] {\n        const allSystems = this.generator.getAllSystems();\n        const lowercaseQuery = query.toLowerCase();\n        \n        return allSystems.filter(system => \n            system.name.toLowerCase().includes(lowercaseQuery) ||\n            system.star.name.toLowerCase().includes(lowercaseQuery)\n        ).slice(0, 20); // Limit results\n    }\n\n    /**\n     * Get distance between two systems\n     */\n    getSystemDistance(systemId1: string, systemId2: string): number {\n        const system1 = this.getSystem(systemId1);\n        const system2 = this.getSystem(systemId2);\n        \n        if (!system1 || !system2) return -1;\n        \n        return Math.sqrt(\n            Math.pow(system2.position.x - system1.position.x, 2) +\n            Math.pow(system2.position.y - system1.position.y, 2)\n        );\n    }\n\n    /**\n     * Get home system\n     */\n    getHomeSystem(): StarSystemData | null {\n        if (!this.explorationData.homeSystemId) return null;\n        return this.getSystem(this.explorationData.homeSystemId) || null;\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig: Partial<GalaxyManagerConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Restart auto-save if interval changed\n        if (newConfig.autoSaveInterval && this.config.enableAutoSave) {\n            this.setupAutoSave();\n        }\n        \n        this.logger.debug('Galaxy manager configuration updated');\n    }\n\n    /**\n     * Cleanup resources\n     */\n    async cleanup(): Promise<void> {\n        // Save before cleanup\n        await this.saveGalaxy();\n        \n        // Clear auto-save timer\n        if (this.autoSaveTimer) {\n            clearInterval(this.autoSaveTimer);\n            this.autoSaveTimer = null;\n        }\n        \n        // Clear cached data\n        this.loadedSystems.clear();\n        this.nearbyStars = [];\n        this.persistence.clearCache();\n        \n        this.logger.info('🧹 Galaxy manager cleanup completed');\n    }\n\n    /**\n     * Check if galaxy is initialized\n     */\n    isGalaxyInitialized(): boolean {\n        return this.isInitialized;\n    }\n}","/**\n * Retro Cockpit Status Bar\n * 5-panel status bar with CRT monitor styling and interactive controls\n */\n\nimport { Renderer, Color } from '@core/Renderer';\nimport { InputManager } from '@core/InputManager';\nimport { SystemStatus, PowerAllocation, DamageReport, ShipSection } from '@entities/ShipSystems';\nimport { Logger } from '@utils/Logger';\nimport { Vector2 } from '@core/Renderer';\n\nexport interface StatusBarConfig {\n    screenWidth: number;\n    screenHeight: number;\n    panelHeight: number;\n    panelSpacing: number;\n    enableInteraction: boolean;\n    crtEffects: boolean;\n}\n\nexport interface PanelInteraction {\n    onPowerAllocationChange?: (allocation: Partial<PowerAllocation>) => void;\n    onSystemToggle?: (system: string, state: boolean) => void;\n    onRepairRequest?: (section: ShipSection, damageIndex: number) => void;\n    onInventoryOpen?: () => void;\n    onCodexOpen?: () => void;\n    onResearchOpen?: () => void;\n    onCrewOpen?: () => void;\n    onRadarZoom?: (zoomLevel: number) => void;\n    onGalaxyMapOpen?: () => void;\n}\n\ninterface PanelArea {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    title: string;\n}\n\ninterface InteractiveElement {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    type: 'button' | 'slider' | 'toggle' | 'monitor';\n    id: string;\n    value?: number; // For sliders\n    state?: boolean; // For toggles\n    label: string;\n}\n\nexport class CockpitStatusBar {\n    private config: StatusBarConfig;\n    private panels: PanelArea[] = [];\n    private interactiveElements: Map<string, InteractiveElement> = new Map();\n    private interactions: PanelInteraction;\n    \n    // Visual state\n    private flickerTimer = 0;\n    private scanlineOffset = 0;\n    private glitchTimer = 0;\n    \n    // Input handling\n    private hoveredElement: string | null = null;\n    private selectedElement: string | null = null;\n    private isDragging = false;\n    \n    // Data display\n    private systemStatus: SystemStatus;\n    private damageReports: Map<ShipSection, DamageReport[]> = new Map();\n    private cargoLoad = 0;\n    private radarZoom = 1.0;\n    private radarMode: 'system' | 'interstellar' = 'system';\n    \n    private logger: Logger;\n\n    constructor(\n        config: Partial<StatusBarConfig> = {},\n        interactions: PanelInteraction = {}\n    ) {\n        this.logger = new Logger('CockpitStatusBar');\n        this.interactions = interactions;\n        \n        // Default configuration\n        this.config = {\n            screenWidth: 1024,\n            screenHeight: 768,\n            panelHeight: 115, // 15% of 768px\n            panelSpacing: 5,\n            enableInteraction: true,\n            crtEffects: true,\n            ...config\n        };\n        \n        // Initialize default system status\n        this.systemStatus = {\n            hull: 100,\n            shields: 100,\n            power: 100,\n            fuel: 100,\n            heat: 0,\n            enginesOnline: true,\n            shieldsOnline: true,\n            weaponsOnline: true,\n            lifeSupport: true,\n            warpDrive: true,\n            engineEfficiency: 1.0,\n            shieldStrength: 1.0,\n            weaponAccuracy: 1.0,\n            sensorRange: 1.0\n        };\n        \n        this.setupPanels();\n        this.setupInteractiveElements();\n        \n        this.logger.info('🖥️ Cockpit status bar initialized', {\n            panels: this.panels.length,\n            interactiveElements: this.interactiveElements.size\n        });\n    }\n\n    /**\n     * Setup the 5 main panels\n     */\n    private setupPanels(): void {\n        const totalWidth = this.config.screenWidth;\n        const panelWidth = (totalWidth - (this.config.panelSpacing * 6)) / 5;\n        const startY = this.config.screenHeight - this.config.panelHeight;\n        \n        this.panels = [\n            {\n                x: this.config.panelSpacing,\n                y: startY,\n                width: panelWidth,\n                height: this.config.panelHeight,\n                title: 'SHIP SYSTEMS'\n            },\n            {\n                x: this.config.panelSpacing + (panelWidth + this.config.panelSpacing) * 1,\n                y: startY,\n                width: panelWidth,\n                height: this.config.panelHeight,\n                title: 'SHIP CONTROL'\n            },\n            {\n                x: this.config.panelSpacing + (panelWidth + this.config.panelSpacing) * 2,\n                y: startY,\n                width: panelWidth,\n                height: this.config.panelHeight,\n                title: 'DAMAGE & CARGO'\n            },\n            {\n                x: this.config.panelSpacing + (panelWidth + this.config.panelSpacing) * 3,\n                y: startY,\n                width: panelWidth,\n                height: this.config.panelHeight,\n                title: 'WEAPONS'\n            },\n            {\n                x: this.config.panelSpacing + (panelWidth + this.config.panelSpacing) * 4,\n                y: startY,\n                width: panelWidth,\n                height: this.config.panelHeight,\n                title: 'RADAR & NAV'\n            }\n        ];\n    }\n\n    /**\n     * Setup interactive elements for each panel\n     */\n    private setupInteractiveElements(): void {\n        this.setupSystemsPanel();\n        this.setupControlPanel();\n        this.setupDamagePanel();\n        this.setupWeaponsPanel();\n        this.setupRadarPanel();\n    }\n\n    /**\n     * Setup ship systems panel (Panel 1)\n     */\n    private setupSystemsPanel(): void {\n        const panel = this.panels[0];\n        const elementWidth = 25;\n        const elementHeight = 8;\n        \n        // Status indicators\n        this.addElement('hull_indicator', panel.x + 10, panel.y + 20, elementWidth, elementHeight, 'monitor', 'HULL');\n        this.addElement('shields_indicator', panel.x + 10, panel.y + 35, elementWidth, elementHeight, 'monitor', 'SHIELDS');\n        this.addElement('power_indicator', panel.x + 10, panel.y + 50, elementWidth, elementHeight, 'monitor', 'POWER');\n        this.addElement('fuel_indicator', panel.x + 10, panel.y + 65, elementWidth, elementHeight, 'monitor', 'FUEL');\n        this.addElement('heat_indicator', panel.x + 10, panel.y + 80, elementWidth, elementHeight, 'monitor', 'HEAT');\n        \n        // Critical warning lights\n        this.addElement('reactor_warning', panel.x + 80, panel.y + 20, 12, 12, 'button', 'RCTR');\n        this.addElement('hull_warning', panel.x + 80, panel.y + 35, 12, 12, 'button', 'HULL');\n        this.addElement('shield_warning', panel.x + 80, panel.y + 50, 12, 12, 'button', 'SHLD');\n        this.addElement('warp_warning', panel.x + 80, panel.y + 65, 12, 12, 'button', 'WARP');\n    }\n\n    /**\n     * Setup ship control panel (Panel 2)\n     */\n    private setupControlPanel(): void {\n        const panel = this.panels[1];\n        \n        // System toggles\n        this.addElement('engines_toggle', panel.x + 10, panel.y + 20, 30, 15, 'toggle', 'ENGINES');\n        this.addElement('shields_toggle', panel.x + 50, panel.y + 20, 30, 15, 'toggle', 'SHIELDS');\n        this.addElement('weapons_toggle', panel.x + 90, panel.y + 20, 30, 15, 'toggle', 'WEAPONS');\n        this.addElement('warp_toggle', panel.x + 130, panel.y + 20, 30, 15, 'toggle', 'WARP');\n        \n        // Power sliders\n        this.addElement('thrust_slider', panel.x + 10, panel.y + 45, 60, 10, 'slider', 'THRUST');\n        this.addElement('shield_slider', panel.x + 80, panel.y + 45, 60, 10, 'slider', 'SHIELDS');\n        \n        // Emergency button\n        this.addElement('autodestruct', panel.x + 60, panel.y + 70, 40, 20, 'button', 'AUTO-DESTRUCT');\n    }\n\n    /**\n     * Setup damage and cargo panel (Panel 3)\n     */\n    private setupDamagePanel(): void {\n        const panel = this.panels[2];\n        \n        // Damage monitor (central area)\n        this.addElement('damage_monitor', panel.x + 10, panel.y + 20, 80, 50, 'monitor', 'DAMAGE');\n        \n        // Cargo load indicator\n        this.addElement('cargo_indicator', panel.x + 100, panel.y + 20, 60, 15, 'monitor', 'CARGO');\n        \n        // Interface buttons\n        this.addElement('inventory_btn', panel.x + 10, panel.y + 80, 35, 15, 'button', 'INV');\n        this.addElement('codex_btn', panel.x + 50, panel.y + 80, 35, 15, 'button', 'CODEX');\n        this.addElement('research_btn', panel.x + 90, panel.y + 80, 35, 15, 'button', 'RSCH');\n        this.addElement('crew_btn', panel.x + 130, panel.y + 80, 35, 15, 'button', 'CREW');\n    }\n\n    /**\n     * Setup weapons panel (Panel 4)\n     */\n    private setupWeaponsPanel(): void {\n        const panel = this.panels[3];\n        \n        // Weapon selection\n        this.addElement('weapon1_btn', panel.x + 10, panel.y + 20, 40, 15, 'button', 'LASER');\n        this.addElement('weapon2_btn', panel.x + 55, panel.y + 20, 40, 15, 'button', 'PLASMA');\n        this.addElement('weapon3_btn', panel.x + 100, panel.y + 20, 40, 15, 'button', 'MISSILE');\n        \n        // Weapon info monitor\n        this.addElement('weapon_monitor', panel.x + 10, panel.y + 40, 130, 25, 'monitor', 'WEAPON INFO');\n        \n        // Warning lights\n        this.addElement('overheat_warning', panel.x + 10, panel.y + 75, 15, 15, 'button', 'HOT');\n        this.addElement('ammo_warning', panel.x + 30, panel.y + 75, 15, 15, 'button', 'AMMO');\n        this.addElement('energy_warning', panel.x + 50, panel.y + 75, 15, 15, 'button', 'PWR');\n        \n        // Warp drive button\n        this.addElement('warp_button', panel.x + 80, panel.y + 75, 50, 15, 'button', 'WARP');\n    }\n\n    /**\n     * Setup radar and navigation panel (Panel 5)\n     */\n    private setupRadarPanel(): void {\n        const panel = this.panels[4];\n        \n        // Radar display\n        this.addElement('radar_display', panel.x + 10, panel.y + 20, 80, 50, 'monitor', 'RADAR');\n        \n        // Radar controls\n        this.addElement('zoom_in', panel.x + 100, panel.y + 20, 20, 15, 'button', 'Z+');\n        this.addElement('zoom_out', panel.x + 125, panel.y + 20, 20, 15, 'button', 'Z-');\n        this.addElement('radar_mode', panel.x + 100, panel.y + 40, 45, 15, 'toggle', 'MODE');\n        this.addElement('galaxy_map', panel.x + 100, panel.y + 60, 45, 15, 'button', 'GALAXY');\n    }\n\n    /**\n     * Add interactive element\n     */\n    private addElement(\n        id: string, \n        x: number, \n        y: number, \n        width: number, \n        height: number, \n        type: 'button' | 'slider' | 'toggle' | 'monitor',\n        label: string\n    ): void {\n        this.interactiveElements.set(id, {\n            x, y, width, height, type, id, label,\n            value: type === 'slider' ? 50 : undefined,\n            state: type === 'toggle' ? true : undefined\n        });\n    }\n\n    /**\n     * Update status bar (called each frame)\n     */\n    update(deltaTime: number, input: InputManager): void {\n        // Update visual effects\n        this.updateVisualEffects(deltaTime);\n        \n        // Handle input if interaction is enabled\n        if (this.config.enableInteraction) {\n            this.handleInput(input);\n        }\n    }\n\n    /**\n     * Update visual effects (flicker, scanlines, glitch)\n     */\n    private updateVisualEffects(deltaTime: number): void {\n        this.flickerTimer += deltaTime;\n        this.scanlineOffset += deltaTime * 100; // Scanline speed\n        this.glitchTimer += deltaTime;\n        \n        // Reset timers to prevent overflow\n        if (this.flickerTimer > 10) this.flickerTimer = 0;\n        if (this.scanlineOffset > 1000) this.scanlineOffset = 0;\n        if (this.glitchTimer > 5) this.glitchTimer = 0;\n    }\n\n    /**\n     * Handle user input\n     */\n    private handleInput(input: InputManager): void {\n        const mousePos = input.getMousePosition();\n        \n        // Check for element hover\n        this.hoveredElement = null;\n        for (const [id, element] of this.interactiveElements) {\n            if (this.isPointInElement(mousePos, element)) {\n                this.hoveredElement = id;\n                break;\n            }\n        }\n        \n        // Handle clicks\n        if (input.isMouseButtonPressed(0)) {\n            if (this.hoveredElement) {\n                this.handleElementClick(this.hoveredElement);\n            }\n        }\n        \n        // Handle dragging for sliders\n        if (input.isMouseButtonDown(0) && this.selectedElement) {\n            const element = this.interactiveElements.get(this.selectedElement);\n            if (element && element.type === 'slider') {\n                this.handleSliderDrag(element, mousePos);\n            }\n        } else {\n            this.selectedElement = null;\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Check if point is inside element\n     */\n    private isPointInElement(point: Vector2, element: InteractiveElement): boolean {\n        return point.x >= element.x && \n               point.x <= element.x + element.width &&\n               point.y >= element.y && \n               point.y <= element.y + element.height;\n    }\n\n    /**\n     * Handle element click\n     */\n    private handleElementClick(elementId: string): void {\n        const element = this.interactiveElements.get(elementId);\n        if (!element) return;\n        \n        this.selectedElement = elementId;\n        \n        switch (element.type) {\n            case 'button':\n                this.handleButtonClick(elementId);\n                break;\n            case 'toggle':\n                this.handleToggleClick(elementId, element);\n                break;\n            case 'slider':\n                this.isDragging = true;\n                break;\n        }\n    }\n\n    /**\n     * Handle button clicks\n     */\n    private handleButtonClick(elementId: string): void {\n        switch (elementId) {\n            case 'autodestruct':\n                // Confirmation would be needed\n                this.logger.warn('🛑 Auto-destruct sequence requested');\n                break;\n            case 'inventory_btn':\n                this.interactions.onInventoryOpen?.();\n                break;\n            case 'codex_btn':\n                this.interactions.onCodexOpen?.();\n                break;\n            case 'research_btn':\n                this.interactions.onResearchOpen?.();\n                break;\n            case 'crew_btn':\n                this.interactions.onCrewOpen?.();\n                break;\n            case 'galaxy_map':\n                this.interactions.onGalaxyMapOpen?.();\n                break;\n            case 'zoom_in':\n                this.radarZoom = Math.min(5.0, this.radarZoom * 1.5);\n                this.interactions.onRadarZoom?.(this.radarZoom);\n                break;\n            case 'zoom_out':\n                this.radarZoom = Math.max(0.2, this.radarZoom / 1.5);\n                this.interactions.onRadarZoom?.(this.radarZoom);\n                break;\n        }\n    }\n\n    /**\n     * Handle toggle clicks\n     */\n    private handleToggleClick(elementId: string, element: InteractiveElement): void {\n        element.state = !element.state;\n        \n        const systemMap: Record<string, string> = {\n            'engines_toggle': 'engines',\n            'shields_toggle': 'shields',\n            'weapons_toggle': 'weapons',\n            'warp_toggle': 'warp_drive',\n            'radar_mode': 'radar_mode'\n        };\n        \n        const systemName = systemMap[elementId];\n        if (systemName) {\n            if (systemName === 'radar_mode') {\n                this.radarMode = this.radarMode === 'system' ? 'interstellar' : 'system';\n            } else {\n                this.interactions.onSystemToggle?.(systemName, element.state!);\n            }\n        }\n    }\n\n    /**\n     * Handle slider dragging\n     */\n    private handleSliderDrag(element: InteractiveElement, mousePos: Vector2): void {\n        const localX = mousePos.x - element.x;\n        const percentage = Math.max(0, Math.min(100, (localX / element.width) * 100));\n        element.value = percentage;\n        \n        // Update power allocation\n        if (element.id === 'thrust_slider') {\n            this.interactions.onPowerAllocationChange?.({ engines: percentage });\n        } else if (element.id === 'shield_slider') {\n            this.interactions.onPowerAllocationChange?.({ shields: percentage });\n        }\n    }\n\n    /**\n     * Render the status bar\n     */\n    render(renderer: Renderer): void {\n        // Render background base\n        this.renderPanelBase(renderer);\n        \n        // Render each panel\n        this.panels.forEach((panel, index) => {\n            this.renderPanel(renderer, panel, index);\n        });\n        \n        // Render CRT effects if enabled\n        if (this.config.crtEffects) {\n            this.renderCRTEffects(renderer);\n        }\n    }\n\n    /**\n     * Render panel base structure\n     */\n    private renderPanelBase(renderer: Renderer): void {\n        const baseY = this.config.screenHeight - this.config.panelHeight - 10;\n        const baseHeight = this.config.panelHeight + 20;\n        \n        // Main base panel (very dark, worn metal)\n        renderer.fillRect(0, baseY, this.config.screenWidth, baseHeight, { r: 12, g: 14, b: 16 });\n        \n        // Decorative edge (muted terminal glow)\n        renderer.fillRect(0, baseY, this.config.screenWidth, 3, { r: 8, g: 24, b: 8 });\n        \n        // Panel separators (dark gray lines)\n        for (let i = 1; i < this.panels.length; i++) {\n            const x = this.panels[i].x - this.config.panelSpacing / 2;\n            renderer.fillRect(x, baseY + 5, 1, baseHeight - 10, { r: 24, g: 24, b: 24 });\n        }\n    }\n\n    /**\n     * Render individual panel\n     */\n    private renderPanel(renderer: Renderer, panel: PanelArea, panelIndex: number): void {\n        // Panel background with depth effect (dark, worn CRT style)\n        renderer.fillRect(panel.x, panel.y, panel.width, panel.height, { r: 8, g: 12, b: 8 });\n        renderer.drawLine(panel.x, panel.y, panel.x + panel.width, panel.y, { r: 16, g: 48, b: 16 });\n        renderer.drawLine(panel.x, panel.y, panel.x, panel.y + panel.height, { r: 16, g: 48, b: 16 });\n        \n        // Panel title (muted terminal green)\n        renderer.renderText(panel.title, panel.x + 5, panel.y + 5, { r: 12, g: 36, b: 12 }, 8);\n        \n        // Render panel content based on index\n        switch (panelIndex) {\n            case 0: this.renderSystemsPanel(renderer, panel); break;\n            case 1: this.renderControlPanel(renderer, panel); break;\n            case 2: this.renderDamagePanel(renderer, panel); break;\n            case 3: this.renderWeaponsPanel(renderer, panel); break;\n            case 4: this.renderRadarPanel(renderer, panel); break;\n        }\n    }\n\n    /**\n     * Render systems panel content\n     */\n    private renderSystemsPanel(renderer: Renderer, panel: PanelArea): void {\n        // Status bars\n        this.renderStatusBar(renderer, panel.x + 40, panel.y + 20, 30, 8, this.systemStatus.hull, 'HULL');\n        this.renderStatusBar(renderer, panel.x + 40, panel.y + 35, 30, 8, this.systemStatus.shields, 'SHLD');\n        this.renderStatusBar(renderer, panel.x + 40, panel.y + 50, 30, 8, this.systemStatus.power, 'PWR');\n        this.renderStatusBar(renderer, panel.x + 40, panel.y + 65, 30, 8, this.systemStatus.fuel, 'FUEL');\n        this.renderStatusBar(renderer, panel.x + 40, panel.y + 80, 30, 8, this.systemStatus.heat, 'HEAT', true);\n        \n        // Warning lights\n        this.renderWarningLight(renderer, panel.x + 95, panel.y + 20, this.systemStatus.power < 30);\n        this.renderWarningLight(renderer, panel.x + 95, panel.y + 35, this.systemStatus.hull < 25);\n        this.renderWarningLight(renderer, panel.x + 95, panel.y + 50, !this.systemStatus.shieldsOnline);\n        this.renderWarningLight(renderer, panel.x + 95, panel.y + 65, !this.systemStatus.warpDrive);\n    }\n\n    /**\n     * Render control panel content\n     */\n    private renderControlPanel(renderer: Renderer, panel: PanelArea): void {\n        // System toggles\n        this.renderToggle(renderer, panel.x + 10, panel.y + 20, 30, 15, this.systemStatus.enginesOnline, 'ENG');\n        this.renderToggle(renderer, panel.x + 50, panel.y + 20, 30, 15, this.systemStatus.shieldsOnline, 'SHLD');\n        this.renderToggle(renderer, panel.x + 90, panel.y + 20, 30, 15, this.systemStatus.weaponsOnline, 'WPN');\n        this.renderToggle(renderer, panel.x + 130, panel.y + 20, 30, 15, this.systemStatus.warpDrive, 'WARP');\n        \n        // Power sliders\n        const thrustSlider = this.interactiveElements.get('thrust_slider');\n        const shieldSlider = this.interactiveElements.get('shield_slider');\n        \n        if (thrustSlider) {\n            this.renderSlider(renderer, thrustSlider, thrustSlider.value || 50, 'THRUST');\n        }\n        if (shieldSlider) {\n            this.renderSlider(renderer, shieldSlider, shieldSlider.value || 50, 'SHIELDS');\n        }\n        \n        // Emergency button\n        this.renderButton(renderer, panel.x + 60, panel.y + 70, 40, 20, 'DESTRUCT', { r: 200, g: 0, b: 0 });\n    }\n\n    /**\n     * Render damage panel content\n     */\n    private renderDamagePanel(renderer: Renderer, panel: PanelArea): void {\n        // Damage monitor\n        this.renderDamageDisplay(renderer, panel.x + 10, panel.y + 20, 80, 50);\n        \n        // Cargo indicator\n        renderer.renderText(`CARGO: ${this.cargoLoad.toFixed(0)}%`, \n            panel.x + 100, panel.y + 25, { r: 255, g: 255, b: 0 }, 10);\n        \n        // Interface buttons\n        this.renderButton(renderer, panel.x + 10, panel.y + 80, 35, 15, 'INV', { r: 0, g: 192, b: 255 });\n        this.renderButton(renderer, panel.x + 50, panel.y + 80, 35, 15, 'CODEX', { r: 0, g: 192, b: 255 });\n        this.renderButton(renderer, panel.x + 90, panel.y + 80, 35, 15, 'RSCH', { r: 0, g: 192, b: 255 });\n        this.renderButton(renderer, panel.x + 130, panel.y + 80, 35, 15, 'CREW', { r: 0, g: 192, b: 255 });\n    }\n\n    /**\n     * Render weapons panel content\n     */\n    private renderWeaponsPanel(renderer: Renderer, panel: PanelArea): void {\n        // Weapon selection buttons\n        this.renderButton(renderer, panel.x + 10, panel.y + 20, 40, 15, 'LASER', { r: 0, g: 255, b: 0 });\n        this.renderButton(renderer, panel.x + 55, panel.y + 20, 40, 15, 'PLASMA', { r: 128, g: 128, b: 128 });\n        this.renderButton(renderer, panel.x + 100, panel.y + 20, 40, 15, 'MISSILE', { r: 128, g: 128, b: 128 });\n        \n        // Weapon info display\n        renderer.fillRect(panel.x + 10, panel.y + 40, 130, 25, { r: 5, g: 10, b: 5 });\n        renderer.renderText('LASER CANNON MK-II', panel.x + 15, panel.y + 45, { r: 0, g: 255, b: 0 }, 8);\n        renderer.renderText('PWR: 85% RNG: 2.5KM', panel.x + 15, panel.y + 55, { r: 0, g: 192, b: 0 }, 8);\n        \n        // Warning lights\n        this.renderWarningLight(renderer, panel.x + 15, panel.y + 75, this.systemStatus.heat > 80);\n        this.renderWarningLight(renderer, panel.x + 35, panel.y + 75, false); // Ammo OK\n        this.renderWarningLight(renderer, panel.x + 55, panel.y + 75, this.systemStatus.power < 20);\n    }\n\n    /**\n     * Render radar panel content\n     */\n    private renderRadarPanel(renderer: Renderer, panel: PanelArea): void {\n        // Radar display\n        this.renderRadarDisplay(renderer, panel.x + 10, panel.y + 20, 80, 50);\n        \n        // Control buttons\n        this.renderButton(renderer, panel.x + 100, panel.y + 20, 20, 15, 'Z+', { r: 0, g: 128, b: 255 });\n        this.renderButton(renderer, panel.x + 125, panel.y + 20, 20, 15, 'Z-', { r: 0, g: 128, b: 255 });\n        this.renderToggle(renderer, panel.x + 100, panel.y + 40, 45, 15, this.radarMode === 'interstellar', 'MODE');\n        this.renderButton(renderer, panel.x + 100, panel.y + 60, 45, 15, 'GALAXY', { r: 255, g: 165, b: 0 });\n    }\n\n    /**\n     * Render status bar\n     */\n    private renderStatusBar(\n        renderer: Renderer, \n        x: number, \n        y: number, \n        width: number, \n        height: number, \n        value: number, \n        label: string,\n        isHeat = false\n    ): void {\n        // Background\n        renderer.fillRect(x, y, width, height, { r: 5, g: 5, b: 5 });\n        \n        // Fill bar\n        const fillWidth = (value / 100) * width;\n        let fillColor: Color;\n        \n        if (isHeat) {\n            // Heat bar (muted red when high)\n            fillColor = value > 70 ? { r: 96, g: 32, b: 32 } : \n                       value > 40 ? { r: 96, g: 64, b: 16 } : \n                                   { r: 12, g: 36, b: 12 };\n        } else {\n            // Standard bar (muted green to amber to red)\n            fillColor = value > 60 ? { r: 12, g: 36, b: 12 } : \n                       value > 30 ? { r: 72, g: 48, b: 12 } : \n                                   { r: 72, g: 24, b: 24 };\n        }\n        \n        renderer.fillRect(x, y, fillWidth, height, fillColor);\n        \n        // Border (dark gray)\n        renderer.drawLine(x, y, x + width, y, { r: 32, g: 32, b: 32 });\n        renderer.drawLine(x, y + height, x + width, y + height, { r: 32, g: 32, b: 32 });\n        \n        // Value text (muted white)\n        renderer.renderText(`${value.toFixed(0)}`, x + width + 2, y, { r: 64, g: 64, b: 64 }, 8);\n    }\n\n    /**\n     * Render warning light\n     */\n    private renderWarningLight(renderer: Renderer, x: number, y: number, isActive: boolean): void {\n        const color = isActive ? \n            { r: 72, g: 24, b: 24 } : \n            { r: 24, g: 8, b: 8 };\n        \n        renderer.fillRect(x, y, 8, 8, color);\n        \n        // Flicker effect for active warnings (muted glow)\n        if (isActive && Math.sin(this.flickerTimer * 10) > 0.5) {\n            renderer.fillRect(x + 1, y + 1, 6, 6, { r: 96, g: 32, b: 32 });\n        }\n    }\n\n    /**\n     * Render toggle switch\n     */\n    private renderToggle(\n        renderer: Renderer, \n        x: number, \n        y: number, \n        width: number, \n        height: number, \n        state: boolean, \n        label: string\n    ): void {\n        const bgColor = state ? { r: 8, g: 24, b: 8 } : { r: 24, g: 8, b: 8 };\n        const textColor = state ? { r: 16, g: 48, b: 16 } : { r: 32, g: 32, b: 32 };\n        \n        renderer.fillRect(x, y, width, height, bgColor);\n        renderer.renderText(label, x + 2, y + 4, textColor, 8);\n    }\n\n    /**\n     * Render slider\n     */\n    private renderSlider(\n        renderer: Renderer, \n        element: InteractiveElement, \n        value: number, \n        label: string\n    ): void {\n        // Background (dark worn metal)\n        renderer.fillRect(element.x, element.y, element.width, element.height, { r: 8, g: 8, b: 8 });\n        \n        // Slider position (muted teal)\n        const sliderPos = (value / 100) * element.width;\n        renderer.fillRect(element.x, element.y, sliderPos, element.height, { r: 16, g: 40, b: 32 });\n        \n        // Slider handle (worn white)\n        renderer.fillRect(element.x + sliderPos - 2, element.y - 2, 4, element.height + 4, { r: 64, g: 64, b: 64 });\n        \n        // Label and value (muted text)\n        renderer.renderText(label, element.x, element.y - 12, { r: 48, g: 48, b: 48 }, 8);\n        renderer.renderText(`${value.toFixed(0)}%`, element.x + element.width - 25, element.y - 12, { r: 48, g: 48, b: 48 }, 8);\n    }\n\n    /**\n     * Render button\n     */\n    private renderButton(\n        renderer: Renderer, \n        x: number, \n        y: number, \n        width: number, \n        height: number, \n        label: string, \n        color: Color\n    ): void {\n        const isHovered = this.hoveredElement?.includes(label.toLowerCase());\n        const bgColor = isHovered ? \n            { r: color.r + 30, g: color.g + 30, b: color.b + 30 } : \n            { r: color.r / 3, g: color.g / 3, b: color.b / 3 };\n        \n        renderer.fillRect(x, y, width, height, bgColor);\n        renderer.renderText(label, x + 2, y + 3, color, 8);\n    }\n\n    /**\n     * Render damage display\n     */\n    private renderDamageDisplay(renderer: Renderer, x: number, y: number, width: number, height: number): void {\n        // Background\n        renderer.fillRect(x, y, width, height, { r: 5, g: 10, b: 5 });\n        \n        // Ship schematic (simplified)\n        const shipX = x + width / 2;\n        const shipY = y + height / 2;\n        \n        // Draw 8 sections of the ship\n        const sections = [\n            { name: 'BOW', x: shipX, y: shipY - 15, color: { r: 0, g: 255, b: 0 } },\n            { name: 'STERN', x: shipX, y: shipY + 15, color: { r: 0, g: 255, b: 0 } },\n            { name: 'PORT', x: shipX - 15, y: shipY, color: { r: 0, g: 255, b: 0 } },\n            { name: 'STBD', x: shipX + 15, y: shipY, color: { r: 0, g: 255, b: 0 } },\n            { name: 'CORE', x: shipX, y: shipY, color: { r: 0, g: 255, b: 0 } },\n            { name: 'BRDG', x: shipX - 8, y: shipY - 8, color: { r: 0, g: 255, b: 0 } },\n            { name: 'ENG', x: shipX + 8, y: shipY + 8, color: { r: 0, g: 255, b: 0 } },\n            { name: 'WPN', x: shipX + 8, y: shipY - 8, color: { r: 0, g: 255, b: 0 } }\n        ];\n        \n        sections.forEach(section => {\n            renderer.fillRect(section.x - 4, section.y - 4, 8, 8, section.color);\n            renderer.renderText(section.name, section.x - 12, section.y + 8, { r: 0, g: 192, b: 0 }, 6);\n        });\n    }\n\n    /**\n     * Render radar display\n     */\n    private renderRadarDisplay(renderer: Renderer, x: number, y: number, width: number, height: number): void {\n        // Background\n        renderer.fillRect(x, y, width, height, { r: 0, g: 8, b: 0 });\n        \n        // Radar grid\n        const centerX = x + width / 2;\n        const centerY = y + height / 2;\n        const maxRadius = Math.min(width, height) / 2 - 5;\n        \n        // Range rings\n        for (let i = 1; i <= 3; i++) {\n            const radius = (maxRadius / 3) * i;\n            renderer.drawCircle(centerX, centerY, radius, { r: 0, g: 64, b: 0 });\n        }\n        \n        // Cross hairs\n        renderer.drawLine(centerX - maxRadius, centerY, centerX + maxRadius, centerY, { r: 0, g: 64, b: 0 });\n        renderer.drawLine(centerX, centerY - maxRadius, centerX, centerY + maxRadius, { r: 0, g: 64, b: 0 });\n        \n        // Player ship (center)\n        renderer.fillRect(centerX - 1, centerY - 1, 3, 3, { r: 0, g: 255, b: 0 });\n        \n        // Sample contacts\n        renderer.fillRect(centerX + 10, centerY - 15, 2, 2, { r: 255, g: 255, b: 0 }); // Planet\n        renderer.fillRect(centerX - 20, centerY + 8, 2, 2, { r: 255, g: 255, b: 0 }); // Planet\n        \n        // Mode indicator\n        renderer.renderText(this.radarMode.toUpperCase(), x + 2, y + height - 12, { r: 0, g: 255, b: 0 }, 8);\n        renderer.renderText(`ZOOM: ${this.radarZoom.toFixed(1)}x`, x + 2, y + height - 22, { r: 0, g: 255, b: 0 }, 8);\n    }\n\n    /**\n     * Render CRT effects\n     */\n    private renderCRTEffects(renderer: Renderer): void {\n        // Scanlines are handled by CSS in the main HTML\n        // Additional flicker effect for damaged systems\n        if (this.systemStatus.hull < 50 || this.systemStatus.power < 30) {\n            // Add random glitch pixels\n            if (Math.random() < 0.1) {\n                const x = Math.random() * this.config.screenWidth;\n                const y = this.config.screenHeight - this.config.panelHeight + Math.random() * this.config.panelHeight;\n                renderer.setPixel(x, y, { r: 255, g: 255, b: 255 });\n            }\n        }\n    }\n\n    /**\n     * Update system status\n     */\n    updateSystemStatus(status: SystemStatus): void {\n        this.systemStatus = { ...status };\n    }\n\n    /**\n     * Update damage reports\n     */\n    updateDamageReports(reports: Map<ShipSection, DamageReport[]>): void {\n        this.damageReports = new Map(reports);\n    }\n\n    /**\n     * Update cargo load\n     */\n    updateCargoLoad(load: number): void {\n        this.cargoLoad = Math.max(0, Math.min(100, load));\n    }\n\n    /**\n     * Get current power allocation from sliders\n     */\n    getPowerAllocation(): PowerAllocation {\n        const thrustSlider = this.interactiveElements.get('thrust_slider');\n        const shieldSlider = this.interactiveElements.get('shield_slider');\n        \n        return {\n            engines: thrustSlider?.value || 30,\n            shields: shieldSlider?.value || 25,\n            weapons: 20,\n            lifeSupport: 15,\n            sensors: 10\n        };\n    }\n}","/**\n * Celestial Body System\n * Handles planets, moons, stars, asteroids with orbital mechanics and interactions\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer, Color } from '@core/Renderer';\nimport { PhysicsObject } from '@core/Physics';\nimport { StarData, PlanetData, MoonData, PlanetType, SurfaceType } from '@procedural/GalaxyGenerator';\n\nexport interface CelestialBodyConfig {\n    renderDistance: number; // Maximum distance to render details\n    orbitLineOpacity: number;\n    showOrbitLines: boolean;\n    animationSpeed: number;\n    minPixelSize: number; // Minimum size for distant objects\n    maxPixelSize: number; // Maximum size for close objects\n}\n\nexport interface InteractionZone {\n    bodyId: string;\n    type: 'orbit' | 'surface' | 'atmosphere';\n    radius: number;\n    distance: number; // Distance from ship\n    canEnter: boolean;\n    requirements?: string[];\n}\n\nexport interface BodyInteraction {\n    onEnterOrbit?: (bodyId: string) => void;\n    onExitOrbit?: (bodyId: string) => void;\n    onLandingAttempt?: (bodyId: string, canLand: boolean) => void;\n    onMining?: (bodyId: string, resources: MiningResult) => void;\n    onScan?: (bodyId: string, scanData: ScanResult) => void;\n}\n\nexport interface MiningResult {\n    resourceType: string;\n    quantity: number;\n    quality: number; // 0-1\n    depletion: number; // How much the resource is depleted\n}\n\nexport interface ScanResult {\n    composition: string[];\n    atmosphere?: AtmosphereData;\n    surfaceConditions: SurfaceConditions;\n    biologicalSigns: boolean;\n    anomalies: string[];\n    mineralDeposits: MineralDeposit[];\n}\n\nexport interface AtmosphereData {\n    pressure: number; // Earth atmospheres\n    composition: { [element: string]: number };\n    breathable: boolean;\n    toxic: boolean;\n    temperature: number; // Kelvin\n}\n\nexport interface SurfaceConditions {\n    temperature: number; // Kelvin\n    gravity: number; // Earth gravities\n    radiation: number; // 0-1 (danger level)\n    weather: string;\n    landingDifficulty: number; // 0-1\n}\n\nexport interface MineralDeposit {\n    type: string;\n    richness: number; // 0-1\n    accessibility: number; // 0-1\n    extractionDifficulty: number; // 0-1\n}\n\nexport class CelestialBody {\n    public id: string;\n    public name: string;\n    public type: 'star' | 'planet' | 'moon' | 'asteroid';\n    public position: Vector2;\n    public velocity: Vector2 = { x: 0, y: 0 };\n    \n    // Visual properties\n    public radius: number;\n    public color: Color;\n    public atmosphereColor?: Color;\n    public hasAtmosphere: boolean = false;\n    public hasRings: boolean = false;\n    public ringColor?: Color;\n    \n    // Orbital mechanics\n    public orbitCenter?: Vector2;\n    public orbitRadius: number = 0;\n    public orbitSpeed: number = 0;\n    public orbitAngle: number = 0;\n    public rotationSpeed: number = 0;\n    public currentRotation: number = 0;\n    \n    // Physics and interaction\n    public mass: number;\n    public physicsObject?: PhysicsObject;\n    public interactionZones: InteractionZone[] = [];\n    \n    // Data\n    public planetData?: PlanetData;\n    public starData?: StarData;\n    public moonData?: MoonData;\n    \n    // Resource data\n    public mineralDeposits: MineralDeposit[] = [];\n    public surfaceConditions?: SurfaceConditions;\n    public atmosphereData?: AtmosphereData;\n    \n    // Interaction state\n    public isDiscovered: boolean = false;\n    public isScanned: boolean = false;\n    public isLanded: boolean = false;\n    public resourcesDepleted: number = 0; // 0-1\n    \n    private logger: Logger;\n\n    constructor(config: {\n        id: string;\n        name: string;\n        type: 'star' | 'planet' | 'moon' | 'asteroid';\n        position: Vector2;\n        radius: number;\n        mass: number;\n        color: Color;\n        planetData?: PlanetData;\n        starData?: StarData;\n        moonData?: MoonData;\n    }) {\n        this.id = config.id;\n        this.name = config.name;\n        this.type = config.type;\n        this.position = { ...config.position };\n        this.radius = config.radius;\n        this.mass = config.mass;\n        this.color = { ...config.color };\n        \n        this.planetData = config.planetData;\n        this.starData = config.starData;\n        this.moonData = config.moonData;\n        \n        this.logger = new Logger(`CelestialBody:${config.name}`);\n        \n        this.initializeFromData();\n        this.generateInteractionZones();\n        this.generateResources();\n        \n        this.logger.debug(`Created ${this.type}: ${this.name}`, {\n            radius: this.radius,\n            mass: this.mass,\n            hasAtmosphere: this.hasAtmosphere\n        });\n    }\n\n    /**\n     * Initialize body properties from data\n     */\n    private initializeFromData(): void {\n        if (this.planetData) {\n            this.hasAtmosphere = this.planetData.hasAtmosphere;\n            this.hasRings = this.planetData.hasRings;\n            \n            // Set colors based on planet type with dark, muted tones\n            this.updatePlanetVisuals();\n            \n            // Setup orbital mechanics\n            if (this.planetData.orbitDistance > 0) {\n                this.orbitRadius = this.planetData.orbitDistance * 50; // Scale for display\n                this.orbitSpeed = 2 * Math.PI / (this.planetData.orbitPeriod / 3600); // Convert to radians per hour\n            }\n            \n            // Rotation (30-frame cycle as specified)\n            this.rotationSpeed = (2 * Math.PI) / 30; // 30 frames for full rotation\n        }\n        \n        if (this.starData) {\n            // Star visual properties with muted glow\n            this.color = this.getDarkStarColor(this.starData.temperature);\n            this.rotationSpeed = (2 * Math.PI) / 60; // Slower star rotation\n        }\n        \n        if (this.moonData) {\n            // Moon properties\n            this.orbitRadius = this.moonData.orbitDistance * 5; // Scale for display\n            this.orbitSpeed = 2 * Math.PI / (this.moonData.orbitPeriod / 60); // Convert to minutes\n            this.rotationSpeed = this.moonData.tidallyLocked ? this.orbitSpeed : (2 * Math.PI) / 45;\n        }\n    }\n\n    /**\n     * Update planet visual properties with dark, atmospheric colors\n     */\n    private updatePlanetVisuals(): void {\n        if (!this.planetData) return;\n        \n        // Dark, muted planet colors based on type\n        switch (this.planetData.type) {\n            case PlanetType.Terrestrial:\n                this.color = { r: 32, g: 24, b: 16 }; // Dark brown/rock\n                if (this.hasAtmosphere) {\n                    this.atmosphereColor = { r: 16, g: 24, b: 32 }; // Dark blue haze\n                }\n                break;\n                \n            case PlanetType.Ocean:\n                this.color = { r: 8, g: 16, b: 32 }; // Deep dark blue\n                this.atmosphereColor = { r: 12, g: 20, b: 28 }; // Muted blue atmosphere\n                break;\n                \n            case PlanetType.Desert:\n                this.color = { r: 48, g: 32, b: 16 }; // Dark sand/rust\n                break;\n                \n            case PlanetType.Volcanic:\n                this.color = { r: 32, g: 16, b: 8 }; // Dark volcanic rock\n                break;\n                \n            case PlanetType.Frozen:\n                this.color = { r: 32, g: 36, b: 40 }; // Dark ice\n                break;\n                \n            case PlanetType.GasGiant:\n                this.color = { r: 40, g: 32, b: 24 }; // Muted gas colors\n                this.atmosphereColor = { r: 32, g: 28, b: 20 }; // Dark atmosphere\n                if (this.hasRings) {\n                    this.ringColor = { r: 24, g: 20, b: 16 }; // Dark ring material\n                }\n                break;\n                \n            case PlanetType.IceGiant:\n                this.color = { r: 16, g: 24, b: 32 }; // Dark blue-gray\n                this.atmosphereColor = { r: 12, g: 20, b: 28 }; // Muted methane haze\n                break;\n                \n            case PlanetType.Toxic:\n                this.color = { r: 32, g: 24, b: 16 }; // Dark toxic surface\n                this.atmosphereColor = { r: 48, g: 32, b: 16 }; // Toxic haze\n                break;\n        }\n    }\n\n    /**\n     * Get dark star color based on temperature\n     */\n    private getDarkStarColor(temperature: number): Color {\n        // Dark, muted star colors (no bright neons)\n        if (temperature > 25000) return { r: 32, g: 36, b: 48 }; // Muted blue\n        if (temperature > 10000) return { r: 40, g: 44, b: 48 }; // Blue-white\n        if (temperature > 7500) return { r: 48, g: 48, b: 48 };  // Muted white\n        if (temperature > 6000) return { r: 48, g: 44, b: 36 };  // Yellow-white\n        if (temperature > 5000) return { r: 48, g: 40, b: 28 };  // Muted yellow\n        if (temperature > 3500) return { r: 48, g: 32, b: 20 };  // Orange\n        return { r: 48, g: 24, b: 16 }; // Dark red\n    }\n\n    /**\n     * Generate interaction zones around the body\n     */\n    private generateInteractionZones(): void {\n        this.interactionZones = [];\n        \n        // Orbit zone (space around the body)\n        this.interactionZones.push({\n            bodyId: this.id,\n            type: 'orbit',\n            radius: this.radius * 3,\n            distance: 0,\n            canEnter: true\n        });\n        \n        // Atmosphere zone (if has atmosphere)\n        if (this.hasAtmosphere) {\n            this.interactionZones.push({\n                bodyId: this.id,\n                type: 'atmosphere',\n                radius: this.radius * 1.5,\n                distance: 0,\n                canEnter: true,\n                requirements: ['heat_shielding']\n            });\n        }\n        \n        // Surface zone (for landing)\n        if (this.type !== 'star') {\n            const canLand = this.canShipLand();\n            this.interactionZones.push({\n                bodyId: this.id,\n                type: 'surface',\n                radius: this.radius,\n                distance: 0,\n                canEnter: canLand,\n                requirements: canLand ? [] : ['specialized_equipment']\n            });\n        }\n    }\n\n    /**\n     * Determine if a ship can land on this body\n     */\n    private canShipLand(): boolean {\n        if (this.type === 'star') return false;\n        if (this.type === 'asteroid') return true; // Can dock with asteroids\n        \n        if (this.planetData) {\n            // Gas giants can't be landed on\n            if (this.planetData.type === PlanetType.GasGiant || \n                this.planetData.type === PlanetType.IceGiant) {\n                return false;\n            }\n            \n            // Very high temperature/pressure is dangerous\n            if (this.planetData.temperature > 1000) return false;\n            \n            return true;\n        }\n        \n        return true; // Moons and unknown bodies default to landable\n    }\n\n    /**\n     * Generate mineral deposits and resources\n     */\n    private generateResources(): void {\n        this.mineralDeposits = [];\n        \n        if (this.type === 'star') return; // Stars don't have mineable resources\n        \n        // Generate resources based on body type\n        const resourceTypes = this.getResourceTypes();\n        \n        resourceTypes.forEach(resourceType => {\n            this.mineralDeposits.push({\n                type: resourceType,\n                richness: Math.random() * 0.7 + 0.3, // 0.3 to 1.0\n                accessibility: Math.random() * 0.8 + 0.2, // 0.2 to 1.0\n                extractionDifficulty: Math.random() * 0.6 + 0.2 // 0.2 to 0.8\n            });\n        });\n        \n        // Generate surface conditions\n        this.generateSurfaceConditions();\n    }\n\n    /**\n     * Get available resource types for this body\n     */\n    private getResourceTypes(): string[] {\n        const baseResources = ['metal', 'crystals'];\n        \n        if (this.type === 'asteroid') {\n            return [...baseResources, 'rare_metals', 'ice'];\n        }\n        \n        if (this.planetData) {\n            switch (this.planetData.type) {\n                case PlanetType.Terrestrial:\n                    return [...baseResources, 'rare_earth', 'radioactive'];\n                case PlanetType.Volcanic:\n                    return [...baseResources, 'sulfur', 'rare_metals'];\n                case PlanetType.Frozen:\n                    return [...baseResources, 'ice', 'frozen_gases'];\n                case PlanetType.Desert:\n                    return [...baseResources, 'silicon', 'rare_earth'];\n                case PlanetType.Ocean:\n                    return [...baseResources, 'deuterium', 'biologics'];\n                default:\n                    return baseResources;\n            }\n        }\n        \n        return baseResources;\n    }\n\n    /**\n     * Generate surface conditions for landing/mining\n     */\n    private generateSurfaceConditions(): void {\n        if (this.type === 'star') return;\n        \n        let temperature = 273; // Default Earth-like\n        let gravity = 1.0;\n        let radiation = 0.0;\n        let weather = 'none';\n        let landingDifficulty = 0.2;\n        \n        if (this.planetData) {\n            temperature = this.planetData.temperature;\n            gravity = Math.sqrt(this.planetData.mass); // Simplified gravity calculation\n            \n            // Radiation based on proximity to star and atmosphere\n            radiation = this.hasAtmosphere ? 0.1 : 0.3;\n            \n            // Weather based on atmosphere and temperature\n            if (this.hasAtmosphere) {\n                if (temperature > 373) weather = 'extreme_heat';\n                else if (temperature < 273) weather = 'frozen';\n                else weather = 'stable';\n            }\n            \n            // Landing difficulty based on conditions\n            landingDifficulty = Math.min(0.9, \n                (Math.abs(temperature - 273) / 500) + \n                (Math.abs(gravity - 1) * 0.3) + \n                (radiation * 0.4)\n            );\n        }\n        \n        this.surfaceConditions = {\n            temperature,\n            gravity,\n            radiation,\n            weather,\n            landingDifficulty\n        };\n    }\n\n    /**\n     * Update orbital mechanics and rotation\n     */\n    update(deltaTime: number): void {\n        // Update orbital position\n        if (this.orbitCenter && this.orbitRadius > 0) {\n            this.orbitAngle += this.orbitSpeed * deltaTime;\n            \n            this.position.x = this.orbitCenter.x + Math.cos(this.orbitAngle) * this.orbitRadius;\n            this.position.y = this.orbitCenter.y + Math.sin(this.orbitAngle) * this.orbitRadius;\n        }\n        \n        // Update rotation (30-frame animation cycle)\n        this.currentRotation += this.rotationSpeed * deltaTime;\n        if (this.currentRotation > 2 * Math.PI) {\n            this.currentRotation -= 2 * Math.PI;\n        }\n        \n        // Update physics object position if exists\n        if (this.physicsObject) {\n            this.physicsObject.position = { ...this.position };\n        }\n    }\n\n    /**\n     * Render the celestial body with dark retro style\n     */\n    render(renderer: Renderer, cameraPosition: Vector2, config: CelestialBodyConfig): void {\n        const distance = this.getDistanceFrom(cameraPosition);\n        \n        // Don't render if too far away\n        if (distance > config.renderDistance) return;\n        \n        // Calculate screen position\n        const screenPos = {\n            x: this.position.x - cameraPosition.x + 512, // Assuming 1024x768 screen\n            y: this.position.y - cameraPosition.y + 384\n        };\n        \n        // Calculate size based on distance\n        const baseSize = this.radius;\n        const scaledSize = Math.max(config.minPixelSize, \n            Math.min(config.maxPixelSize, baseSize * (config.renderDistance / distance)));\n        \n        // Render orbit line if enabled and not too close\n        if (config.showOrbitLines && this.orbitCenter && distance > 100) {\n            this.renderOrbitLine(renderer, cameraPosition, config);\n        }\n        \n        // Render atmosphere if present\n        if (this.hasAtmosphere && this.atmosphereColor) {\n            const atmoSize = scaledSize * 1.3;\n            renderer.drawCircle(screenPos.x, screenPos.y, atmoSize, this.atmosphereColor, true);\n        }\n        \n        // Render rings if present\n        if (this.hasRings && this.ringColor) {\n            this.renderRings(renderer, screenPos, scaledSize);\n        }\n        \n        // Render main body\n        renderer.drawCircle(screenPos.x, screenPos.y, scaledSize, this.color, true);\n        \n        // Add subtle rotation texture for planets\n        if (this.type === 'planet' && scaledSize > 8) {\n            this.renderSurfaceDetails(renderer, screenPos, scaledSize);\n        }\n        \n        // Render star glow effect (very subtle)\n        if (this.type === 'star') {\n            this.renderStarGlow(renderer, screenPos, scaledSize);\n        }\n        \n        // Render name if close enough and discovered\n        if (distance < config.renderDistance / 3 && this.isDiscovered) {\n            renderer.renderText(this.name, screenPos.x - 20, screenPos.y - scaledSize - 15, \n                { r: 48, g: 48, b: 48 }, 8);\n        }\n    }\n\n    /**\n     * Render orbit line with dark, subtle styling\n     */\n    private renderOrbitLine(renderer: Renderer, cameraPosition: Vector2, config: CelestialBodyConfig): void {\n        if (!this.orbitCenter) return;\n        \n        const centerScreen = {\n            x: this.orbitCenter.x - cameraPosition.x + 512,\n            y: this.orbitCenter.y - cameraPosition.y + 384\n        };\n        \n        // Render faint orbit line\n        const orbitColor = { \n            r: Math.floor(this.color.r * 0.3), \n            g: Math.floor(this.color.g * 0.3), \n            b: Math.floor(this.color.b * 0.3) \n        };\n        \n        renderer.drawCircle(centerScreen.x, centerScreen.y, this.orbitRadius, orbitColor, false);\n    }\n\n    /**\n     * Render planet rings with dark styling\n     */\n    private renderRings(renderer: Renderer, screenPos: Vector2, size: number): void {\n        if (!this.ringColor) return;\n        \n        const innerRadius = size * 1.5;\n        const outerRadius = size * 2.2;\n        \n        // Draw ring segments\n        for (let radius = innerRadius; radius < outerRadius; radius += 2) {\n            const alpha = 1 - ((radius - innerRadius) / (outerRadius - innerRadius)) * 0.7;\n            const ringColor = {\n                r: Math.floor(this.ringColor.r * alpha),\n                g: Math.floor(this.ringColor.g * alpha),\n                b: Math.floor(this.ringColor.b * alpha)\n            };\n            \n            renderer.drawCircle(screenPos.x, screenPos.y, radius, ringColor, false);\n        }\n    }\n\n    /**\n     * Render surface details with 30-frame rotation\n     */\n    private renderSurfaceDetails(renderer: Renderer, screenPos: Vector2, size: number): void {\n        const rotationFrame = Math.floor((this.currentRotation / (2 * Math.PI)) * 30);\n        \n        // Simple surface features that rotate\n        for (let i = 0; i < 3; i++) {\n            const angle = (i * 2 * Math.PI / 3) + this.currentRotation;\n            const featureX = screenPos.x + Math.cos(angle) * (size * 0.6);\n            const featureY = screenPos.y + Math.sin(angle) * (size * 0.3); // Flattened for 2D view\n            \n            // Dark surface features\n            const featureColor = {\n                r: Math.max(0, this.color.r - 8),\n                g: Math.max(0, this.color.g - 8),\n                b: Math.max(0, this.color.b - 8)\n            };\n            \n            renderer.fillRect(featureX - 1, featureY - 1, 2, 2, featureColor);\n        }\n    }\n\n    /**\n     * Render subtle star glow effect\n     */\n    private renderStarGlow(renderer: Renderer, screenPos: Vector2, size: number): void {\n        // Very subtle glow effect (no bright neons)\n        const glowColor = {\n            r: Math.min(64, this.color.r + 16),\n            g: Math.min(64, this.color.g + 16),\n            b: Math.min(64, this.color.b + 16)\n        };\n        \n        renderer.drawCircle(screenPos.x, screenPos.y, size * 1.2, glowColor, false);\n    }\n\n    /**\n     * Check for ship interactions\n     */\n    checkInteraction(shipPosition: Vector2): InteractionZone | null {\n        const distance = this.getDistanceFrom(shipPosition);\n        \n        // Check each interaction zone\n        for (const zone of this.interactionZones) {\n            if (distance <= zone.radius) {\n                zone.distance = distance;\n                return zone;\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Perform mining operation\n     */\n    performMining(shipPosition: Vector2, miningEfficiency: number = 1.0): MiningResult | null {\n        const interaction = this.checkInteraction(shipPosition);\n        \n        if (!interaction || interaction.type !== 'surface') {\n            return null;\n        }\n        \n        // Find best resource to mine\n        const availableResources = this.mineralDeposits.filter(deposit => \n            deposit.richness > this.resourcesDepleted\n        );\n        \n        if (availableResources.length === 0) {\n            return null;\n        }\n        \n        const resource = availableResources[0]; // Mine the first available resource\n        const extractedQuantity = resource.richness * resource.accessibility * miningEfficiency;\n        \n        // Deplete resources\n        resource.richness = Math.max(0, resource.richness - 0.05);\n        this.resourcesDepleted = Math.min(1, this.resourcesDepleted + 0.02);\n        \n        return {\n            resourceType: resource.type,\n            quantity: extractedQuantity,\n            quality: resource.accessibility,\n            depletion: this.resourcesDepleted\n        };\n    }\n\n    /**\n     * Perform detailed scan\n     */\n    performScan(): ScanResult {\n        this.isScanned = true;\n        \n        return {\n            composition: this.getResourceTypes(),\n            atmosphere: this.atmosphereData,\n            surfaceConditions: this.surfaceConditions!,\n            biologicalSigns: this.planetData?.hasLife || false,\n            anomalies: [], // TODO: Generate anomalies\n            mineralDeposits: [...this.mineralDeposits]\n        };\n    }\n\n    /**\n     * Get distance from a position\n     */\n    getDistanceFrom(position: Vector2): number {\n        const dx = this.position.x - position.x;\n        const dy = this.position.y - position.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Set orbit around another body\n     */\n    setOrbit(center: Vector2, radius: number, speed: number): void {\n        this.orbitCenter = { ...center };\n        this.orbitRadius = radius;\n        this.orbitSpeed = speed;\n    }\n\n    /**\n     * Get interaction info for UI\n     */\n    getInteractionInfo(): string {\n        if (!this.isDiscovered) return 'Unknown Object';\n        \n        let info = `${this.name} (${this.type.toUpperCase()})`;\n        \n        if (this.surfaceConditions) {\n            info += `\\nTemp: ${this.surfaceConditions.temperature.toFixed(0)}K`;\n            info += `\\nGravity: ${this.surfaceConditions.gravity.toFixed(1)}g`;\n            \n            if (this.mineralDeposits.length > 0) {\n                info += `\\nResources: ${this.mineralDeposits.length} types`;\n            }\n        }\n        \n        return info;\n    }\n}","/**\n * Interaction Panel UI\n * Popup window for celestial body interactions with retro CRT styling\n */\n\nimport { Renderer, Color, Vector2 } from '@core/Renderer';\nimport { InputManager } from '@core/InputManager';\nimport { Logger } from '@utils/Logger';\nimport { InteractionZone, CelestialBody, ScanResult, MiningResult } from '@entities/CelestialBody';\n\nexport interface InteractionPanelConfig {\n    enableAnimations: boolean;\n    fadeSpeed: number;\n    maxWidth: number;\n    maxHeight: number;\n}\n\nexport interface PanelInteractions {\n    onEnterOrbit?: (bodyId: string) => void;\n    onLand?: (bodyId: string) => void;\n    onContinueFlight?: () => void;\n    onStartMining?: (bodyId: string) => void;\n    onPerformScan?: (bodyId: string) => void;\n    onExitOrbit?: (bodyId: string) => void;\n}\n\ninterface InteractionButton {\n    id: string;\n    label: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    enabled: boolean;\n    color: Color;\n    requirements?: string[];\n}\n\nexport class InteractionPanel {\n    private config: InteractionPanelConfig;\n    private interactions: PanelInteractions;\n    \n    // Panel state\n    private isVisible: boolean = false;\n    private currentBody: CelestialBody | null = null;\n    private currentZone: InteractionZone | null = null;\n    private opacity: number = 0;\n    private targetOpacity: number = 0;\n    \n    // Panel layout\n    private panelX: number = 0;\n    private panelY: number = 0;\n    private panelWidth: number = 0;\n    private panelHeight: number = 0;\n    \n    // Interactive elements\n    private buttons: InteractionButton[] = [];\n    private hoveredButton: string | null = null;\n    private selectedButton: string | null = null;\n    \n    // Content data\n    private bodyInfo: string = '';\n    private scanData: ScanResult | null = null;\n    private miningResults: MiningResult[] = [];\n    \n    private logger: Logger;\n\n    constructor(\n        config: Partial<InteractionPanelConfig> = {},\n        interactions: PanelInteractions = {}\n    ) {\n        this.logger = new Logger('InteractionPanel');\n        this.interactions = interactions;\n        \n        this.config = {\n            enableAnimations: true,\n            fadeSpeed: 3.0,\n            maxWidth: 300,\n            maxHeight: 200,\n            ...config\n        };\n        \n        this.logger.info('📱 Interaction panel initialized');\n    }\n\n    /**\n     * Show interaction panel for a celestial body\n     */\n    showInteraction(body: CelestialBody, zone: InteractionZone, shipPosition: Vector2): void {\n        this.currentBody = body;\n        this.currentZone = zone;\n        this.bodyInfo = body.getInteractionInfo();\n        \n        // Calculate panel position near the body\n        this.calculatePanelPosition(body.position, shipPosition);\n        \n        // Setup buttons based on interaction type\n        this.setupButtons();\n        \n        // Show panel with animation\n        this.targetOpacity = 1.0;\n        this.isVisible = true;\n        \n        this.logger.debug(`Showing interaction for ${body.name}`, {\n            type: zone.type,\n            canEnter: zone.canEnter\n        });\n    }\n\n    /**\n     * Hide the interaction panel\n     */\n    hideInteraction(): void {\n        this.targetOpacity = 0.0;\n        \n        // Reset after fade out\n        setTimeout(() => {\n            if (this.targetOpacity === 0) {\n                this.isVisible = false;\n                this.currentBody = null;\n                this.currentZone = null;\n                this.scanData = null;\n                this.miningResults = [];\n            }\n        }, this.config.enableAnimations ? 500 : 0);\n        \n        this.logger.debug('Hiding interaction panel');\n    }\n\n    /**\n     * Calculate optimal panel position\n     */\n    private calculatePanelPosition(bodyPosition: Vector2, shipPosition: Vector2): void {\n        // Base position relative to body (convert world to screen coordinates)\n        const screenBodyX = bodyPosition.x - shipPosition.x + 512;\n        const screenBodyY = bodyPosition.y - shipPosition.y + 384;\n        \n        // Panel dimensions\n        this.panelWidth = Math.min(this.config.maxWidth, 280);\n        this.panelHeight = Math.min(this.config.maxHeight, 180);\n        \n        // Position panel to the right of the body, avoiding screen edges\n        this.panelX = screenBodyX + 60;\n        this.panelY = screenBodyY - this.panelHeight / 2;\n        \n        // Keep panel on screen\n        if (this.panelX + this.panelWidth > 1024) {\n            this.panelX = screenBodyX - this.panelWidth - 60; // Move to left side\n        }\n        \n        if (this.panelY < 20) this.panelY = 20;\n        if (this.panelY + this.panelHeight > 500) { // Avoid cockpit area\n            this.panelY = 500 - this.panelHeight;\n        }\n    }\n\n    /**\n     * Setup interaction buttons based on current zone\n     */\n    private setupButtons(): void {\n        this.buttons = [];\n        \n        if (!this.currentZone || !this.currentBody) return;\n        \n        const buttonWidth = 80;\n        const buttonHeight = 25;\n        const buttonSpacing = 10;\n        let currentY = this.panelY + 80;\n        \n        // Enter Orbit button\n        if (this.currentZone.type === 'orbit' && this.currentZone.canEnter) {\n            this.buttons.push({\n                id: 'enter_orbit',\n                label: 'ENTER ORBIT',\n                x: this.panelX + 10,\n                y: currentY,\n                width: buttonWidth,\n                height: buttonHeight,\n                enabled: true,\n                color: { r: 16, g: 48, b: 16 } // Dark green\n            });\n            currentY += buttonHeight + buttonSpacing;\n        }\n        \n        // Land button\n        if (this.currentZone.type === 'surface' && this.currentZone.canEnter) {\n            this.buttons.push({\n                id: 'land',\n                label: 'LAND',\n                x: this.panelX + 10,\n                y: currentY,\n                width: buttonWidth,\n                height: buttonHeight,\n                enabled: true,\n                color: { r: 72, g: 48, b: 12 } // Dark amber\n            });\n            currentY += buttonHeight + buttonSpacing;\n        }\n        \n        // Scan button (always available when close)\n        this.buttons.push({\n            id: 'scan',\n            label: 'SCAN',\n            x: this.panelX + 100,\n            y: this.panelY + 80,\n            width: buttonWidth,\n            height: buttonHeight,\n            enabled: true,\n            color: { r: 16, g: 40, b: 32 } // Dark teal\n        });\n        \n        // Mining button (if landed or in atmosphere)\n        if (this.currentZone.type === 'surface' || this.currentZone.type === 'atmosphere') {\n            if (this.currentBody.mineralDeposits.length > 0) {\n                this.buttons.push({\n                    id: 'mine',\n                    label: 'MINE',\n                    x: this.panelX + 100,\n                    y: this.panelY + 110,\n                    width: buttonWidth,\n                    height: buttonHeight,\n                    enabled: this.currentBody.resourcesDepleted < 0.9,\n                    color: { r: 48, g: 32, b: 16 } // Dark orange\n                });\n            }\n        }\n        \n        // Continue Flight button (always present)\n        this.buttons.push({\n            id: 'continue',\n            label: 'CONTINUE',\n            x: this.panelX + 10,\n            y: this.panelY + this.panelHeight - 35,\n            width: this.panelWidth - 20,\n            height: buttonHeight,\n            enabled: true,\n            color: { r: 32, g: 32, b: 32 } // Gray\n        });\n    }\n\n    /**\n     * Update panel state\n     */\n    update(deltaTime: number, input: InputManager): void {\n        if (!this.isVisible && this.targetOpacity === 0) return;\n        \n        // Update opacity animation\n        if (this.config.enableAnimations) {\n            if (this.opacity < this.targetOpacity) {\n                this.opacity = Math.min(this.targetOpacity, this.opacity + this.config.fadeSpeed * deltaTime);\n            } else if (this.opacity > this.targetOpacity) {\n                this.opacity = Math.max(this.targetOpacity, this.opacity - this.config.fadeSpeed * deltaTime);\n            }\n        } else {\n            this.opacity = this.targetOpacity;\n        }\n        \n        // Handle input if visible\n        if (this.isVisible && this.opacity > 0.5) {\n            this.handleInput(input);\n        }\n    }\n\n    /**\n     * Handle user input\n     */\n    private handleInput(input: InputManager): void {\n        const mousePos = input.getMousePosition();\n        \n        // Check for button hover\n        this.hoveredButton = null;\n        for (const button of this.buttons) {\n            if (this.isPointInButton(mousePos, button)) {\n                this.hoveredButton = button.id;\n                break;\n            }\n        }\n        \n        // Handle button clicks\n        if (input.isMouseButtonPressed(0) && this.hoveredButton) {\n            this.handleButtonClick(this.hoveredButton);\n        }\n        \n        // Handle keyboard shortcuts\n        if (input.isKeyPressed('KeyE')) {\n            this.handleButtonClick('enter_orbit');\n        } else if (input.isKeyPressed('KeyL')) {\n            this.handleButtonClick('land');\n        } else if (input.isKeyPressed('KeyS')) {\n            this.handleButtonClick('scan');\n        } else if (input.isKeyPressed('KeyM')) {\n            this.handleButtonClick('mine');\n        } else if (input.isKeyPressed('KeyC') || input.isKeyPressed('Escape')) {\n            this.handleButtonClick('continue');\n        }\n    }\n\n    /**\n     * Check if point is inside button\n     */\n    private isPointInButton(point: Vector2, button: InteractionButton): boolean {\n        return point.x >= button.x && \n               point.x <= button.x + button.width &&\n               point.y >= button.y && \n               point.y <= button.y + button.height;\n    }\n\n    /**\n     * Handle button clicks\n     */\n    private handleButtonClick(buttonId: string): void {\n        if (!this.currentBody) return;\n        \n        const button = this.buttons.find(b => b.id === buttonId);\n        if (!button || !button.enabled) return;\n        \n        switch (buttonId) {\n            case 'enter_orbit':\n                this.interactions.onEnterOrbit?.(this.currentBody.id);\n                this.logger.info(`🛰️ Entering orbit around ${this.currentBody.name}`);\n                this.hideInteraction();\n                break;\n                \n            case 'land':\n                this.interactions.onLand?.(this.currentBody.id);\n                this.logger.info(`🚁 Landing on ${this.currentBody.name}`);\n                this.hideInteraction();\n                break;\n                \n            case 'scan':\n                this.performScan();\n                break;\n                \n            case 'mine':\n                this.performMining();\n                break;\n                \n            case 'continue':\n                this.interactions.onContinueFlight?.();\n                this.hideInteraction();\n                break;\n        }\n    }\n\n    /**\n     * Perform scan operation\n     */\n    private performScan(): void {\n        if (!this.currentBody) return;\n        \n        this.scanData = this.currentBody.performScan();\n        this.currentBody.isDiscovered = true;\n        \n        this.interactions.onPerformScan?.(this.currentBody.id);\n        \n        this.logger.info(`🔍 Scanned ${this.currentBody.name}`, {\n            composition: this.scanData.composition,\n            biologicalSigns: this.scanData.biologicalSigns\n        });\n        \n        // Refresh body info with scan data\n        this.bodyInfo = this.currentBody.getInteractionInfo();\n    }\n\n    /**\n     * Perform mining operation\n     */\n    private performMining(): void {\n        if (!this.currentBody) return;\n        \n        const shipPosition = { x: 0, y: 0 }; // TODO: Get actual ship position\n        const result = this.currentBody.performMining(shipPosition, 1.0);\n        \n        if (result) {\n            this.miningResults.push(result);\n            this.interactions.onStartMining?.(this.currentBody.id);\n            \n            this.logger.info(`⛏️ Mined ${result.quantity.toFixed(2)} ${result.resourceType}`, {\n                quality: result.quality,\n                depletion: result.depletion\n            });\n            \n            // Update button state if resources depleted\n            if (result.depletion > 0.9) {\n                const mineButton = this.buttons.find(b => b.id === 'mine');\n                if (mineButton) {\n                    mineButton.enabled = false;\n                    mineButton.color = { r: 24, g: 24, b: 24 }; // Disabled gray\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the interaction panel\n     */\n    render(renderer: Renderer): void {\n        if (!this.isVisible || this.opacity <= 0) return;\n        \n        // Apply opacity to all colors\n        const alpha = this.opacity;\n        \n        // Render panel background (dark CRT monitor style)\n        const bgColor = { \n            r: Math.floor(8 * alpha), \n            g: Math.floor(12 * alpha), \n            b: Math.floor(8 * alpha) \n        };\n        renderer.fillRect(this.panelX, this.panelY, this.panelWidth, this.panelHeight, bgColor);\n        \n        // Panel border (dark green CRT glow)\n        const borderColor = { \n            r: Math.floor(16 * alpha), \n            g: Math.floor(48 * alpha), \n            b: Math.floor(16 * alpha) \n        };\n        this.renderPanelBorder(renderer, borderColor);\n        \n        // Panel title\n        const titleColor = { \n            r: Math.floor(12 * alpha), \n            g: Math.floor(36 * alpha), \n            b: Math.floor(12 * alpha) \n        };\n        renderer.renderText('PROXIMITY ALERT', this.panelX + 10, this.panelY + 10, titleColor, 10);\n        \n        // Body information\n        if (this.bodyInfo) {\n            this.renderBodyInfo(renderer, alpha);\n        }\n        \n        // Scan data\n        if (this.scanData) {\n            this.renderScanData(renderer, alpha);\n        }\n        \n        // Mining results\n        if (this.miningResults.length > 0) {\n            this.renderMiningResults(renderer, alpha);\n        }\n        \n        // Render buttons\n        this.renderButtons(renderer, alpha);\n        \n        // Render CRT effects\n        this.renderCRTEffects(renderer, alpha);\n    }\n\n    /**\n     * Render panel border with CRT styling\n     */\n    private renderPanelBorder(renderer: Renderer, color: Color): void {\n        // Top and bottom borders\n        renderer.fillRect(this.panelX, this.panelY, this.panelWidth, 2, color);\n        renderer.fillRect(this.panelX, this.panelY + this.panelHeight - 2, this.panelWidth, 2, color);\n        \n        // Left and right borders\n        renderer.fillRect(this.panelX, this.panelY, 2, this.panelHeight, color);\n        renderer.fillRect(this.panelX + this.panelWidth - 2, this.panelY, 2, this.panelHeight, color);\n        \n        // Corner highlights\n        const highlightColor = { r: color.r + 8, g: color.g + 8, b: color.b + 8 };\n        renderer.fillRect(this.panelX, this.panelY, 8, 2, highlightColor);\n        renderer.fillRect(this.panelX, this.panelY, 2, 8, highlightColor);\n    }\n\n    /**\n     * Render body information\n     */\n    private renderBodyInfo(renderer: Renderer, alpha: number): void {\n        const textColor = { \n            r: Math.floor(48 * alpha), \n            g: Math.floor(48 * alpha), \n            b: Math.floor(48 * alpha) \n        };\n        \n        const lines = this.bodyInfo.split('\\n');\n        let y = this.panelY + 30;\n        \n        lines.forEach(line => {\n            renderer.renderText(line, this.panelX + 10, y, textColor, 8);\n            y += 12;\n        });\n    }\n\n    /**\n     * Render scan data\n     */\n    private renderScanData(renderer: Renderer, alpha: number): void {\n        if (!this.scanData) return;\n        \n        const textColor = { \n            r: Math.floor(32 * alpha), \n            g: Math.floor(80 * alpha), \n            b: Math.floor(64 * alpha) \n        };\n        \n        let y = this.panelY + 30;\n        \n        renderer.renderText(`COMP: ${this.scanData.composition.join(', ')}`, \n            this.panelX + 10, y, textColor, 7);\n        y += 10;\n        \n        if (this.scanData.biologicalSigns) {\n            renderer.renderText('BIO: DETECTED', this.panelX + 10, y, \n                { r: Math.floor(96 * alpha), g: Math.floor(64 * alpha), b: Math.floor(16 * alpha) }, 7);\n            y += 10;\n        }\n        \n        renderer.renderText(`MINERALS: ${this.scanData.mineralDeposits.length}`, \n            this.panelX + 10, y, textColor, 7);\n    }\n\n    /**\n     * Render mining results\n     */\n    private renderMiningResults(renderer: Renderer, alpha: number): void {\n        const textColor = { \n            r: Math.floor(96 * alpha), \n            g: Math.floor(64 * alpha), \n            b: Math.floor(16 * alpha) \n        };\n        \n        const lastResult = this.miningResults[this.miningResults.length - 1];\n        const y = this.panelY + this.panelHeight - 60;\n        \n        renderer.renderText(`MINED: ${lastResult.quantity.toFixed(1)} ${lastResult.resourceType}`, \n            this.panelX + 10, y, textColor, 8);\n    }\n\n    /**\n     * Render interactive buttons\n     */\n    private renderButtons(renderer: Renderer, alpha: number): void {\n        this.buttons.forEach(button => {\n            const isHovered = this.hoveredButton === button.id;\n            const buttonAlpha = button.enabled ? alpha : alpha * 0.5;\n            \n            // Button background\n            const bgColor = isHovered ? \n                { \n                    r: Math.floor((button.color.r + 16) * buttonAlpha), \n                    g: Math.floor((button.color.g + 16) * buttonAlpha), \n                    b: Math.floor((button.color.b + 16) * buttonAlpha) \n                } : \n                { \n                    r: Math.floor(button.color.r * buttonAlpha), \n                    g: Math.floor(button.color.g * buttonAlpha), \n                    b: Math.floor(button.color.b * buttonAlpha) \n                };\n            \n            renderer.fillRect(button.x, button.y, button.width, button.height, bgColor);\n            \n            // Button border\n            const borderColor = { \n                r: Math.floor((button.color.r + 32) * buttonAlpha), \n                g: Math.floor((button.color.g + 32) * buttonAlpha), \n                b: Math.floor((button.color.b + 32) * buttonAlpha) \n            };\n            renderer.drawLine(button.x, button.y, button.x + button.width, button.y, borderColor);\n            renderer.drawLine(button.x, button.y, button.x, button.y + button.height, borderColor);\n            \n            // Button text\n            const textColor = button.enabled ? \n                { \n                    r: Math.floor(64 * alpha), \n                    g: Math.floor(64 * alpha), \n                    b: Math.floor(64 * alpha) \n                } : \n                { \n                    r: Math.floor(32 * alpha), \n                    g: Math.floor(32 * alpha), \n                    b: Math.floor(32 * alpha) \n                };\n            \n            const textX = button.x + (button.width - button.label.length * 6) / 2;\n            const textY = button.y + (button.height - 8) / 2;\n            renderer.renderText(button.label, textX, textY, textColor, 8);\n        });\n    }\n\n    /**\n     * Render CRT effects\n     */\n    private renderCRTEffects(renderer: Renderer, alpha: number): void {\n        // Subtle scanline effect across the panel\n        for (let y = this.panelY; y < this.panelY + this.panelHeight; y += 4) {\n            const scanlineColor = { \n                r: Math.floor(4 * alpha), \n                g: Math.floor(8 * alpha), \n                b: Math.floor(4 * alpha) \n            };\n            renderer.fillRect(this.panelX, y, this.panelWidth, 1, scanlineColor);\n        }\n    }\n\n    /**\n     * Check if panel is currently visible\n     */\n    isInteractionVisible(): boolean {\n        return this.isVisible;\n    }\n\n    /**\n     * Get current interaction body\n     */\n    getCurrentBody(): CelestialBody | null {\n        return this.currentBody;\n    }\n}","/**\n * Celestial Body Manager\n * Manages all celestial bodies in the current star system\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer } from '@core/Renderer';\nimport { CelestialBody, CelestialBodyConfig, BodyInteraction, InteractionZone } from '@entities/CelestialBody';\nimport { InteractionPanel, PanelInteractions } from '@ui/InteractionPanel';\nimport { StarSystemData, PlanetData, StarData } from '@procedural/GalaxyGenerator';\nimport { InputManager } from '@core/InputManager';\n\nexport interface CelestialManagerConfig {\n    renderDistance: number;\n    interactionDistance: number;\n    showOrbitLines: boolean;\n    enableInteractions: boolean;\n    celestialBodyConfig: CelestialBodyConfig;\n}\n\nexport interface SystemLoadConfig {\n    systemData: StarSystemData;\n    playerStartPosition?: Vector2;\n    cameraPosition: Vector2;\n}\n\nexport class CelestialManager {\n    private bodies: Map<string, CelestialBody> = new Map();\n    private interactionPanel: InteractionPanel;\n    private config: CelestialManagerConfig;\n    \n    // Current system data\n    private currentSystem: StarSystemData | null = null;\n    private systemCenter: Vector2 = { x: 512, y: 384 };\n    \n    // Interaction state\n    private nearbyBodies: CelestialBody[] = [];\n    private currentInteraction: { body: CelestialBody; zone: InteractionZone } | null = null;\n    \n    // Performance tracking\n    private lastUpdateTime: number = 0;\n    private frameCount: number = 0;\n    \n    private logger: Logger;\n\n    constructor(\n        config: Partial<CelestialManagerConfig> = {},\n        panelInteractions: PanelInteractions = {}\n    ) {\n        this.logger = new Logger('CelestialManager');\n        \n        this.config = {\n            renderDistance: 2000,\n            interactionDistance: 150,\n            showOrbitLines: true,\n            enableInteractions: true,\n            celestialBodyConfig: {\n                renderDistance: 2000,\n                orbitLineOpacity: 0.3,\n                showOrbitLines: true,\n                animationSpeed: 1.0,\n                minPixelSize: 2,\n                maxPixelSize: 80\n            },\n            ...config\n        };\n        \n        // Initialize interaction panel\n        this.interactionPanel = new InteractionPanel({\n            enableAnimations: true,\n            fadeSpeed: 3.0,\n            maxWidth: 300,\n            maxHeight: 200\n        }, panelInteractions);\n        \n        this.logger.info('🌌 Celestial manager initialized', {\n            renderDistance: this.config.renderDistance,\n            enableInteractions: this.config.enableInteractions\n        });\n    }\n\n    /**\n     * Load a star system\n     */\n    loadSystem(systemConfig: SystemLoadConfig): void {\n        this.logger.info(`🌟 Loading star system: ${systemConfig.systemData.name}`);\n        \n        // Clear existing bodies\n        this.clearSystem();\n        \n        // Store system data\n        this.currentSystem = systemConfig.systemData;\n        this.systemCenter = systemConfig.cameraPosition;\n        \n        // Create star\n        this.createStar(systemConfig.systemData.star);\n        \n        // Create planets\n        systemConfig.systemData.planets.forEach((planetData, index) => {\n            this.createPlanet(planetData, index);\n        });\n        \n        // Create moons for planets\n        systemConfig.systemData.planets.forEach(planetData => {\n            if (planetData.moons && planetData.moons.length > 0) {\n                planetData.moons.forEach(moonData => {\n                    this.createMoon(moonData, planetData);\n                });\n            }\n        });\n        \n        // Setup orbital mechanics\n        this.setupOrbitalMechanics();\n        \n        this.logger.info(`✅ System loaded: ${this.bodies.size} celestial bodies created`);\n    }\n\n    /**\n     * Create star from data\n     */\n    private createStar(starData: StarData): void {\n        const star = new CelestialBody({\n            id: starData.id,\n            name: starData.name,\n            type: 'star',\n            position: { ...this.systemCenter },\n            radius: Math.min(starData.radius * 20, 80), // Scale for visibility\n            mass: starData.mass * 1000000,\n            color: this.getStarColor(starData.temperature),\n            starData: starData\n        });\n        \n        // Mark as discovered (stars are always visible)\n        star.isDiscovered = true;\n        \n        this.bodies.set(star.id, star);\n        this.logger.debug(`⭐ Created star: ${star.name}`);\n    }\n\n    /**\n     * Get star color based on temperature (dark retro style)\n     */\n    private getStarColor(temperature: number): { r: number, g: number, b: number } {\n        // Dark, muted star colors\n        if (temperature > 25000) return { r: 32, g: 36, b: 48 }; // Blue giant\n        if (temperature > 10000) return { r: 40, g: 44, b: 48 }; // Blue-white\n        if (temperature > 7500) return { r: 48, g: 48, b: 48 };  // White\n        if (temperature > 6000) return { r: 48, g: 44, b: 36 };  // Yellow-white (Sun-like)\n        if (temperature > 5000) return { r: 48, g: 40, b: 28 };  // Yellow\n        if (temperature > 3500) return { r: 48, g: 32, b: 20 };  // Orange\n        return { r: 48, g: 24, b: 16 }; // Red dwarf\n    }\n\n    /**\n     * Create planet from data\n     */\n    private createPlanet(planetData: PlanetData, index: number): void {\n        // Calculate position in orbit around star\n        const angle = (index * Math.PI * 2) / (this.currentSystem?.planets.length || 1);\n        const orbitDistance = 150 + (planetData.orbitDistance * 30); // Scale for screen\n        \n        const position = {\n            x: this.systemCenter.x + Math.cos(angle) * orbitDistance,\n            y: this.systemCenter.y + Math.sin(angle) * orbitDistance\n        };\n        \n        const planet = new CelestialBody({\n            id: planetData.id,\n            name: planetData.name,\n            type: 'planet',\n            position: position,\n            radius: Math.max(planetData.radius * 10, 15), // Scale for visibility\n            mass: planetData.mass * 10000,\n            color: this.getPlanetColor(planetData),\n            planetData: planetData\n        });\n        \n        // Set orbital mechanics\n        planet.setOrbit(\n            { ...this.systemCenter },\n            orbitDistance,\n            2 * Math.PI / (planetData.orbitPeriod / 3600) // Convert to radians per hour\n        );\n        \n        this.bodies.set(planet.id, planet);\n        this.logger.debug(`🪐 Created planet: ${planet.name}`);\n    }\n\n    /**\n     * Get planet color based on type and surface (dark retro style)\n     */\n    private getPlanetColor(planetData: PlanetData): { r: number, g: number, b: number } {\n        // Dark, muted planet colors based on surface type and planet type\n        const surfaceType = planetData.surfaceType as string;\n        switch (surfaceType) {\n            case 'Rocky': return { r: 32, g: 24, b: 16 };\n            case 'Desert': return { r: 48, g: 32, b: 16 };\n            case 'Ocean': return { r: 8, g: 16, b: 32 };\n            case 'Ice': return { r: 32, g: 36, b: 40 };\n            case 'Lava': return { r: 32, g: 16, b: 8 };\n            case 'Gas': return { r: 40, g: 32, b: 24 };\n            case 'Toxic': return { r: 32, g: 24, b: 16 };\n            case 'Crystalline': return { r: 24, g: 32, b: 36 };\n            default: return { r: 24, g: 24, b: 24 };\n        }\n    }\n\n    /**\n     * Create moon from data\n     */\n    private createMoon(moonData: any, parentPlanet: PlanetData): void {\n        const parentBody = this.bodies.get(parentPlanet.id);\n        if (!parentBody) return;\n        \n        // Position moon around parent planet\n        const angle = Math.random() * Math.PI * 2;\n        const orbitDistance = moonData.orbitDistance * 3; // Scale for screen\n        \n        const position = {\n            x: parentBody.position.x + Math.cos(angle) * orbitDistance,\n            y: parentBody.position.y + Math.sin(angle) * orbitDistance\n        };\n        \n        const moon = new CelestialBody({\n            id: moonData.id,\n            name: moonData.name,\n            type: 'moon',\n            position: position,\n            radius: Math.max(moonData.radius * 8, 8), // Scale for visibility\n            mass: moonData.mass * 10000,\n            color: { r: 24, g: 24, b: 24 }, // Dark gray for moons\n            moonData: moonData\n        });\n        \n        // Set orbital mechanics around parent planet\n        moon.setOrbit(\n            { ...parentBody.position },\n            orbitDistance,\n            2 * Math.PI / (moonData.orbitPeriod / 60) // Convert to radians per minute\n        );\n        \n        this.bodies.set(moon.id, moon);\n        this.logger.debug(`🌙 Created moon: ${moon.name} (around ${parentPlanet.name})`);\n    }\n\n    /**\n     * Setup orbital mechanics for all bodies\n     */\n    private setupOrbitalMechanics(): void {\n        // Update moon orbits to follow their parent planets\n        this.bodies.forEach(body => {\n            if (body.type === 'moon' && body.moonData) {\n                const parentPlanet = Array.from(this.bodies.values()).find(planet => \n                    planet.type === 'planet' && planet.planetData?.moons?.some(moon => moon.id === body.id)\n                );\n                \n                if (parentPlanet) {\n                    // Moon orbit follows planet position\n                    const originalSetOrbit = body.setOrbit.bind(body);\n                    body.setOrbit = (center, radius, speed) => {\n                        // Update orbit center to parent planet's current position\n                        originalSetOrbit(parentPlanet.position, radius, speed);\n                    };\n                }\n            }\n        });\n    }\n\n    /**\n     * Update all celestial bodies\n     */\n    update(deltaTime: number, input: InputManager, shipPosition: Vector2): void {\n        this.lastUpdateTime = deltaTime;\n        this.frameCount++;\n        \n        // Update all celestial bodies\n        this.bodies.forEach(body => {\n            body.update(deltaTime);\n        });\n        \n        // Update interactions if enabled\n        if (this.config.enableInteractions) {\n            this.updateInteractions(shipPosition, input);\n        }\n        \n        // Update interaction panel\n        this.interactionPanel.update(deltaTime, input);\n    }\n\n    /**\n     * Update interaction system\n     */\n    private updateInteractions(shipPosition: Vector2, input: InputManager): void {\n        // Find nearby bodies\n        this.nearbyBodies = [];\n        let closestInteraction: { body: CelestialBody; zone: InteractionZone } | null = null;\n        let closestDistance = Infinity;\n        \n        this.bodies.forEach(body => {\n            const distance = body.getDistanceFrom(shipPosition);\n            \n            if (distance <= this.config.interactionDistance) {\n                this.nearbyBodies.push(body);\n                \n                // Check for interaction zones\n                const zone = body.checkInteraction(shipPosition);\n                if (zone && distance < closestDistance) {\n                    closestDistance = distance;\n                    closestInteraction = { body, zone };\n                }\n            }\n        });\n        \n                // Handle interaction changes\n        if (closestInteraction && closestInteraction !== this.currentInteraction) {\n            // New interaction\n            this.currentInteraction = closestInteraction;\n            const interaction = closestInteraction as { body: CelestialBody; zone: InteractionZone };\n            this.interactionPanel.showInteraction(\n                interaction.body,\n                interaction.zone,\n                shipPosition\n            );\n            \n            this.logger.debug(`🎯 New interaction: ${interaction.body.name} (${interaction.zone.type})`);\n            \n        } else if (!closestInteraction && this.currentInteraction) {\n            // Lost interaction\n            this.currentInteraction = null;\n            this.interactionPanel.hideInteraction();\n            \n            this.logger.debug('🚀 Left interaction zone');\n        }\n    }\n\n    /**\n     * Render all celestial bodies\n     */\n    render(renderer: Renderer, cameraPosition: Vector2): void {\n        // Sort bodies by distance for proper rendering order\n        const sortedBodies = Array.from(this.bodies.values()).sort((a, b) => {\n            const distA = a.getDistanceFrom(cameraPosition);\n            const distB = b.getDistanceFrom(cameraPosition);\n            return distB - distA; // Render farthest first\n        });\n        \n        // Render celestial bodies\n        sortedBodies.forEach(body => {\n            body.render(renderer, cameraPosition, this.config.celestialBodyConfig);\n        });\n        \n        // Render interaction panel\n        this.interactionPanel.render(renderer);\n    }\n\n    /**\n     * Clear current system\n     */\n    private clearSystem(): void {\n        this.bodies.clear();\n        this.nearbyBodies = [];\n        this.currentInteraction = null;\n        this.interactionPanel.hideInteraction();\n        \n        this.logger.debug('🧹 System cleared');\n    }\n\n    /**\n     * Get celestial body by ID\n     */\n    getBody(bodyId: string): CelestialBody | undefined {\n        return this.bodies.get(bodyId);\n    }\n\n    /**\n     * Get all bodies in system\n     */\n    getAllBodies(): CelestialBody[] {\n        return Array.from(this.bodies.values());\n    }\n\n    /**\n     * Get nearby bodies\n     */\n    getNearbyBodies(): CelestialBody[] {\n        return [...this.nearbyBodies];\n    }\n\n    /**\n     * Get current interaction\n     */\n    getCurrentInteraction(): { body: CelestialBody, zone: InteractionZone } | null {\n        return this.currentInteraction;\n    }\n\n    /**\n     * Force discovery of all bodies (for debugging)\n     */\n    discoverAllBodies(): void {\n        this.bodies.forEach(body => {\n            body.isDiscovered = true;\n        });\n        this.logger.info('🔍 All bodies discovered');\n    }\n\n    /**\n     * Get system statistics\n     */\n    getSystemStats(): {\n        bodyCount: number;\n        discoveredBodies: number;\n        scannedBodies: number;\n        nearbyBodies: number;\n        hasActiveInteraction: boolean;\n    } {\n        const discoveredBodies = Array.from(this.bodies.values()).filter(b => b.isDiscovered).length;\n        const scannedBodies = Array.from(this.bodies.values()).filter(b => b.isScanned).length;\n        \n        return {\n            bodyCount: this.bodies.size,\n            discoveredBodies,\n            scannedBodies,\n            nearbyBodies: this.nearbyBodies.length,\n            hasActiveInteraction: this.currentInteraction !== null\n        };\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig: Partial<CelestialManagerConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        this.logger.debug('Config updated', newConfig);\n    }\n\n    /**\n     * Get current system data\n     */\n    getCurrentSystem(): StarSystemData | null {\n        return this.currentSystem;\n    }\n\n    /**\n     * Perform action on body\n     */\n    performAction(bodyId: string, action: 'scan' | 'mine' | 'land', shipPosition?: Vector2): boolean {\n        const body = this.bodies.get(bodyId);\n        if (!body) return false;\n        \n        switch (action) {\n            case 'scan':\n                body.performScan();\n                body.isDiscovered = true;\n                this.logger.info(`🔍 Scanned ${body.name}`);\n                return true;\n                \n            case 'mine':\n                if (shipPosition) {\n                    const result = body.performMining(shipPosition);\n                    if (result) {\n                        this.logger.info(`⛏️ Mined ${result.quantity.toFixed(2)} ${result.resourceType} from ${body.name}`);\n                        return true;\n                    }\n                }\n                return false;\n                \n            case 'land':\n                const interaction = body.checkInteraction(shipPosition || { x: 0, y: 0 });\n                if (interaction && interaction.type === 'surface' && interaction.canEnter) {\n                    body.isLanded = true;\n                    this.logger.info(`🚁 Landed on ${body.name}`);\n                    return true;\n                }\n                return false;\n                \n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get all active celestial bodies\n     */\n    getActiveBodies(): CelestialBody[] {\n        return Array.from(this.bodies.values());\n    }\n\n    /**\n     * Cleanup\n     */\n    cleanup(): void {\n        this.clearSystem();\n        this.logger.info('🧹 Celestial manager cleanup completed');\n    }\n}","/**\n * Space Background Renderer\n * Multi-layered pixel art space background with warp distortion support\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer, Color } from '@core/Renderer';\n\nexport interface SpaceBackgroundConfig {\n    starCount: number;\n    starLayers: number;\n    parallaxStrength: number;\n    enableDistortion: boolean;\n    galaxyBandIntensity: number;\n    nebulaOpacity: number;\n}\n\nexport interface BackgroundStar {\n    position: Vector2;\n    originalPosition: Vector2; // For distortion restoration\n    color: Color;\n    size: number;\n    layer: number; // 0-4 for parallax\n    twinkle: number; // Twinkle phase\n}\n\nexport interface SpaceDistortionData {\n    center: Vector2;\n    intensity: number; // 0-1\n    radius: number;\n}\n\nexport class SpaceBackground {\n    private config: SpaceBackgroundConfig;\n    private stars: BackgroundStar[] = [];\n    private galaxyBand: BackgroundStar[] = [];\n    private nebulaClouds: Array<{ x: number, y: number, size: number, color: Color }> = [];\n    \n    // Distortion state\n    private isDistorted: boolean = false;\n    private distortionData: SpaceDistortionData | null = null;\n    \n    // Animation\n    private time: number = 0;\n    \n    private logger: Logger;\n\n    constructor(config: Partial<SpaceBackgroundConfig> = {}) {\n        this.logger = new Logger('SpaceBackground');\n        \n        this.config = {\n            starCount: 300,\n            starLayers: 5,\n            parallaxStrength: 0.3,\n            enableDistortion: true,\n            galaxyBandIntensity: 0.4,\n            nebulaOpacity: 0.2,\n            ...config\n        };\n        \n        this.generateBackground();\n        \n        this.logger.info('🌌 Space background initialized', {\n            starCount: this.stars.length,\n            layers: this.config.starLayers\n        });\n    }\n\n    /**\n     * Generate the complete background\n     */\n    private generateBackground(): void {\n        this.generateStars();\n        this.generateGalaxyBand();\n        this.generateNebulae();\n    }\n\n    /**\n     * Generate background stars with multiple layers for parallax\n     */\n    private generateStars(): void {\n        this.stars = [];\n        \n        for (let i = 0; i < this.config.starCount; i++) {\n            const position = {\n                x: Math.random() * 2048, // Larger than screen for movement\n                y: Math.random() * 1536\n            };\n            \n            const layer = Math.floor(Math.random() * this.config.starLayers);\n            const size = this.getStarSize(layer);\n            const color = this.getStarColor();\n            \n            this.stars.push({\n                position: { ...position },\n                originalPosition: { ...position },\n                color,\n                size,\n                layer,\n                twinkle: Math.random() * Math.PI * 2\n            });\n        }\n    }\n\n    /**\n     * Generate galaxy band (Milky Way-like band across sky)\n     */\n    private generateGalaxyBand(): void {\n        this.galaxyBand = [];\n        const bandStars = 80;\n        \n        // Create a diagonal band across the screen\n        for (let i = 0; i < bandStars; i++) {\n            const progress = i / bandStars;\n            const bandWidth = 200;\n            const bandOffset = Math.sin(progress * Math.PI * 3) * 50; // Wavy band\n            \n            const position = {\n                x: progress * 2048 + bandOffset,\n                y: 400 + bandOffset + (Math.random() - 0.5) * bandWidth\n            };\n            \n            // Dense, small stars for galaxy band\n            const color = this.getGalaxyBandColor();\n            \n            this.galaxyBand.push({\n                position: { ...position },\n                originalPosition: { ...position },\n                color,\n                size: Math.random() * 1.5 + 0.5,\n                layer: 2, // Middle layer\n                twinkle: Math.random() * Math.PI * 2\n            });\n        }\n    }\n\n    /**\n     * Generate nebula clouds\n     */\n    private generateNebulae(): void {\n        this.nebulaClouds = [];\n        const nebulaCount = 5;\n        \n        for (let i = 0; i < nebulaCount; i++) {\n            this.nebulaClouds.push({\n                x: Math.random() * 2048,\n                y: Math.random() * 1536,\n                size: Math.random() * 150 + 100,\n                color: this.getNebulaColor()\n            });\n        }\n    }\n\n    /**\n     * Get star size based on layer (closer = bigger)\n     */\n    private getStarSize(layer: number): number {\n        const baseSizes = [3, 2.5, 2, 1.5, 1]; // Layer 0 = closest/biggest\n        return baseSizes[layer] + Math.random() * 0.5;\n    }\n\n    /**\n     * Get star color (dark, muted space colors)\n     */\n    private getStarColor(): Color {\n        const colors = [\n            { r: 64, g: 64, b: 64 },  // White (muted)\n            { r: 48, g: 44, b: 36 },  // Yellow-white\n            { r: 48, g: 40, b: 28 },  // Yellow\n            { r: 48, g: 32, b: 20 },  // Orange\n            { r: 48, g: 24, b: 16 },  // Red\n            { r: 32, g: 36, b: 48 },  // Blue\n            { r: 40, g: 44, b: 48 }   // Blue-white\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    /**\n     * Get galaxy band star color (warmer, denser appearance)\n     */\n    private getGalaxyBandColor(): Color {\n        const colors = [\n            { r: 48, g: 44, b: 28 },  // Warm white\n            { r: 48, g: 40, b: 24 },  // Warm yellow\n            { r: 32, g: 28, b: 20 },  // Dim orange\n            { r: 24, g: 24, b: 20 }   // Very dim\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    /**\n     * Get nebula color (very muted space dust)\n     */\n    private getNebulaColor(): Color {\n        const colors = [\n            { r: 24, g: 16, b: 32 },  // Purple nebula\n            { r: 32, g: 24, b: 16 },  // Brown nebula\n            { r: 16, g: 24, b: 32 },  // Blue nebula\n            { r: 24, g: 32, b: 16 }   // Green nebula\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    /**\n     * Update background animation\n     */\n    update(deltaTime: number): void {\n        this.time += deltaTime;\n        \n        // Update star twinkle animation\n        this.stars.forEach(star => {\n            star.twinkle += deltaTime * (0.5 + Math.random() * 0.5);\n        });\n        \n        this.galaxyBand.forEach(star => {\n            star.twinkle += deltaTime * 0.3; // Slower twinkle for galaxy band\n        });\n    }\n\n    /**\n     * Apply warp distortion to background\n     */\n    applyWarpDistortion(distortionData: SpaceDistortionData): void {\n        if (!this.config.enableDistortion) return;\n        \n        this.distortionData = { ...distortionData };\n        this.isDistorted = true;\n        \n        // Apply distortion to all stars\n        this.distortStars(this.stars, distortionData);\n        this.distortStars(this.galaxyBand, distortionData);\n        \n        this.logger.debug('🌀 Warp distortion applied to background');\n    }\n\n    /**\n     * Restore background from distortion\n     */\n    restoreFromDistortion(): void {\n        if (!this.isDistorted) return;\n        \n        // Restore all stars to original positions\n        this.stars.forEach(star => {\n            star.position = { ...star.originalPosition };\n        });\n        \n        this.galaxyBand.forEach(star => {\n            star.position = { ...star.originalPosition };\n        });\n        \n        this.isDistorted = false;\n        this.distortionData = null;\n        \n        this.logger.debug('🌌 Background restored from warp distortion');\n    }\n\n    /**\n     * Gradually restore background during warp deactivation\n     */\n    gradualRestore(progress: number): void {\n        if (!this.isDistorted || !this.distortionData) return;\n        \n        const restoreAmount = 1.0 - progress; // 1.0 = fully restored, 0.0 = fully distorted\n        \n        // Gradually restore stars\n        this.restoreStarsGradually(this.stars, restoreAmount);\n        this.restoreStarsGradually(this.galaxyBand, restoreAmount);\n    }\n\n    /**\n     * Apply distortion to a set of stars\n     */\n    private distortStars(stars: BackgroundStar[], distortionData: SpaceDistortionData): void {\n        stars.forEach(star => {\n            const dx = star.originalPosition.x - distortionData.center.x;\n            const dy = star.originalPosition.y - distortionData.center.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            \n            if (distance < distortionData.radius) {\n                // Calculate distortion strength based on distance\n                const distortionStrength = (1 - distance / distortionData.radius) * distortionData.intensity;\n                \n                // Apply distortion toward the center\n                const pullStrength = distortionStrength * 50 * (star.layer + 1); // Closer layers distort more\n                \n                star.position.x = star.originalPosition.x - (dx / distance) * pullStrength;\n                star.position.y = star.originalPosition.y - (dy / distance) * pullStrength;\n            }\n        });\n    }\n\n    /**\n     * Gradually restore stars during deactivation\n     */\n    private restoreStarsGradually(stars: BackgroundStar[], restoreAmount: number): void {\n        stars.forEach(star => {\n            // Interpolate between distorted and original position\n            star.position.x = star.position.x + (star.originalPosition.x - star.position.x) * restoreAmount * 0.1;\n            star.position.y = star.position.y + (star.originalPosition.y - star.position.y) * restoreAmount * 0.1;\n        });\n    }\n\n    /**\n     * Render the space background\n     */\n    render(renderer: Renderer, cameraPosition: Vector2): void {\n        // Render nebulae first (background layer)\n        this.renderNebulae(renderer, cameraPosition);\n        \n        // Render galaxy band\n        this.renderGalaxyBand(renderer, cameraPosition);\n        \n        // Render stars in layers (back to front for parallax)\n        for (let layer = this.config.starLayers - 1; layer >= 0; layer--) {\n            this.renderStarLayer(renderer, cameraPosition, layer);\n        }\n    }\n\n    /**\n     * Render nebula clouds\n     */\n    private renderNebulae(renderer: Renderer, cameraPosition: Vector2): void {\n        this.nebulaClouds.forEach(nebula => {\n            const parallaxFactor = 0.1; // Very slow parallax for distant nebulae\n            const screenX = nebula.x - cameraPosition.x * parallaxFactor;\n            const screenY = nebula.y - cameraPosition.y * parallaxFactor;\n            \n            // Skip if off-screen\n            if (screenX < -nebula.size || screenX > 1024 + nebula.size ||\n                screenY < -nebula.size || screenY > 768 + nebula.size) {\n                return;\n            }\n            \n            // Render nebula as scattered pixels\n            const pixelCount = Math.floor(nebula.size / 8);\n            for (let i = 0; i < pixelCount; i++) {\n                const angle = (i / pixelCount) * Math.PI * 2 + this.time * 0.1;\n                const radius = (nebula.size / 2) * Math.sqrt(Math.random()); // Even distribution\n                \n                const x = screenX + Math.cos(angle) * radius;\n                const y = screenY + Math.sin(angle) * radius;\n                \n                const alpha = this.config.nebulaOpacity * (1 - radius / (nebula.size / 2));\n                const color = {\n                    r: Math.floor(nebula.color.r * alpha),\n                    g: Math.floor(nebula.color.g * alpha),\n                    b: Math.floor(nebula.color.b * alpha)\n                };\n                \n                if (color.r > 0 || color.g > 0 || color.b > 0) {\n                    renderer.setPixel(x, y, color);\n                }\n            }\n        });\n    }\n\n    /**\n     * Render galaxy band\n     */\n    private renderGalaxyBand(renderer: Renderer, cameraPosition: Vector2): void {\n        this.galaxyBand.forEach(star => {\n            const parallaxFactor = 0.3; // Medium parallax for galaxy band\n            const screenX = star.position.x - cameraPosition.x * parallaxFactor;\n            const screenY = star.position.y - cameraPosition.y * parallaxFactor;\n            \n            // Skip if off-screen\n            if (screenX < -10 || screenX > 1034 || screenY < -10 || screenY > 778) {\n                return;\n            }\n            \n            // Apply galaxy band intensity and twinkle\n            const twinkle = Math.sin(star.twinkle) * 0.3 + 0.7; // 0.4 to 1.0\n            const intensity = this.config.galaxyBandIntensity * twinkle;\n            \n            const color = {\n                r: Math.floor(star.color.r * intensity),\n                g: Math.floor(star.color.g * intensity),\n                b: Math.floor(star.color.b * intensity)\n            };\n            \n            this.renderStar(renderer, screenX, screenY, star.size * 0.8, color);\n        });\n    }\n\n    /**\n     * Render stars for a specific parallax layer\n     */\n    private renderStarLayer(renderer: Renderer, cameraPosition: Vector2, layer: number): void {\n        // Calculate parallax factor (layer 0 = closest, moves most)\n        const parallaxFactor = (layer + 1) * this.config.parallaxStrength;\n        \n        this.stars.filter(star => star.layer === layer).forEach(star => {\n            const screenX = star.position.x - cameraPosition.x * parallaxFactor;\n            const screenY = star.position.y - cameraPosition.y * parallaxFactor;\n            \n            // Skip if off-screen\n            if (screenX < -10 || screenX > 1034 || screenY < -10 || screenY > 778) {\n                return;\n            }\n            \n            // Apply twinkle effect\n            const twinkle = Math.sin(star.twinkle) * 0.4 + 0.6; // 0.2 to 1.0\n            const color = {\n                r: Math.floor(star.color.r * twinkle),\n                g: Math.floor(star.color.g * twinkle),\n                b: Math.floor(star.color.b * twinkle)\n            };\n            \n            this.renderStar(renderer, screenX, screenY, star.size, color);\n        });\n    }\n\n    /**\n     * Render individual star\n     */\n    private renderStar(renderer: Renderer, x: number, y: number, size: number, color: Color): void {\n        if (size <= 1) {\n            // Single pixel star\n            renderer.setPixel(x, y, color);\n        } else if (size <= 2) {\n            // 2x2 star\n            renderer.fillRect(x - 1, y - 1, 2, 2, color);\n        } else {\n            // Larger star with cross pattern\n            const coreSize = Math.floor(size);\n            const halfCore = Math.floor(coreSize / 2);\n            \n            // Core\n            renderer.fillRect(x - halfCore, y - halfCore, coreSize, coreSize, color);\n            \n            // Cross pattern for larger stars\n            if (size > 2.5) {\n                const dimColor = {\n                    r: Math.floor(color.r * 0.6),\n                    g: Math.floor(color.g * 0.6),\n                    b: Math.floor(color.b * 0.6)\n                };\n                \n                // Horizontal beam\n                renderer.fillRect(x - size, y - 1, size * 2, 2, dimColor);\n                // Vertical beam\n                renderer.fillRect(x - 1, y - size, 2, size * 2, dimColor);\n            }\n        }\n    }\n\n    /**\n     * Update background during warp\n     */\n    updateWarpDistortion(distortionData: SpaceDistortionData): void {\n        if (this.config.enableDistortion) {\n            this.applyWarpDistortion(distortionData);\n        }\n    }\n\n    /**\n     * Get background statistics\n     */\n    getStats(): {\n        starCount: number;\n        galaxyBandStars: number;\n        nebulaCount: number;\n        isDistorted: boolean;\n    } {\n        return {\n            starCount: this.stars.length,\n            galaxyBandStars: this.galaxyBand.length,\n            nebulaCount: this.nebulaClouds.length,\n            isDistorted: this.isDistorted\n        };\n    }\n\n    /**\n     * Regenerate background (for different star systems)\n     */\n    regenerateBackground(): void {\n        this.generateBackground();\n        this.logger.info('🌌 Background regenerated');\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig: Partial<SpaceBackgroundConfig>): void {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Regenerate if significant changes\n        if (newConfig.starCount || newConfig.starLayers) {\n            this.regenerateBackground();\n        }\n    }\n}","/**\n * Item System - Core item definitions and management\n * Comprehensive item system with procedural generation and 16-bit pixel art\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Color, Renderer } from '@core/Renderer';\n\nexport enum ItemType {\n    Resource = 'resource',\n    Component = 'component',\n    Equipment = 'equipment',\n    Weapon = 'weapon',\n    Tool = 'tool',\n    Consumable = 'consumable',\n    Blueprint = 'blueprint',\n    Artifact = 'artifact'\n}\n\nexport enum ItemRarity {\n    Common = 'common',\n    Uncommon = 'uncommon',\n    Rare = 'rare',\n    Epic = 'epic',\n    Legendary = 'legendary',\n    Artifact = 'artifact'\n}\n\nexport enum ItemCategory {\n    // Resources\n    Metal = 'metal',\n    Crystal = 'crystal',\n    Gas = 'gas',\n    Biological = 'biological',\n    Energy = 'energy',\n    Exotic = 'exotic',\n    \n    // Equipment\n    Engine = 'engine',\n    Shield = 'shield',\n    Reactor = 'reactor',\n    Scanner = 'scanner',\n    WarpCore = 'warp_core',\n    \n    // Weapons\n    Projectile = 'projectile',\n    EnergyWeapon = 'energy_weapon',\n    Missile = 'missile',\n    \n    // Tools\n    Mining = 'mining',\n    Repair = 'repair',\n    Research = 'research'\n}\n\nexport interface ItemStats {\n    // Base properties\n    mass: number;\n    volume: number;\n    durability?: number; // For equipment/tools\n    maxStack: number;\n    \n    // Equipment stats\n    power?: number;\n    efficiency?: number;\n    range?: number;\n    damage?: number;\n    defense?: number;\n    \n    // Resource/component stats\n    purity?: number; // 0-1\n    stability?: number; // 0-1\n    radioactivity?: number; // 0-1\n}\n\nexport interface ItemRecipe {\n    id: string;\n    requiredItems: { [itemId: string]: number };\n    requiredTech?: string[];\n    craftingTime: number; // seconds\n    energyCost: number;\n    successRate: number; // 0-1\n}\n\nexport interface ItemSprite {\n    width: number;\n    height: number;\n    pixels: Color[][]; // 2D array of colors for 16-bit sprite\n}\n\nexport interface GameItem {\n    id: string;\n    name: string;\n    description: string;\n    type: ItemType;\n    category: ItemCategory;\n    rarity: ItemRarity;\n    \n    // Visual\n    sprite: ItemSprite;\n    iconColor: Color;\n    \n    // Properties\n    stats: ItemStats;\n    \n    // Crafting\n    recipe?: ItemRecipe;\n    \n    // Special properties\n    isUnique: boolean;\n    isTradeable: boolean;\n    isConsumable: boolean;\n    \n    // Lore\n    loreText?: string;\n    discoveredBy?: string;\n    discoveryDate?: number;\n}\n\nexport interface ItemStack {\n    item: GameItem;\n    quantity: number;\n    condition?: number; // 0-1 for equipment durability\n    modifiers?: { [key: string]: number }; // Special modifiers\n}\n\nexport class ItemDatabase {\n    private items: Map<string, GameItem> = new Map();\n    private recipes: Map<string, ItemRecipe> = new Map();\n    private categories: Map<ItemCategory, GameItem[]> = new Map();\n    \n    private logger: Logger;\n\n    constructor() {\n        this.logger = new Logger('ItemDatabase');\n        this.initializeDatabase();\n        this.logger.info('📦 Item database initialized', {\n            totalItems: this.items.size,\n            categories: this.categories.size\n        });\n    }\n\n    /**\n     * Initialize the item database with base items\n     */\n    private initializeDatabase(): void {\n        // Generate base resources\n        this.generateResources();\n        \n        // Generate components\n        this.generateComponents();\n        \n        // Generate equipment\n        this.generateEquipment();\n        \n        // Generate weapons\n        this.generateWeapons();\n        \n        // Generate tools\n        this.generateTools();\n        \n        // Generate consumables\n        this.generateConsumables();\n        \n        // Generate blueprints\n        this.generateBlueprints();\n        \n        // Generate artifacts\n        this.generateArtifacts();\n    }\n\n    /**\n     * Generate base resources\n     */\n    private generateResources(): void {\n        const resources = [\n            {\n                id: 'metal_iron',\n                name: 'Iron Ore',\n                description: 'Common metallic ore found throughout the galaxy.',\n                category: ItemCategory.Metal,\n                rarity: ItemRarity.Common,\n                stats: { mass: 1, volume: 1, maxStack: 1000, purity: 0.7 },\n                color: { r: 48, g: 32, b: 24 }\n            },\n            {\n                id: 'metal_titanium',\n                name: 'Titanium',\n                description: 'Lightweight, durable metal used in ship construction.',\n                category: ItemCategory.Metal,\n                rarity: ItemRarity.Uncommon,\n                stats: { mass: 0.8, volume: 1, maxStack: 500, purity: 0.85 },\n                color: { r: 64, g: 64, b: 64 }\n            },\n            {\n                id: 'crystal_quartz',\n                name: 'Quartz Crystal',\n                description: 'Common crystalline structure with electronic properties.',\n                category: ItemCategory.Crystal,\n                rarity: ItemRarity.Common,\n                stats: { mass: 0.5, volume: 1, maxStack: 200, purity: 0.6 },\n                color: { r: 48, g: 48, b: 56 }\n            },\n            {\n                id: 'crystal_dilithium',\n                name: 'Dilithium Crystal',\n                description: 'Rare crystal essential for warp core regulation.',\n                category: ItemCategory.Crystal,\n                rarity: ItemRarity.Rare,\n                stats: { mass: 0.3, volume: 1, maxStack: 50, purity: 0.9, radioactivity: 0.3 },\n                color: { r: 32, g: 48, b: 32 }\n            },\n            {\n                id: 'gas_hydrogen',\n                name: 'Hydrogen',\n                description: 'Common gas used for fuel and life support.',\n                category: ItemCategory.Gas,\n                rarity: ItemRarity.Common,\n                stats: { mass: 0.1, volume: 2, maxStack: 2000, purity: 0.8 },\n                color: { r: 32, g: 40, b: 48 }\n            },\n            {\n                id: 'bio_protein',\n                name: 'Protein Compounds',\n                description: 'Organic compounds essential for life support systems.',\n                category: ItemCategory.Biological,\n                rarity: ItemRarity.Uncommon,\n                stats: { mass: 0.5, volume: 1, maxStack: 100, stability: 0.7 },\n                color: { r: 40, g: 48, b: 32 }\n            },\n            {\n                id: 'energy_antimatter',\n                name: 'Antimatter',\n                description: 'Extremely dangerous but powerful energy source.',\n                category: ItemCategory.Energy,\n                rarity: ItemRarity.Epic,\n                stats: { mass: 0.01, volume: 1, maxStack: 10, radioactivity: 0.9, stability: 0.3 },\n                color: { r: 48, g: 24, b: 72 }\n            }\n        ];\n\n        resources.forEach(res => {\n            const item = this.createItem({\n                id: res.id,\n                name: res.name,\n                description: res.description,\n                type: ItemType.Resource,\n                category: res.category,\n                rarity: res.rarity,\n                stats: res.stats,\n                iconColor: res.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate ship components\n     */\n    private generateComponents(): void {\n        const components = [\n            {\n                id: 'comp_circuit',\n                name: 'Circuit Board',\n                description: 'Basic electronic component for ship systems.',\n                category: ItemCategory.Engine,\n                rarity: ItemRarity.Common,\n                stats: { mass: 0.2, volume: 1, maxStack: 100, durability: 0.9 },\n                color: { r: 24, g: 48, b: 24 }\n            },\n            {\n                id: 'comp_plasma_conduit',\n                name: 'Plasma Conduit',\n                description: 'Advanced conduit for energy distribution systems.',\n                category: ItemCategory.Reactor,\n                rarity: ItemRarity.Rare,\n                stats: { mass: 2, volume: 1, maxStack: 20, power: 150, efficiency: 0.85 },\n                color: { r: 64, g: 32, b: 16 }\n            },\n            {\n                id: 'comp_shield_emitter',\n                name: 'Shield Emitter',\n                description: 'Generates protective energy barriers around the ship.',\n                category: ItemCategory.Shield,\n                rarity: ItemRarity.Uncommon,\n                stats: { mass: 1.5, volume: 1, maxStack: 50, defense: 100, efficiency: 0.75 },\n                color: { r: 16, g: 32, b: 48 }\n            }\n        ];\n\n        components.forEach(comp => {\n            const item = this.createItem({\n                id: comp.id,\n                name: comp.name,\n                description: comp.description,\n                type: ItemType.Component,\n                category: comp.category,\n                rarity: comp.rarity,\n                stats: comp.stats,\n                iconColor: comp.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate equipment items\n     */\n    private generateEquipment(): void {\n        const equipment = [\n            {\n                id: 'eq_engine_basic',\n                name: 'Basic Thruster',\n                description: 'Standard propulsion system for small vessels.',\n                category: ItemCategory.Engine,\n                rarity: ItemRarity.Common,\n                stats: { mass: 10, volume: 4, maxStack: 1, power: 100, efficiency: 0.6 },\n                color: { r: 48, g: 48, b: 48 }\n            },\n            {\n                id: 'eq_shield_mk2',\n                name: 'Shield Generator Mk.II',\n                description: 'Improved shield generation system.',\n                category: ItemCategory.Shield,\n                rarity: ItemRarity.Uncommon,\n                stats: { mass: 8, volume: 3, maxStack: 1, defense: 200, efficiency: 0.8 },\n                color: { r: 16, g: 40, b: 32 }\n            },\n            {\n                id: 'eq_warp_core',\n                name: 'Warp Core',\n                description: 'Essential component for faster-than-light travel.',\n                category: ItemCategory.WarpCore,\n                rarity: ItemRarity.Epic,\n                stats: { mass: 20, volume: 8, maxStack: 1, power: 500, efficiency: 0.9 },\n                color: { r: 48, g: 24, b: 72 }\n            }\n        ];\n\n        equipment.forEach(eq => {\n            const item = this.createItem({\n                id: eq.id,\n                name: eq.name,\n                description: eq.description,\n                type: ItemType.Equipment,\n                category: eq.category,\n                rarity: eq.rarity,\n                stats: eq.stats,\n                iconColor: eq.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate weapons\n     */\n    private generateWeapons(): void {\n        const weapons = [\n            {\n                id: 'wp_laser_basic',\n                name: 'Basic Laser Cannon',\n                description: 'Standard energy weapon for ship defense.',\n                category: ItemCategory.Energy,\n                rarity: ItemRarity.Common,\n                stats: { mass: 5, volume: 2, maxStack: 1, damage: 50, range: 200 },\n                color: { r: 72, g: 24, b: 24 }\n            },\n            {\n                id: 'wp_railgun',\n                name: 'Magnetic Railgun',\n                description: 'High-velocity projectile weapon system.',\n                category: ItemCategory.Projectile,\n                rarity: ItemRarity.Rare,\n                stats: { mass: 12, volume: 4, maxStack: 1, damage: 150, range: 400 },\n                color: { r: 64, g: 64, b: 32 }\n            }\n        ];\n\n        weapons.forEach(wp => {\n            const item = this.createItem({\n                id: wp.id,\n                name: wp.name,\n                description: wp.description,\n                type: ItemType.Weapon,\n                category: wp.category,\n                rarity: wp.rarity,\n                stats: wp.stats,\n                iconColor: wp.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate tools\n     */\n    private generateTools(): void {\n        const tools = [\n            {\n                id: 'tool_mining_drill',\n                name: 'Mining Drill',\n                description: 'Automated mining equipment for resource extraction.',\n                category: ItemCategory.Mining,\n                rarity: ItemRarity.Uncommon,\n                stats: { mass: 3, volume: 2, maxStack: 1, efficiency: 0.8, durability: 0.9 },\n                color: { r: 96, g: 64, b: 16 }\n            },\n            {\n                id: 'tool_repair_kit',\n                name: 'Repair Kit',\n                description: 'Emergency repair tools and materials.',\n                category: ItemCategory.Repair,\n                rarity: ItemRarity.Common,\n                stats: { mass: 1, volume: 1, maxStack: 10, efficiency: 0.6 },\n                color: { r: 48, g: 48, b: 32 }\n            }\n        ];\n\n        tools.forEach(tool => {\n            const item = this.createItem({\n                id: tool.id,\n                name: tool.name,\n                description: tool.description,\n                type: ItemType.Tool,\n                category: tool.category,\n                rarity: tool.rarity,\n                stats: tool.stats,\n                iconColor: tool.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate consumables\n     */\n    private generateConsumables(): void {\n        const consumables = [\n            {\n                id: 'cons_energy_cell',\n                name: 'Energy Cell',\n                description: 'Portable power source for emergency systems.',\n                rarity: ItemRarity.Common,\n                stats: { mass: 0.5, volume: 1, maxStack: 50, power: 100 },\n                color: { r: 32, g: 80, b: 64 }\n            },\n            {\n                id: 'cons_nanobots',\n                name: 'Repair Nanobots',\n                description: 'Microscopic robots that repair ship damage.',\n                rarity: ItemRarity.Rare,\n                stats: { mass: 0.1, volume: 1, maxStack: 20, efficiency: 0.9 },\n                color: { r: 48, g: 24, b: 72 }\n            }\n        ];\n\n        consumables.forEach(cons => {\n            const item = this.createItem({\n                id: cons.id,\n                name: cons.name,\n                description: cons.description,\n                type: ItemType.Consumable,\n                category: ItemCategory.Energy,\n                rarity: cons.rarity,\n                stats: cons.stats,\n                iconColor: cons.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: true\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate blueprints\n     */\n    private generateBlueprints(): void {\n        const blueprints = [\n            {\n                id: 'bp_engine_advanced',\n                name: 'Advanced Engine Blueprint',\n                description: 'Schematic for constructing high-efficiency thrusters.',\n                rarity: ItemRarity.Rare,\n                color: { r: 32, g: 48, b: 32 }\n            },\n            {\n                id: 'bp_warp_upgrade',\n                name: 'Warp Core Upgrade Blueprint',\n                description: 'Plans for enhancing warp drive capabilities.',\n                rarity: ItemRarity.Epic,\n                color: { r: 48, g: 24, b: 72 }\n            }\n        ];\n\n        blueprints.forEach(bp => {\n            const item = this.createItem({\n                id: bp.id,\n                name: bp.name,\n                description: bp.description,\n                type: ItemType.Blueprint,\n                category: ItemCategory.Engine,\n                rarity: bp.rarity,\n                stats: { mass: 0.1, volume: 1, maxStack: 1 },\n                iconColor: bp.color,\n                isUnique: false,\n                isTradeable: true,\n                isConsumable: false\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Generate rare artifacts\n     */\n    private generateArtifacts(): void {\n        const artifacts = [\n            {\n                id: 'art_precursor_relic',\n                name: 'Precursor Data Core',\n                description: 'Ancient technology from a lost civilization.',\n                rarity: ItemRarity.Artifact,\n                stats: { mass: 1, volume: 1, maxStack: 1, radioactivity: 0.5 },\n                color: { r: 64, g: 32, b: 96 },\n                lore: 'This mysterious device contains fragments of knowledge from a species that vanished eons ago.'\n            }\n        ];\n\n        artifacts.forEach(art => {\n            const item = this.createItem({\n                id: art.id,\n                name: art.name,\n                description: art.description,\n                type: ItemType.Artifact,\n                category: ItemCategory.Exotic,\n                rarity: art.rarity,\n                stats: art.stats,\n                iconColor: art.color,\n                isUnique: true,\n                isTradeable: false,\n                isConsumable: false,\n                loreText: art.lore\n            });\n            this.addItem(item);\n        });\n    }\n\n    /**\n     * Create an item with generated sprite\n     */\n    private createItem(config: {\n        id: string;\n        name: string;\n        description: string;\n        type: ItemType;\n        category: ItemCategory;\n        rarity: ItemRarity;\n        stats: Partial<ItemStats>;\n        iconColor: Color;\n        isUnique: boolean;\n        isTradeable: boolean;\n        isConsumable: boolean;\n        loreText?: string;\n    }): GameItem {\n        const sprite = this.generateItemSprite(config.type, config.category, config.iconColor);\n        \n        return {\n            id: config.id,\n            name: config.name,\n            description: config.description,\n            type: config.type,\n            category: config.category,\n            rarity: config.rarity,\n            sprite,\n            iconColor: config.iconColor,\n            stats: {\n                mass: 1,\n                volume: 1,\n                maxStack: 1,\n                ...config.stats\n            },\n            isUnique: config.isUnique,\n            isTradeable: config.isTradeable,\n            isConsumable: config.isConsumable,\n            loreText: config.loreText\n        };\n    }\n\n    /**\n     * Generate 16-bit pixel art sprite for item\n     */\n    private generateItemSprite(type: ItemType, category: ItemCategory, baseColor: Color): ItemSprite {\n        const width = 16;\n        const height = 16;\n        const pixels: Color[][] = [];\n        \n        // Initialize empty sprite\n        for (let y = 0; y < height; y++) {\n            pixels[y] = [];\n            for (let x = 0; x < width; x++) {\n                pixels[y][x] = { r: 0, g: 0, b: 0 }; // Transparent\n            }\n        }\n        \n        // Generate sprite based on type and category\n        switch (type) {\n            case ItemType.Resource:\n                this.drawResourceSprite(pixels, category, baseColor);\n                break;\n            case ItemType.Component:\n                this.drawComponentSprite(pixels, category, baseColor);\n                break;\n            case ItemType.Equipment:\n                this.drawEquipmentSprite(pixels, category, baseColor);\n                break;\n            case ItemType.Weapon:\n                this.drawWeaponSprite(pixels, category, baseColor);\n                break;\n            case ItemType.Tool:\n                this.drawToolSprite(pixels, category, baseColor);\n                break;\n            case ItemType.Consumable:\n                this.drawConsumableSprite(pixels, baseColor);\n                break;\n            case ItemType.Blueprint:\n                this.drawBlueprintSprite(pixels, baseColor);\n                break;\n            case ItemType.Artifact:\n                this.drawArtifactSprite(pixels, baseColor);\n                break;\n        }\n        \n        return { width, height, pixels };\n    }\n\n    /**\n     * Draw resource sprite (crystal/ore shapes)\n     */\n    private drawResourceSprite(pixels: Color[][], category: ItemCategory, color: Color): void {\n        const darkColor = this.darkenColor(color, 0.7);\n        const lightColor = this.lightenColor(color, 1.3);\n        \n        if (category === ItemCategory.Crystal) {\n            // Crystal shape\n            this.setPixel(pixels, 8, 2, lightColor);\n            this.setPixel(pixels, 7, 3, color);\n            this.setPixel(pixels, 8, 3, lightColor);\n            this.setPixel(pixels, 9, 3, color);\n            this.setPixel(pixels, 6, 4, darkColor);\n            this.setPixel(pixels, 7, 4, color);\n            this.setPixel(pixels, 8, 4, lightColor);\n            this.setPixel(pixels, 9, 4, color);\n            this.setPixel(pixels, 10, 4, darkColor);\n            // Continue crystal pattern...\n            for (let y = 5; y < 13; y++) {\n                for (let x = 6; x <= 10; x++) {\n                    if (x === 6 || x === 10) this.setPixel(pixels, x, y, darkColor);\n                    else if (x === 8) this.setPixel(pixels, x, y, lightColor);\n                    else this.setPixel(pixels, x, y, color);\n                }\n            }\n            this.setPixel(pixels, 8, 13, darkColor);\n        } else {\n            // Ore/metal chunk shape\n            for (let y = 4; y < 12; y++) {\n                for (let x = 5; x < 11; x++) {\n                    if ((x + y) % 3 === 0) this.setPixel(pixels, x, y, lightColor);\n                    else if ((x + y) % 3 === 1) this.setPixel(pixels, x, y, color);\n                    else this.setPixel(pixels, x, y, darkColor);\n                }\n            }\n        }\n    }\n\n    /**\n     * Draw component sprite (circuit patterns)\n     */\n    private drawComponentSprite(pixels: Color[][], category: ItemCategory, color: Color): void {\n        const darkColor = this.darkenColor(color, 0.6);\n        const lightColor = this.lightenColor(color, 1.4);\n        \n        // Circuit board base\n        for (let y = 3; y < 13; y++) {\n            for (let x = 3; x < 13; x++) {\n                this.setPixel(pixels, x, y, darkColor);\n            }\n        }\n        \n        // Circuit traces\n        for (let x = 4; x < 12; x++) {\n            this.setPixel(pixels, x, 6, color);\n            this.setPixel(pixels, x, 9, color);\n        }\n        for (let y = 4; y < 12; y++) {\n            this.setPixel(pixels, 6, y, color);\n            this.setPixel(pixels, 9, y, color);\n        }\n        \n        // Components\n        this.setPixel(pixels, 5, 5, lightColor);\n        this.setPixel(pixels, 10, 5, lightColor);\n        this.setPixel(pixels, 5, 10, lightColor);\n        this.setPixel(pixels, 10, 10, lightColor);\n    }\n\n    /**\n     * Draw equipment sprite (mechanical shapes)\n     */\n    private drawEquipmentSprite(pixels: Color[][], category: ItemCategory, color: Color): void {\n        const darkColor = this.darkenColor(color, 0.7);\n        const lightColor = this.lightenColor(color, 1.2);\n        \n        // Base equipment shape\n        for (let y = 2; y < 14; y++) {\n            for (let x = 4; x < 12; x++) {\n                if (y === 2 || y === 13 || x === 4 || x === 11) {\n                    this.setPixel(pixels, x, y, darkColor);\n                } else {\n                    this.setPixel(pixels, x, y, color);\n                }\n            }\n        }\n        \n        // Equipment details based on category\n        if (category === ItemCategory.Engine) {\n            // Engine nozzle\n            for (let y = 6; y < 10; y++) {\n                this.setPixel(pixels, 8, y, lightColor);\n            }\n        } else if (category === ItemCategory.Shield) {\n            // Shield emitter pattern\n            this.setPixel(pixels, 8, 5, lightColor);\n            this.setPixel(pixels, 7, 6, lightColor);\n            this.setPixel(pixels, 9, 6, lightColor);\n            this.setPixel(pixels, 8, 7, lightColor);\n        }\n    }\n\n    /**\n     * Draw weapon sprite\n     */\n    private drawWeaponSprite(pixels: Color[][], category: ItemCategory, color: Color): void {\n        const darkColor = this.darkenColor(color, 0.6);\n        const lightColor = this.lightenColor(color, 1.3);\n        \n        // Weapon barrel\n        for (let y = 6; y < 10; y++) {\n            for (let x = 2; x < 14; x++) {\n                if (y === 6 || y === 9) this.setPixel(pixels, x, y, darkColor);\n                else this.setPixel(pixels, x, y, color);\n            }\n        }\n        \n        // Weapon tip\n        this.setPixel(pixels, 14, 7, lightColor);\n        this.setPixel(pixels, 14, 8, lightColor);\n        \n        // Handle/mount\n        for (let y = 8; y < 12; y++) {\n            for (let x = 4; x < 8; x++) {\n                this.setPixel(pixels, x, y, darkColor);\n            }\n        }\n    }\n\n    /**\n     * Draw tool sprite\n     */\n    private drawToolSprite(pixels: Color[][], category: ItemCategory, color: Color): void {\n        const darkColor = this.darkenColor(color, 0.7);\n        const lightColor = this.lightenColor(color, 1.2);\n        \n        // Tool handle\n        for (let y = 8; y < 14; y++) {\n            for (let x = 6; x < 10; x++) {\n                this.setPixel(pixels, x, y, darkColor);\n            }\n        }\n        \n        // Tool head based on category\n        if (category === ItemCategory.Mining) {\n            // Drill bit\n            for (let y = 2; y < 8; y++) {\n                this.setPixel(pixels, 8, y, color);\n                if (y > 3) {\n                    this.setPixel(pixels, 7, y, lightColor);\n                    this.setPixel(pixels, 9, y, lightColor);\n                }\n            }\n        } else {\n            // Generic tool head\n            for (let y = 4; y < 8; y++) {\n                for (let x = 5; x < 11; x++) {\n                    this.setPixel(pixels, x, y, color);\n                }\n            }\n        }\n    }\n\n    /**\n     * Draw consumable sprite (container shapes)\n     */\n    private drawConsumableSprite(pixels: Color[][], color: Color): void {\n        const darkColor = this.darkenColor(color, 0.6);\n        const lightColor = this.lightenColor(color, 1.4);\n        \n        // Container outline\n        for (let y = 3; y < 13; y++) {\n            for (let x = 5; x < 11; x++) {\n                if (y === 3 || y === 12 || x === 5 || x === 10) {\n                    this.setPixel(pixels, x, y, darkColor);\n                } else {\n                    this.setPixel(pixels, x, y, color);\n                }\n            }\n        }\n        \n        // Label/indicator\n        this.setPixel(pixels, 8, 6, lightColor);\n        this.setPixel(pixels, 7, 7, lightColor);\n        this.setPixel(pixels, 9, 7, lightColor);\n        this.setPixel(pixels, 8, 8, lightColor);\n    }\n\n    /**\n     * Draw blueprint sprite (schematic pattern)\n     */\n    private drawBlueprintSprite(pixels: Color[][], color: Color): void {\n        const darkColor = this.darkenColor(color, 0.8);\n        const lightColor = this.lightenColor(color, 1.1);\n        \n        // Blueprint base\n        for (let y = 2; y < 14; y++) {\n            for (let x = 3; x < 13; x++) {\n                this.setPixel(pixels, x, y, darkColor);\n            }\n        }\n        \n        // Schematic lines\n        for (let x = 5; x < 11; x++) {\n            this.setPixel(pixels, x, 5, color);\n            this.setPixel(pixels, x, 8, color);\n            this.setPixel(pixels, x, 11, color);\n        }\n        \n        // Blueprint markers\n        this.setPixel(pixels, 5, 6, lightColor);\n        this.setPixel(pixels, 8, 6, lightColor);\n        this.setPixel(pixels, 11, 6, lightColor);\n    }\n\n    /**\n     * Draw artifact sprite (mystical patterns)\n     */\n    private drawArtifactSprite(pixels: Color[][], color: Color): void {\n        const darkColor = this.darkenColor(color, 0.5);\n        const lightColor = this.lightenColor(color, 1.5);\n        \n        // Artifact base\n        for (let y = 4; y < 12; y++) {\n            for (let x = 4; x < 12; x++) {\n                if ((x + y) % 2 === 0) this.setPixel(pixels, x, y, color);\n                else this.setPixel(pixels, x, y, darkColor);\n            }\n        }\n        \n        // Mystical pattern\n        this.setPixel(pixels, 8, 2, lightColor);\n        this.setPixel(pixels, 6, 6, lightColor);\n        this.setPixel(pixels, 10, 6, lightColor);\n        this.setPixel(pixels, 8, 10, lightColor);\n        this.setPixel(pixels, 8, 14, lightColor);\n    }\n\n    /**\n     * Helper methods for sprite generation\n     */\n    private setPixel(pixels: Color[][], x: number, y: number, color: Color): void {\n        if (x >= 0 && x < 16 && y >= 0 && y < 16) {\n            pixels[y][x] = { ...color };\n        }\n    }\n\n    private darkenColor(color: Color, factor: number): Color {\n        return {\n            r: Math.floor(color.r * factor),\n            g: Math.floor(color.g * factor),\n            b: Math.floor(color.b * factor)\n        };\n    }\n\n    private lightenColor(color: Color, factor: number): Color {\n        return {\n            r: Math.min(255, Math.floor(color.r * factor)),\n            g: Math.min(255, Math.floor(color.g * factor)),\n            b: Math.min(255, Math.floor(color.b * factor))\n        };\n    }\n\n    /**\n     * Public interface methods\n     */\n    \n    /**\n     * Add item to database\n     */\n    addItem(item: GameItem): void {\n        this.items.set(item.id, item);\n        \n        if (!this.categories.has(item.category)) {\n            this.categories.set(item.category, []);\n        }\n        this.categories.get(item.category)!.push(item);\n        \n        if (item.recipe) {\n            this.recipes.set(item.id, item.recipe);\n        }\n    }\n\n    /**\n     * Get item by ID\n     */\n    getItem(id: string): GameItem | undefined {\n        return this.items.get(id);\n    }\n\n    /**\n     * Get items by category\n     */\n    getItemsByCategory(category: ItemCategory): GameItem[] {\n        return this.categories.get(category) || [];\n    }\n\n    /**\n     * Get items by type\n     */\n    getItemsByType(type: ItemType): GameItem[] {\n        return Array.from(this.items.values()).filter(item => item.type === type);\n    }\n\n    /**\n     * Get items by rarity\n     */\n    getItemsByRarity(rarity: ItemRarity): GameItem[] {\n        return Array.from(this.items.values()).filter(item => item.rarity === rarity);\n    }\n\n    /**\n     * Get all items\n     */\n    getAllItems(): GameItem[] {\n        return Array.from(this.items.values());\n    }\n\n    /**\n     * Get recipe for item\n     */\n    getRecipe(itemId: string): ItemRecipe | undefined {\n        return this.recipes.get(itemId);\n    }\n\n    /**\n     * Search items by name\n     */\n    searchItems(query: string): GameItem[] {\n        const lowerQuery = query.toLowerCase();\n        return Array.from(this.items.values()).filter(item => \n            item.name.toLowerCase().includes(lowerQuery) ||\n            item.description.toLowerCase().includes(lowerQuery)\n        );\n    }\n\n    /**\n     * Generate random item by rarity\n     */\n    generateRandomItem(rarity?: ItemRarity): GameItem | null {\n        let candidateItems: GameItem[];\n        \n        if (rarity) {\n            candidateItems = this.getItemsByRarity(rarity);\n        } else {\n            // Weighted random by rarity\n            const rarityWeights = {\n                [ItemRarity.Common]: 50,\n                [ItemRarity.Uncommon]: 25,\n                [ItemRarity.Rare]: 15,\n                [ItemRarity.Epic]: 8,\n                [ItemRarity.Legendary]: 1.5,\n                [ItemRarity.Artifact]: 0.5\n            };\n            \n            const totalWeight = Object.values(rarityWeights).reduce((sum, weight) => sum + weight, 0);\n            const random = Math.random() * totalWeight;\n            \n            let currentWeight = 0;\n            let selectedRarity: ItemRarity = ItemRarity.Common;\n            \n            for (const [rarity, weight] of Object.entries(rarityWeights)) {\n                currentWeight += weight;\n                if (random <= currentWeight) {\n                    selectedRarity = rarity as ItemRarity;\n                    break;\n                }\n            }\n            \n            candidateItems = this.getItemsByRarity(selectedRarity);\n        }\n        \n        if (candidateItems.length === 0) return null;\n        \n        const randomIndex = Math.floor(Math.random() * candidateItems.length);\n        return candidateItems[randomIndex];\n    }\n\n    /**\n     * Render item sprite\n     */\n    renderItemSprite(renderer: Renderer, item: GameItem, x: number, y: number, scale: number = 1): void {\n        const sprite = item.sprite;\n        \n        for (let sy = 0; sy < sprite.height; sy++) {\n            for (let sx = 0; sx < sprite.width; sx++) {\n                const pixel = sprite.pixels[sy][sx];\n                if (pixel.r > 0 || pixel.g > 0 || pixel.b > 0) { // Skip transparent pixels\n                    if (scale === 1) {\n                        renderer.setPixel(x + sx, y + sy, pixel);\n                    } else {\n                        // Scale up the pixel\n                        for (let dy = 0; dy < scale; dy++) {\n                            for (let dx = 0; dx < scale; dx++) {\n                                renderer.setPixel(x + sx * scale + dx, y + sy * scale + dy, pixel);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get database statistics\n     */\n    getStats(): {\n        totalItems: number;\n        itemsByType: { [type: string]: number };\n        itemsByRarity: { [rarity: string]: number };\n        categories: number;\n    } {\n        const itemsByType: { [type: string]: number } = {};\n        const itemsByRarity: { [rarity: string]: number } = {};\n        \n        this.items.forEach(item => {\n            itemsByType[item.type] = (itemsByType[item.type] || 0) + 1;\n            itemsByRarity[item.rarity] = (itemsByRarity[item.rarity] || 0) + 1;\n        });\n        \n        return {\n            totalItems: this.items.size,\n            itemsByType,\n            itemsByRarity,\n            categories: this.categories.size\n        };\n    }\n}","/**\n * Inventory Management System\n * Grid-based inventory with advanced management features and retro UI\n */\n\nimport { Logger } from '@utils/Logger';\nimport { GameItem, ItemStack, ItemType, ItemRarity, ItemDatabase } from '@items/ItemSystem';\nimport { Renderer, Color, Vector2 } from '@core/Renderer';\n\nexport interface InventoryConfig {\n    maxSlots: number;\n    gridWidth: number;\n    gridHeight: number;\n    maxWeight: number;\n    maxVolume: number;\n    allowStacking: boolean;\n}\n\nexport interface InventorySlot {\n    index: number;\n    item: ItemStack | null;\n    x: number; // Grid position\n    y: number;\n    locked: boolean; // Locked slots can't be used\n    reserved: boolean; // Reserved for specific item types\n}\n\nexport interface InventoryFilter {\n    type?: ItemType;\n    rarity?: ItemRarity;\n    searchText?: string;\n    showOnlyUsable?: boolean;\n}\n\nexport interface InventorySortOptions {\n    by: 'name' | 'type' | 'rarity' | 'quantity' | 'value';\n    descending: boolean;\n    groupByType: boolean;\n}\n\nexport interface InventoryEvents {\n    onItemAdded?: (item: GameItem, quantity: number) => void;\n    onItemRemoved?: (item: GameItem, quantity: number) => void;\n    onInventoryFull?: () => void;\n    onWeightExceeded?: () => void;\n    onVolumeExceeded?: () => void;\n    onSlotSelected?: (slot: InventorySlot) => void;\n}\n\nexport class InventoryManager {\n    private config: InventoryConfig;\n    private events: InventoryEvents;\n    private itemDatabase: ItemDatabase;\n    \n    // Storage\n    private slots: InventorySlot[] = [];\n    private totalWeight: number = 0;\n    private totalVolume: number = 0;\n    \n    // UI State\n    private selectedSlot: number = -1;\n    private draggedItem: ItemStack | null = null;\n    private filter: InventoryFilter = {};\n    private sortOptions: InventorySortOptions = { by: 'name', descending: false, groupByType: false };\n    private isVisible: boolean = false;\n    \n    // Visual properties\n    private slotSize: number = 32;\n    private slotSpacing: number = 2;\n    private panelX: number = 50;\n    private panelY: number = 50;\n    \n    private logger: Logger;\n\n    constructor(\n        config: Partial<InventoryConfig> = {},\n        events: InventoryEvents = {},\n        itemDatabase: ItemDatabase\n    ) {\n        this.logger = new Logger('InventoryManager');\n        this.itemDatabase = itemDatabase;\n        this.events = events;\n        \n        this.config = {\n            maxSlots: 50,\n            gridWidth: 10,\n            gridHeight: 5,\n            maxWeight: 1000,\n            maxVolume: 500,\n            allowStacking: true,\n            ...config\n        };\n        \n        this.initializeSlots();\n        \n        this.logger.info('📦 Inventory manager initialized', {\n            slots: this.config.maxSlots,\n            maxWeight: this.config.maxWeight,\n            maxVolume: this.config.maxVolume\n        });\n    }\n\n    /**\n     * Initialize inventory slots\n     */\n    private initializeSlots(): void {\n        this.slots = [];\n        \n        for (let i = 0; i < this.config.maxSlots; i++) {\n            const x = i % this.config.gridWidth;\n            const y = Math.floor(i / this.config.gridWidth);\n            \n            this.slots.push({\n                index: i,\n                item: null,\n                x,\n                y,\n                locked: false,\n                reserved: false\n            });\n        }\n    }\n\n    /**\n     * Add item to inventory\n     */\n    addItem(item: GameItem, quantity: number = 1): boolean {\n        if (quantity <= 0) return false;\n        \n        let remainingQuantity = quantity;\n        \n        // Try to stack with existing items first\n        if (this.config.allowStacking && item.stats.maxStack > 1) {\n            for (const slot of this.slots) {\n                if (slot.item && slot.item.item.id === item.id) {\n                    const canAdd = Math.min(remainingQuantity, item.stats.maxStack - slot.item.quantity);\n                    if (canAdd > 0) {\n                        slot.item.quantity += canAdd;\n                        remainingQuantity -= canAdd;\n                        \n                        if (remainingQuantity === 0) break;\n                    }\n                }\n            }\n        }\n        \n        // Add to empty slots\n        while (remainingQuantity > 0) {\n            const emptySlot = this.findEmptySlot();\n            if (!emptySlot) {\n                this.events.onInventoryFull?.();\n                return false;\n            }\n            \n            const stackSize = Math.min(remainingQuantity, item.stats.maxStack);\n            \n            // Check weight and volume constraints\n            const addedWeight = item.stats.mass * stackSize;\n            const addedVolume = item.stats.volume * stackSize;\n            \n            if (this.totalWeight + addedWeight > this.config.maxWeight) {\n                this.events.onWeightExceeded?.();\n                return false;\n            }\n            \n            if (this.totalVolume + addedVolume > this.config.maxVolume) {\n                this.events.onVolumeExceeded?.();\n                return false;\n            }\n            \n            // Add to slot\n            emptySlot.item = {\n                item: item,\n                quantity: stackSize,\n                condition: item.type === ItemType.Equipment ? 1.0 : undefined\n            };\n            \n            this.totalWeight += addedWeight;\n            this.totalVolume += addedVolume;\n            remainingQuantity -= stackSize;\n        }\n        \n        this.events.onItemAdded?.(item, quantity);\n        this.logger.debug(`Added ${quantity}x ${item.name} to inventory`);\n        \n        return true;\n    }\n\n    /**\n     * Remove item from inventory\n     */\n    removeItem(itemId: string, quantity: number = 1): boolean {\n        if (quantity <= 0) return false;\n        \n        let remainingQuantity = quantity;\n        \n        for (const slot of this.slots) {\n            if (slot.item && slot.item.item.id === itemId && remainingQuantity > 0) {\n                const canRemove = Math.min(remainingQuantity, slot.item.quantity);\n                \n                // Update weight and volume\n                const removedWeight = slot.item.item.stats.mass * canRemove;\n                const removedVolume = slot.item.item.stats.volume * canRemove;\n                this.totalWeight -= removedWeight;\n                this.totalVolume -= removedVolume;\n                \n                slot.item.quantity -= canRemove;\n                remainingQuantity -= canRemove;\n                \n                if (slot.item.quantity === 0) {\n                    const removedItem = slot.item.item;\n                    slot.item = null;\n                    this.events.onItemRemoved?.(removedItem, canRemove);\n                }\n            }\n        }\n        \n        return remainingQuantity === 0;\n    }\n\n    /**\n     * Move item between slots\n     */\n    moveItem(fromSlot: number, toSlot: number): boolean {\n        if (fromSlot < 0 || fromSlot >= this.slots.length || \n            toSlot < 0 || toSlot >= this.slots.length) {\n            return false;\n        }\n        \n        const from = this.slots[fromSlot];\n        const to = this.slots[toSlot];\n        \n        if (!from.item || to.locked) return false;\n        \n        // If target slot is empty, move the item\n        if (!to.item) {\n            to.item = from.item;\n            from.item = null;\n            return true;\n        }\n        \n        // If both slots have the same item and stacking is allowed\n        if (this.config.allowStacking && \n            from.item.item.id === to.item.item.id &&\n            from.item.item.stats.maxStack > 1) {\n            \n            const canStack = Math.min(\n                from.item.quantity, \n                from.item.item.stats.maxStack - to.item.quantity\n            );\n            \n            if (canStack > 0) {\n                to.item.quantity += canStack;\n                from.item.quantity -= canStack;\n                \n                if (from.item.quantity === 0) {\n                    from.item = null;\n                }\n                return true;\n            }\n        }\n        \n        // Swap items\n        const temp = from.item;\n        from.item = to.item;\n        to.item = temp;\n        \n        return true;\n    }\n\n    /**\n     * Find first empty slot\n     */\n    private findEmptySlot(): InventorySlot | null {\n        return this.slots.find(slot => !slot.item && !slot.locked) || null;\n    }\n\n    /**\n     * Get item count\n     */\n    getItemCount(itemId: string): number {\n        return this.slots\n            .filter(slot => slot.item && slot.item.item.id === itemId)\n            .reduce((total, slot) => total + slot.item!.quantity, 0);\n    }\n\n    /**\n     * Has item\n     */\n    hasItem(itemId: string, quantity: number = 1): boolean {\n        return this.getItemCount(itemId) >= quantity;\n    }\n\n    /**\n     * Get all items\n     */\n    getAllItems(): ItemStack[] {\n        return this.slots\n            .filter(slot => slot.item !== null)\n            .map(slot => slot.item!);\n    }\n\n    /**\n     * Get filtered and sorted items\n     */\n    getFilteredItems(): ItemStack[] {\n        let items = this.getAllItems();\n        \n        // Apply filters\n        if (this.filter.type) {\n            items = items.filter(stack => stack.item.type === this.filter.type);\n        }\n        \n        if (this.filter.rarity) {\n            items = items.filter(stack => stack.item.rarity === this.filter.rarity);\n        }\n        \n        if (this.filter.searchText) {\n            const search = this.filter.searchText.toLowerCase();\n            items = items.filter(stack => \n                stack.item.name.toLowerCase().includes(search) ||\n                stack.item.description.toLowerCase().includes(search)\n            );\n        }\n        \n        // Apply sorting\n        items.sort((a, b) => {\n            let comparison = 0;\n            \n            switch (this.sortOptions.by) {\n                case 'name':\n                    comparison = a.item.name.localeCompare(b.item.name);\n                    break;\n                case 'type':\n                    comparison = a.item.type.localeCompare(b.item.type);\n                    break;\n                case 'rarity':\n                    const rarityOrder = ['common', 'uncommon', 'rare', 'epic', 'legendary', 'artifact'];\n                    comparison = rarityOrder.indexOf(a.item.rarity) - rarityOrder.indexOf(b.item.rarity);\n                    break;\n                case 'quantity':\n                    comparison = a.quantity - b.quantity;\n                    break;\n            }\n            \n            return this.sortOptions.descending ? -comparison : comparison;\n        });\n        \n        return items;\n    }\n\n    /**\n     * Compact inventory (remove gaps)\n     */\n    compactInventory(): void {\n        const items: ItemStack[] = [];\n        \n        // Collect all items\n        this.slots.forEach(slot => {\n            if (slot.item) {\n                items.push(slot.item);\n                slot.item = null;\n            }\n        });\n        \n        // Clear weight/volume\n        this.totalWeight = 0;\n        this.totalVolume = 0;\n        \n        // Re-add items compactly\n        items.forEach(stack => {\n            this.addItem(stack.item, stack.quantity);\n        });\n        \n        this.logger.info('📦 Inventory compacted');\n    }\n\n    /**\n     * Auto-sort inventory\n     */\n    autoSort(): void {\n        const items = this.getAllItems();\n        \n        // Clear inventory\n        this.slots.forEach(slot => slot.item = null);\n        this.totalWeight = 0;\n        this.totalVolume = 0;\n        \n        // Sort items\n        items.sort((a, b) => {\n            // First by type\n            if (a.item.type !== b.item.type) {\n                return a.item.type.localeCompare(b.item.type);\n            }\n            \n            // Then by rarity\n            const rarityOrder = ['artifact', 'legendary', 'epic', 'rare', 'uncommon', 'common'];\n            const aRarity = rarityOrder.indexOf(a.item.rarity);\n            const bRarity = rarityOrder.indexOf(b.item.rarity);\n            \n            if (aRarity !== bRarity) {\n                return aRarity - bRarity;\n            }\n            \n            // Finally by name\n            return a.item.name.localeCompare(b.item.name);\n        });\n        \n        // Re-add sorted items\n        items.forEach(stack => {\n            this.addItem(stack.item, stack.quantity);\n        });\n        \n        this.logger.info('📦 Inventory auto-sorted');\n    }\n\n    /**\n     * Get inventory statistics\n     */\n    getStats(): {\n        usedSlots: number;\n        totalSlots: number;\n        totalWeight: number;\n        maxWeight: number;\n        totalVolume: number;\n        maxVolume: number;\n        itemCount: number;\n        uniqueItems: number;\n        fillPercentage: number;\n        weightPercentage: number;\n        volumePercentage: number;\n    } {\n        const usedSlots = this.slots.filter(slot => slot.item !== null).length;\n        const uniqueItems = new Set(this.slots\n            .filter(slot => slot.item)\n            .map(slot => slot.item!.item.id)\n        ).size;\n        \n        const totalItems = this.slots\n            .filter(slot => slot.item)\n            .reduce((total, slot) => total + slot.item!.quantity, 0);\n        \n        return {\n            usedSlots,\n            totalSlots: this.config.maxSlots,\n            totalWeight: this.totalWeight,\n            maxWeight: this.config.maxWeight,\n            totalVolume: this.totalVolume,\n            maxVolume: this.config.maxVolume,\n            itemCount: totalItems,\n            uniqueItems,\n            fillPercentage: (usedSlots / this.config.maxSlots) * 100,\n            weightPercentage: (this.totalWeight / this.config.maxWeight) * 100,\n            volumePercentage: (this.totalVolume / this.config.maxVolume) * 100\n        };\n    }\n\n    /**\n     * Render inventory UI\n     */\n    render(renderer: Renderer): void {\n        if (!this.isVisible) return;\n        \n        // Render background panel\n        this.renderBackground(renderer);\n        \n        // Render header\n        this.renderHeader(renderer);\n        \n        // Render grid\n        this.renderGrid(renderer);\n        \n        // Render items\n        this.renderItems(renderer);\n        \n        // Render selection\n        if (this.selectedSlot >= 0) {\n            this.renderSelection(renderer);\n        }\n        \n        // Render dragged item\n        if (this.draggedItem) {\n            this.renderDraggedItem(renderer);\n        }\n        \n        // Render statistics\n        this.renderStats(renderer);\n    }\n\n    /**\n     * Render background panel\n     */\n    private renderBackground(renderer: Renderer): void {\n        const panelWidth = this.config.gridWidth * (this.slotSize + this.slotSpacing) + 40;\n        const panelHeight = this.config.gridHeight * (this.slotSize + this.slotSpacing) + 150;\n        \n        // Dark panel background\n        renderer.fillRect(this.panelX, this.panelY, panelWidth, panelHeight, { r: 8, g: 12, b: 8 });\n        \n        // Panel border\n        renderer.drawLine(this.panelX, this.panelY, this.panelX + panelWidth, this.panelY, { r: 16, g: 48, b: 16 });\n        renderer.drawLine(this.panelX, this.panelY, this.panelX, this.panelY + panelHeight, { r: 16, g: 48, b: 16 });\n        renderer.drawLine(this.panelX + panelWidth, this.panelY, this.panelX + panelWidth, this.panelY + panelHeight, { r: 16, g: 48, b: 16 });\n        renderer.drawLine(this.panelX, this.panelY + panelHeight, this.panelX + panelWidth, this.panelY + panelHeight, { r: 16, g: 48, b: 16 });\n    }\n\n    /**\n     * Render header\n     */\n    private renderHeader(renderer: Renderer): void {\n        renderer.renderText('INVENTORY', this.panelX + 10, this.panelY + 10, { r: 12, g: 36, b: 12 }, 12);\n        \n        // Quick action buttons\n        const buttonY = this.panelY + 25;\n        renderer.renderText('[S]ORT', this.panelX + 10, buttonY, { r: 32, g: 32, b: 32 }, 8);\n        renderer.renderText('[C]OMPACT', this.panelX + 80, buttonY, { r: 32, g: 32, b: 32 }, 8);\n        renderer.renderText('[F]ILTER', this.panelX + 160, buttonY, { r: 32, g: 32, b: 32 }, 8);\n    }\n\n    /**\n     * Render inventory grid\n     */\n    private renderGrid(renderer: Renderer): void {\n        const gridStartX = this.panelX + 20;\n        const gridStartY = this.panelY + 50;\n        \n        for (let y = 0; y < this.config.gridHeight; y++) {\n            for (let x = 0; x < this.config.gridWidth; x++) {\n                const slotX = gridStartX + x * (this.slotSize + this.slotSpacing);\n                const slotY = gridStartY + y * (this.slotSize + this.slotSpacing);\n                \n                const slotIndex = y * this.config.gridWidth + x;\n                const slot = this.slots[slotIndex];\n                \n                // Slot background\n                let bgColor = { r: 16, g: 16, b: 16 };\n                if (slot.locked) {\n                    bgColor = { r: 24, g: 8, b: 8 }; // Red tint for locked\n                } else if (slot.reserved) {\n                    bgColor = { r: 8, g: 24, b: 8 }; // Green tint for reserved\n                }\n                \n                renderer.fillRect(slotX, slotY, this.slotSize, this.slotSize, bgColor);\n                \n                // Slot border\n                const borderColor = { r: 32, g: 32, b: 32 };\n                renderer.drawLine(slotX, slotY, slotX + this.slotSize, slotY, borderColor);\n                renderer.drawLine(slotX, slotY, slotX, slotY + this.slotSize, borderColor);\n                renderer.drawLine(slotX + this.slotSize, slotY, slotX + this.slotSize, slotY + this.slotSize, borderColor);\n                renderer.drawLine(slotX, slotY + this.slotSize, slotX + this.slotSize, slotY + this.slotSize, borderColor);\n            }\n        }\n    }\n\n    /**\n     * Render items in slots\n     */\n    private renderItems(renderer: Renderer): void {\n        const gridStartX = this.panelX + 20;\n        const gridStartY = this.panelY + 50;\n        \n        this.slots.forEach((slot, index) => {\n            if (!slot.item) return;\n            \n            const slotX = gridStartX + slot.x * (this.slotSize + this.slotSpacing);\n            const slotY = gridStartY + slot.y * (this.slotSize + this.slotSpacing);\n            \n            // Render item sprite\n            const spriteX = slotX + (this.slotSize - 16) / 2;\n            const spriteY = slotY + (this.slotSize - 16) / 2;\n            this.itemDatabase.renderItemSprite(renderer, slot.item.item, spriteX, spriteY, 1);\n            \n            // Render quantity if > 1\n            if (slot.item.quantity > 1) {\n                const quantityText = slot.item.quantity.toString();\n                renderer.renderText(quantityText, slotX + this.slotSize - 15, slotY + this.slotSize - 10, \n                    { r: 48, g: 48, b: 48 }, 8);\n            }\n            \n            // Render rarity indicator\n            const rarityColor = this.getRarityColor(slot.item.item.rarity);\n            renderer.fillRect(slotX + 2, slotY + 2, 4, 4, rarityColor);\n            \n            // Render condition bar for equipment\n            if (slot.item.condition !== undefined) {\n                const conditionWidth = Math.floor((this.slotSize - 4) * slot.item.condition);\n                const conditionColor = slot.item.condition > 0.7 ? \n                    { r: 12, g: 36, b: 12 } : \n                    slot.item.condition > 0.3 ? \n                        { r: 72, g: 48, b: 12 } : \n                        { r: 72, g: 24, b: 24 };\n                \n                renderer.fillRect(slotX + 2, slotY + this.slotSize - 4, conditionWidth, 2, conditionColor);\n            }\n        });\n    }\n\n    /**\n     * Get rarity color\n     */\n    private getRarityColor(rarity: ItemRarity): Color {\n        switch (rarity) {\n            case ItemRarity.Common: return { r: 48, g: 48, b: 48 };\n            case ItemRarity.Uncommon: return { r: 32, g: 48, b: 32 };\n            case ItemRarity.Rare: return { r: 32, g: 40, b: 48 };\n            case ItemRarity.Epic: return { r: 48, g: 32, b: 72 };\n            case ItemRarity.Legendary: return { r: 96, g: 64, b: 16 };\n            case ItemRarity.Artifact: return { r: 64, g: 32, b: 96 };\n            default: return { r: 32, g: 32, b: 32 };\n        }\n    }\n\n    /**\n     * Render selection highlight\n     */\n    private renderSelection(renderer: Renderer): void {\n        const slot = this.slots[this.selectedSlot];\n        if (!slot) return;\n        \n        const gridStartX = this.panelX + 20;\n        const gridStartY = this.panelY + 50;\n        const slotX = gridStartX + slot.x * (this.slotSize + this.slotSpacing);\n        const slotY = gridStartY + slot.y * (this.slotSize + this.slotSpacing);\n        \n        // Selection highlight\n        const highlightColor = { r: 16, g: 48, b: 16 };\n        renderer.drawLine(slotX - 1, slotY - 1, slotX + this.slotSize + 1, slotY - 1, highlightColor);\n        renderer.drawLine(slotX - 1, slotY - 1, slotX - 1, slotY + this.slotSize + 1, highlightColor);\n        renderer.drawLine(slotX + this.slotSize + 1, slotY - 1, slotX + this.slotSize + 1, slotY + this.slotSize + 1, highlightColor);\n        renderer.drawLine(slotX - 1, slotY + this.slotSize + 1, slotX + this.slotSize + 1, slotY + this.slotSize + 1, highlightColor);\n    }\n\n    /**\n     * Render dragged item\n     */\n    private renderDraggedItem(renderer: Renderer): void {\n        // TODO: Implement drag rendering when mouse system is available\n    }\n\n    /**\n     * Render statistics\n     */\n    private renderStats(renderer: Renderer): void {\n        const stats = this.getStats();\n        const statsY = this.panelY + this.config.gridHeight * (this.slotSize + this.slotSpacing) + 70;\n        \n        const textColor = { r: 48, g: 48, b: 48 };\n        \n        renderer.renderText(`SLOTS: ${stats.usedSlots}/${stats.totalSlots}`, \n            this.panelX + 10, statsY, textColor, 8);\n        \n        renderer.renderText(`WEIGHT: ${stats.totalWeight.toFixed(1)}/${stats.maxWeight}`, \n            this.panelX + 10, statsY + 12, textColor, 8);\n        \n        renderer.renderText(`VOLUME: ${stats.totalVolume.toFixed(1)}/${stats.maxVolume}`, \n            this.panelX + 10, statsY + 24, textColor, 8);\n        \n        renderer.renderText(`ITEMS: ${stats.itemCount} (${stats.uniqueItems} types)`, \n            this.panelX + 10, statsY + 36, textColor, 8);\n    }\n\n    /**\n     * Show/hide inventory\n     */\n    setVisible(visible: boolean): void {\n        this.isVisible = visible;\n    }\n\n    /**\n     * Check if inventory is visible\n     */\n    isInventoryVisible(): boolean {\n        return this.isVisible;\n    }\n\n    /**\n     * Select slot\n     */\n    selectSlot(slotIndex: number): void {\n        if (slotIndex >= 0 && slotIndex < this.slots.length) {\n            this.selectedSlot = slotIndex;\n            this.events.onSlotSelected?.(this.slots[slotIndex]);\n        }\n    }\n\n    /**\n     * Get selected slot\n     */\n    getSelectedSlot(): InventorySlot | null {\n        return this.selectedSlot >= 0 ? this.slots[this.selectedSlot] : null;\n    }\n\n    /**\n     * Use item in selected slot\n     */\n    useSelectedItem(): boolean {\n        const slot = this.getSelectedSlot();\n        if (!slot || !slot.item) return false;\n        \n        const item = slot.item.item;\n        \n        if (item.isConsumable) {\n            // Use consumable item\n            this.removeItem(item.id, 1);\n            this.logger.info(`Used ${item.name}`);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Set filter\n     */\n    setFilter(filter: Partial<InventoryFilter>): void {\n        this.filter = { ...this.filter, ...filter };\n    }\n\n    /**\n     * Clear filter\n     */\n    clearFilter(): void {\n        this.filter = {};\n    }\n\n    /**\n     * Set sort options\n     */\n    setSortOptions(options: Partial<InventorySortOptions>): void {\n        this.sortOptions = { ...this.sortOptions, ...options };\n    }\n\n    /**\n     * Lock/unlock slot\n     */\n    setSlotLocked(slotIndex: number, locked: boolean): void {\n        if (slotIndex >= 0 && slotIndex < this.slots.length) {\n            this.slots[slotIndex].locked = locked;\n        }\n    }\n\n    /**\n     * Reserve/unreserve slot\n     */\n    setSlotReserved(slotIndex: number, reserved: boolean): void {\n        if (slotIndex >= 0 && slotIndex < this.slots.length) {\n            this.slots[slotIndex].reserved = reserved;\n        }\n    }\n\n    /**\n     * Clear inventory\n     */\n    clearInventory(): void {\n        this.slots.forEach(slot => slot.item = null);\n        this.totalWeight = 0;\n        this.totalVolume = 0;\n        this.selectedSlot = -1;\n        this.logger.info('📦 Inventory cleared');\n    }\n\n    /**\n     * Save inventory state\n     */\n    saveState(): any {\n        return {\n            slots: this.slots.map(slot => ({\n                index: slot.index,\n                item: slot.item ? {\n                    itemId: slot.item.item.id,\n                    quantity: slot.item.quantity,\n                    condition: slot.item.condition,\n                    modifiers: slot.item.modifiers\n                } : null,\n                locked: slot.locked,\n                reserved: slot.reserved\n            })),\n            totalWeight: this.totalWeight,\n            totalVolume: this.totalVolume\n        };\n    }\n\n    /**\n     * Load inventory state\n     */\n    loadState(state: any): void {\n        this.clearInventory();\n        \n        state.slots.forEach((slotData: any, index: number) => {\n            if (index < this.slots.length) {\n                const slot = this.slots[index];\n                slot.locked = slotData.locked || false;\n                slot.reserved = slotData.reserved || false;\n                \n                if (slotData.item) {\n                    const item = this.itemDatabase.getItem(slotData.item.itemId);\n                    if (item) {\n                        slot.item = {\n                            item,\n                            quantity: slotData.item.quantity,\n                            condition: slotData.item.condition,\n                            modifiers: slotData.item.modifiers\n                        };\n                    }\n                }\n            }\n        });\n        \n        this.totalWeight = state.totalWeight || 0;\n        this.totalVolume = state.totalVolume || 0;\n        \n        this.logger.info('📦 Inventory state loaded');\n    }\n}","/**\n * Crafting System\n * Basic crafting mechanics for combining items into new ones\n */\n\nimport { Logger } from '@utils/Logger';\nimport { GameItem, ItemDatabase, ItemRecipe, ItemType, ItemRarity } from '@items/ItemSystem';\nimport { InventoryManager } from '@inventory/InventoryManager';\nimport { Renderer, Color } from '@core/Renderer';\n\nexport interface CraftingStation {\n    id: string;\n    name: string;\n    type: 'basic' | 'advanced' | 'industrial';\n    availableRecipes: string[]; // Recipe IDs\n    energyRequired: number;\n    isActive: boolean;\n}\n\nexport interface CraftingAttempt {\n    recipeId: string;\n    station: CraftingStation;\n    startTime: number;\n    duration: number;\n    energyCost: number;\n    successRate: number;\n}\n\nexport interface CraftingEvents {\n    onCraftingStarted?: (attempt: CraftingAttempt) => void;\n    onCraftingCompleted?: (item: GameItem, success: boolean) => void;\n    onCraftingFailed?: (reason: string) => void;\n}\n\nexport class CraftingSystem {\n    private itemDatabase: ItemDatabase;\n    private inventory: InventoryManager;\n    private events: CraftingEvents;\n    \n    // Crafting state\n    private stations: Map<string, CraftingStation> = new Map();\n    private activeAttempts: CraftingAttempt[] = [];\n    private knownRecipes: Set<string> = new Set();\n    \n    // UI state\n    private isVisible: boolean = false;\n    private selectedStation: string | null = null;\n    private selectedRecipe: string | null = null;\n    \n    private logger: Logger;\n\n    constructor(\n        itemDatabase: ItemDatabase,\n        inventory: InventoryManager,\n        events: CraftingEvents = {}\n    ) {\n        this.logger = new Logger('CraftingSystem');\n        this.itemDatabase = itemDatabase;\n        this.inventory = inventory;\n        this.events = events;\n        \n        this.initializeStations();\n        this.initializeBasicRecipes();\n        \n        this.logger.info('🔧 Crafting system initialized', {\n            stations: this.stations.size,\n            knownRecipes: this.knownRecipes.size\n        });\n    }\n\n    /**\n     * Initialize crafting stations\n     */\n    private initializeStations(): void {\n        const stations: CraftingStation[] = [\n            {\n                id: 'basic_fabricator',\n                name: 'Basic Fabricator',\n                type: 'basic',\n                availableRecipes: [],\n                energyRequired: 10,\n                isActive: true\n            },\n            {\n                id: 'advanced_forge',\n                name: 'Advanced Forge',\n                type: 'advanced',\n                availableRecipes: [],\n                energyRequired: 25,\n                isActive: true\n            },\n            {\n                id: 'industrial_plant',\n                name: 'Industrial Plant',\n                type: 'industrial',\n                availableRecipes: [],\n                energyRequired: 50,\n                isActive: false // Requires research to unlock\n            }\n        ];\n        \n        stations.forEach(station => {\n            this.stations.set(station.id, station);\n        });\n    }\n\n    /**\n     * Initialize basic crafting recipes\n     */\n    private initializeBasicRecipes(): void {\n        // Create some basic recipes\n        const basicRecipes: ItemRecipe[] = [\n            {\n                id: 'craft_circuit_from_metal',\n                requiredItems: {\n                    'metal_iron': 2,\n                    'crystal_quartz': 1\n                },\n                craftingTime: 5, // 5 seconds\n                energyCost: 10,\n                successRate: 0.9\n            },\n            {\n                id: 'craft_repair_kit',\n                requiredItems: {\n                    'metal_iron': 1,\n                    'comp_circuit': 1\n                },\n                craftingTime: 8,\n                energyCost: 15,\n                successRate: 0.85\n            },\n            {\n                id: 'craft_energy_cell',\n                requiredItems: {\n                    'crystal_quartz': 2,\n                    'gas_hydrogen': 5\n                },\n                craftingTime: 3,\n                energyCost: 5,\n                successRate: 0.95\n            },\n            {\n                id: 'craft_shield_emitter',\n                requiredItems: {\n                    'metal_titanium': 3,\n                    'crystal_quartz': 2,\n                    'comp_circuit': 1\n                },\n                craftingTime: 15,\n                energyCost: 30,\n                successRate: 0.7\n            },\n            {\n                id: 'craft_plasma_conduit',\n                requiredItems: {\n                    'metal_titanium': 2,\n                    'crystal_dilithium': 1,\n                    'comp_circuit': 2\n                },\n                craftingTime: 20,\n                energyCost: 40,\n                successRate: 0.6\n            }\n        ];\n        \n        // Add recipes to appropriate items and stations\n        basicRecipes.forEach(recipe => {\n            // Add recipe to basic fabricator\n            const basicStation = this.stations.get('basic_fabricator');\n            if (basicStation) {\n                basicStation.availableRecipes.push(recipe.id);\n            }\n            \n            // Advanced recipes go to advanced forge\n            if (recipe.energyCost > 20) {\n                const advancedStation = this.stations.get('advanced_forge');\n                if (advancedStation) {\n                    advancedStation.availableRecipes.push(recipe.id);\n                }\n            }\n            \n            // Add to known recipes (player starts with basic knowledge)\n            if (recipe.energyCost <= 15) {\n                this.knownRecipes.add(recipe.id);\n            }\n        });\n        \n        // Update item database with recipes\n        this.updateItemRecipes(basicRecipes);\n    }\n\n    /**\n     * Update item database with crafting recipes\n     */\n    private updateItemRecipes(recipes: ItemRecipe[]): void {\n        recipes.forEach(recipe => {\n            // Find the target item for this recipe\n            const targetItem = this.findTargetItemForRecipe(recipe.id);\n            if (targetItem) {\n                targetItem.recipe = recipe;\n            }\n        });\n    }\n\n    /**\n     * Find target item for a recipe based on recipe ID\n     */\n    private findTargetItemForRecipe(recipeId: string): GameItem | undefined {\n        // Map recipe IDs to item IDs\n        const recipeToItemMap: { [key: string]: string } = {\n            'craft_circuit_from_metal': 'comp_circuit',\n            'craft_repair_kit': 'tool_repair_kit',\n            'craft_energy_cell': 'cons_energy_cell',\n            'craft_shield_emitter': 'comp_shield_emitter',\n            'craft_plasma_conduit': 'comp_plasma_conduit'\n        };\n        \n        const itemId = recipeToItemMap[recipeId];\n        return itemId ? this.itemDatabase.getItem(itemId) : undefined;\n    }\n\n    /**\n     * Start crafting an item\n     */\n    startCrafting(recipeId: string, stationId: string): boolean {\n        const station = this.stations.get(stationId);\n        const targetItem = this.findTargetItemForRecipe(recipeId);\n        \n        if (!station || !targetItem || !targetItem.recipe) {\n            this.events.onCraftingFailed?.('Invalid recipe or station');\n            return false;\n        }\n        \n        if (!station.isActive) {\n            this.events.onCraftingFailed?.('Crafting station is offline');\n            return false;\n        }\n        \n        if (!this.knownRecipes.has(recipeId)) {\n            this.events.onCraftingFailed?.('Recipe not yet discovered');\n            return false;\n        }\n        \n        if (!station.availableRecipes.includes(recipeId)) {\n            this.events.onCraftingFailed?.('Station cannot craft this item');\n            return false;\n        }\n        \n        const recipe = targetItem.recipe;\n        \n        // Check if player has required items\n        for (const [itemId, quantity] of Object.entries(recipe.requiredItems)) {\n            if (!this.inventory.hasItem(itemId, quantity)) {\n                this.events.onCraftingFailed?.(`Insufficient ${itemId}: need ${quantity}`);\n                return false;\n            }\n        }\n        \n        // TODO: Check energy requirements\n        // For now, assume player has enough energy\n        \n        // Remove required items from inventory\n        for (const [itemId, quantity] of Object.entries(recipe.requiredItems)) {\n            this.inventory.removeItem(itemId, quantity);\n        }\n        \n        // Create crafting attempt\n        const attempt: CraftingAttempt = {\n            recipeId,\n            station,\n            startTime: Date.now(),\n            duration: recipe.craftingTime * 1000, // Convert to milliseconds\n            energyCost: recipe.energyCost,\n            successRate: recipe.successRate\n        };\n        \n        this.activeAttempts.push(attempt);\n        this.events.onCraftingStarted?.(attempt);\n        \n        this.logger.info(`🔧 Started crafting ${targetItem.name}`, {\n            station: station.name,\n            duration: recipe.craftingTime,\n            successRate: recipe.successRate\n        });\n        \n        return true;\n    }\n\n    /**\n     * Update crafting system\n     */\n    update(deltaTime: number): void {\n        const currentTime = Date.now();\n        const completedAttempts: CraftingAttempt[] = [];\n        \n        // Check for completed crafting attempts\n        this.activeAttempts.forEach(attempt => {\n            if (currentTime >= attempt.startTime + attempt.duration) {\n                completedAttempts.push(attempt);\n            }\n        });\n        \n        // Process completed attempts\n        completedAttempts.forEach(attempt => {\n            this.completeCrafting(attempt);\n        });\n        \n        // Remove completed attempts\n        this.activeAttempts = this.activeAttempts.filter(\n            attempt => !completedAttempts.includes(attempt)\n        );\n    }\n\n    /**\n     * Complete a crafting attempt\n     */\n    private completeCrafting(attempt: CraftingAttempt): void {\n        const targetItem = this.findTargetItemForRecipe(attempt.recipeId);\n        if (!targetItem) return;\n        \n        // Determine success based on success rate\n        const success = Math.random() < attempt.successRate;\n        \n        if (success) {\n            // Add crafted item to inventory\n            const added = this.inventory.addItem(targetItem, 1);\n            if (added) {\n                this.logger.info(`✅ Successfully crafted ${targetItem.name}`);\n                this.events.onCraftingCompleted?.(targetItem, true);\n            } else {\n                this.logger.warn(`📦 Inventory full - ${targetItem.name} lost`);\n                this.events.onCraftingFailed?.('Inventory full - item lost');\n            }\n        } else {\n            this.logger.warn(`❌ Crafting failed: ${targetItem.name}`);\n            this.events.onCraftingCompleted?.(targetItem, false);\n            \n            // On failure, return some materials (50% chance for each)\n            if (targetItem.recipe) {\n                for (const [itemId, quantity] of Object.entries(targetItem.recipe.requiredItems)) {\n                    if (Math.random() < 0.5) {\n                        const returnQuantity = Math.ceil(quantity * 0.3); // Return 30% of materials\n                        const item = this.itemDatabase.getItem(itemId);\n                        if (item) {\n                            this.inventory.addItem(item, returnQuantity);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Learn a new recipe\n     */\n    learnRecipe(recipeId: string): boolean {\n        if (this.knownRecipes.has(recipeId)) {\n            return false; // Already known\n        }\n        \n        this.knownRecipes.add(recipeId);\n        this.logger.info(`📚 Learned new recipe: ${recipeId}`);\n        return true;\n    }\n\n    /**\n     * Get available recipes for a station\n     */\n    getAvailableRecipes(stationId: string): GameItem[] {\n        const station = this.stations.get(stationId);\n        if (!station) return [];\n        \n        return station.availableRecipes\n            .filter(recipeId => this.knownRecipes.has(recipeId))\n            .map(recipeId => this.findTargetItemForRecipe(recipeId))\n            .filter(item => item !== undefined) as GameItem[];\n    }\n\n    /**\n     * Check if recipe can be crafted\n     */\n    canCraftRecipe(recipeId: string): {\n        canCraft: boolean;\n        missingItems: { [itemId: string]: number };\n        hasStation: boolean;\n    } {\n        const targetItem = this.findTargetItemForRecipe(recipeId);\n        if (!targetItem || !targetItem.recipe) {\n            return { canCraft: false, missingItems: {}, hasStation: false };\n        }\n        \n        const recipe = targetItem.recipe;\n        const missingItems: { [itemId: string]: number } = {};\n        let hasAllItems = true;\n        \n        // Check required items\n        for (const [itemId, required] of Object.entries(recipe.requiredItems)) {\n            const available = this.inventory.getItemCount(itemId);\n            if (available < required) {\n                missingItems[itemId] = required - available;\n                hasAllItems = false;\n            }\n        }\n        \n        // Check if any station can craft this\n        const hasStation = Array.from(this.stations.values()).some(station => \n            station.isActive && station.availableRecipes.includes(recipeId)\n        );\n        \n        return {\n            canCraft: hasAllItems && hasStation && this.knownRecipes.has(recipeId),\n            missingItems,\n            hasStation\n        };\n    }\n\n    /**\n     * Get crafting progress for active attempts\n     */\n    getCraftingProgress(): Array<{\n        recipeId: string;\n        itemName: string;\n        progress: number; // 0-1\n        timeRemaining: number; // seconds\n    }> {\n        const currentTime = Date.now();\n        \n        return this.activeAttempts.map(attempt => {\n            const elapsed = currentTime - attempt.startTime;\n            const progress = Math.min(1, elapsed / attempt.duration);\n            const timeRemaining = Math.max(0, (attempt.duration - elapsed) / 1000);\n            \n            const targetItem = this.findTargetItemForRecipe(attempt.recipeId);\n            \n            return {\n                recipeId: attempt.recipeId,\n                itemName: targetItem?.name || 'Unknown',\n                progress,\n                timeRemaining\n            };\n        });\n    }\n\n    /**\n     * Render crafting UI\n     */\n    render(renderer: Renderer): void {\n        if (!this.isVisible) return;\n        \n        // Render crafting panel\n        this.renderCraftingPanel(renderer);\n        \n        // Render progress indicators\n        this.renderCraftingProgress(renderer);\n    }\n\n    /**\n     * Render main crafting panel\n     */\n    private renderCraftingPanel(renderer: Renderer): void {\n        const panelX = 300;\n        const panelY = 100;\n        const panelWidth = 400;\n        const panelHeight = 300;\n        \n        // Panel background\n        renderer.fillRect(panelX, panelY, panelWidth, panelHeight, { r: 8, g: 12, b: 8 });\n        \n        // Panel border\n        const borderColor = { r: 16, g: 48, b: 16 };\n        renderer.drawLine(panelX, panelY, panelX + panelWidth, panelY, borderColor);\n        renderer.drawLine(panelX, panelY, panelX, panelY + panelHeight, borderColor);\n        renderer.drawLine(panelX + panelWidth, panelY, panelX + panelWidth, panelY + panelHeight, borderColor);\n        renderer.drawLine(panelX, panelY + panelHeight, panelX + panelWidth, panelY + panelHeight, borderColor);\n        \n        // Title\n        renderer.renderText('FABRICATION UNIT', panelX + 10, panelY + 10, { r: 12, g: 36, b: 12 }, 12);\n        \n        // Station list\n        let stationY = panelY + 35;\n        this.stations.forEach(station => {\n            const stationColor = station.isActive ? \n                { r: 12, g: 36, b: 12 } : \n                { r: 32, g: 32, b: 32 };\n            \n            const statusText = station.isActive ? 'ONLINE' : 'OFFLINE';\n            renderer.renderText(`[${station.id}] ${station.name}: ${statusText}`, \n                panelX + 10, stationY, stationColor, 8);\n            stationY += 12;\n        });\n        \n        // Available recipes for selected station\n        if (this.selectedStation) {\n            const recipes = this.getAvailableRecipes(this.selectedStation);\n            \n            renderer.renderText('AVAILABLE SCHEMATICS:', panelX + 10, stationY + 10, \n                { r: 48, g: 48, b: 48 }, 8);\n            \n            let recipeY = stationY + 25;\n            recipes.forEach(item => {\n                const craftability = this.canCraftRecipe(item.recipe!.id);\n                const textColor = craftability.canCraft ? \n                    { r: 12, g: 36, b: 12 } : \n                    { r: 72, g: 24, b: 24 };\n                \n                renderer.renderText(`- ${item.name}`, panelX + 20, recipeY, textColor, 8);\n                recipeY += 12;\n                \n                // Show missing materials\n                if (Object.keys(craftability.missingItems).length > 0) {\n                    const missingText = Object.entries(craftability.missingItems)\n                        .map(([id, count]) => `${count}x ${id}`)\n                        .join(', ');\n                    renderer.renderText(`  Missing: ${missingText}`, \n                        panelX + 30, recipeY, { r: 48, g: 32, b: 32 }, 7);\n                    recipeY += 10;\n                }\n            });\n        }\n    }\n\n    /**\n     * Render crafting progress\n     */\n    private renderCraftingProgress(renderer: Renderer): void {\n        const progressItems = this.getCraftingProgress();\n        if (progressItems.length === 0) return;\n        \n        const progressX = 50;\n        let progressY = 400;\n        \n        renderer.renderText('FABRICATION IN PROGRESS:', progressX, progressY, \n            { r: 12, g: 36, b: 12 }, 10);\n        progressY += 15;\n        \n        progressItems.forEach(item => {\n            // Progress bar\n            const barWidth = 200;\n            const barHeight = 8;\n            const fillWidth = Math.floor(barWidth * item.progress);\n            \n            // Bar background\n            renderer.fillRect(progressX, progressY, barWidth, barHeight, { r: 16, g: 16, b: 16 });\n            \n            // Bar fill\n            const fillColor = item.progress >= 1 ? \n                { r: 12, g: 36, b: 12 } : \n                { r: 32, g: 80, b: 64 };\n            renderer.fillRect(progressX, progressY, fillWidth, barHeight, fillColor);\n            \n            // Item name and time\n            renderer.renderText(`${item.itemName} - ${item.timeRemaining.toFixed(1)}s`, \n                progressX + barWidth + 10, progressY, { r: 48, g: 48, b: 48 }, 8);\n            \n            progressY += 15;\n        });\n    }\n\n    /**\n     * Show/hide crafting UI\n     */\n    setVisible(visible: boolean): void {\n        this.isVisible = visible;\n    }\n\n    /**\n     * Check if crafting UI is visible\n     */\n    isCraftingVisible(): boolean {\n        return this.isVisible;\n    }\n\n    /**\n     * Select crafting station\n     */\n    selectStation(stationId: string): void {\n        if (this.stations.has(stationId)) {\n            this.selectedStation = stationId;\n        }\n    }\n\n    /**\n     * Get selected station\n     */\n    getSelectedStation(): CraftingStation | null {\n        return this.selectedStation ? this.stations.get(this.selectedStation) || null : null;\n    }\n\n    /**\n     * Activate/deactivate station\n     */\n    setStationActive(stationId: string, active: boolean): void {\n        const station = this.stations.get(stationId);\n        if (station) {\n            station.isActive = active;\n            this.logger.info(`🔧 Station ${station.name} ${active ? 'activated' : 'deactivated'}`);\n        }\n    }\n\n    /**\n     * Get crafting statistics\n     */\n    getStats(): {\n        knownRecipes: number;\n        activeStations: number;\n        totalStations: number;\n        activeCrafting: number;\n    } {\n        const activeStations = Array.from(this.stations.values()).filter(s => s.isActive).length;\n        \n        return {\n            knownRecipes: this.knownRecipes.size,\n            activeStations,\n            totalStations: this.stations.size,\n            activeCrafting: this.activeAttempts.length\n        };\n    }\n\n    /**\n     * Save crafting state\n     */\n    saveState(): any {\n        return {\n            knownRecipes: Array.from(this.knownRecipes),\n            stations: Array.from(this.stations.values()),\n            activeAttempts: this.activeAttempts\n        };\n    }\n\n    /**\n     * Load crafting state\n     */\n    loadState(state: any): void {\n        if (state.knownRecipes) {\n            this.knownRecipes = new Set(state.knownRecipes);\n        }\n        \n        if (state.stations) {\n            state.stations.forEach((stationData: CraftingStation) => {\n                this.stations.set(stationData.id, stationData);\n            });\n        }\n        \n        if (state.activeAttempts) {\n            this.activeAttempts = state.activeAttempts;\n        }\n        \n        this.logger.info('🔧 Crafting state loaded');\n    }\n}","/**\n * Weapon System\n * Complete combat mechanics with projectiles, targeting, and damage\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer, Color } from '@core/Renderer';\nimport { GameItem } from '@items/ItemSystem';\n\nexport enum WeaponType {\n    Energy = 'energy',\n    Projectile = 'projectile', \n    Missile = 'missile',\n    Plasma = 'plasma',\n    Beam = 'beam',\n    Torpedo = 'torpedo'\n}\n\nexport enum DamageType {\n    Kinetic = 'kinetic',\n    Energy = 'energy',\n    Thermal = 'thermal',\n    Electromagnetic = 'electromagnetic',\n    Explosive = 'explosive'\n}\n\nexport enum TargetingMode {\n    Manual = 'manual',\n    Assisted = 'assisted',\n    Automatic = 'automatic',\n    PointDefense = 'point_defense'\n}\n\nexport interface WeaponStats {\n    damage: number;\n    range: number;\n    fireRate: number; // shots per second\n    energyCost: number;\n    accuracy: number; // 0-1\n    penetration: number;\n    spread: number; // degrees\n    chargeTime: number; // seconds\n    cooldownTime: number; // seconds\n    ammoCapacity?: number;\n    reloadTime?: number;\n}\n\nexport interface WeaponConfig {\n    id: string;\n    name: string;\n    type: WeaponType;\n    damageType: DamageType;\n    stats: WeaponStats;\n    item?: GameItem;\n    mountPoint: Vector2;\n    hardpointSize: 'small' | 'medium' | 'large';\n}\n\nexport interface Projectile {\n    id: string;\n    position: Vector2;\n    velocity: Vector2;\n    damage: number;\n    damageType: DamageType;\n    range: number;\n    maxRange: number;\n    size: number;\n    weaponId: string;\n    targetId?: string;\n    penetration: number;\n    isHoming: boolean;\n    homingStrength: number;\n    life: number; // 0-1\n    trail: Vector2[];\n}\n\nexport interface DamageResult {\n    targetId: string;\n    damage: number;\n    damageType: DamageType;\n    criticalHit: boolean;\n    penetrated: boolean;\n    shieldsHit: boolean;\n    hullHit: boolean;\n}\n\nexport interface WeaponEvents {\n    onWeaponFired?: (weapon: WeaponConfig, projectile: Projectile) => void;\n    onProjectileHit?: (projectile: Projectile, result: DamageResult) => void;\n    onWeaponOverheat?: (weapon: WeaponConfig) => void;\n    onAmmoEmpty?: (weapon: WeaponConfig) => void;\n}\n\nexport class WeaponSystem {\n    private weapons: Map<string, WeaponConfig> = new Map();\n    private projectiles: Map<string, Projectile> = new Map();\n    private weaponStates: Map<string, {\n        isCharging: boolean;\n        chargeProgress: number;\n        lastFired: number;\n        heat: number;\n        ammo: number;\n        isOverheated: boolean;\n        cooldownEnd: number;\n    }> = new Map();\n    \n    private events: WeaponEvents;\n    private nextProjectileId: number = 0;\n    \n    // Targeting system\n    private targetingMode: TargetingMode = TargetingMode.Manual;\n    private currentTarget: string | null = null;\n    private targetPosition: Vector2 | null = null;\n    private targets: Map<string, { position: Vector2, velocity: Vector2, size: number }> = new Map();\n    \n    private logger: Logger;\n\n    constructor(events: WeaponEvents = {}) {\n        this.logger = new Logger('WeaponSystem');\n        this.events = events;\n        \n        this.logger.info('⚔️ Weapon system initialized');\n    }\n\n    /**\n     * Add weapon to system\n     */\n    addWeapon(weapon: WeaponConfig): void {\n        this.weapons.set(weapon.id, weapon);\n        this.weaponStates.set(weapon.id, {\n            isCharging: false,\n            chargeProgress: 0,\n            lastFired: 0,\n            heat: 0,\n            ammo: weapon.stats.ammoCapacity || -1, // -1 for infinite energy weapons\n            isOverheated: false,\n            cooldownEnd: 0\n        });\n        \n        this.logger.info(`🔫 Added weapon: ${weapon.name}`, {\n            type: weapon.type,\n            damage: weapon.stats.damage,\n            range: weapon.stats.range\n        });\n    }\n\n    /**\n     * Remove weapon from system\n     */\n    removeWeapon(weaponId: string): void {\n        this.weapons.delete(weaponId);\n        this.weaponStates.delete(weaponId);\n        \n        // Remove projectiles from this weapon\n        for (const [projId, projectile] of this.projectiles.entries()) {\n            if (projectile.weaponId === weaponId) {\n                this.projectiles.delete(projId);\n            }\n        }\n        \n        this.logger.info(`🔫 Removed weapon: ${weaponId}`);\n    }\n\n    /**\n     * Fire weapon\n     */\n    fireWeapon(weaponId: string, sourcePosition: Vector2, targetPosition?: Vector2): boolean {\n        const weapon = this.weapons.get(weaponId);\n        const state = this.weaponStates.get(weaponId);\n        \n        if (!weapon || !state) return false;\n        \n        const currentTime = Date.now() / 1000;\n        \n        // Check if weapon can fire\n        if (state.isOverheated || currentTime < state.cooldownEnd) {\n            return false;\n        }\n        \n        // Check fire rate\n        const timeSinceLastShot = currentTime - state.lastFired;\n        const minInterval = 1 / weapon.stats.fireRate;\n        if (timeSinceLastShot < minInterval) {\n            return false;\n        }\n        \n        // Check ammo\n        if (state.ammo === 0) {\n            this.events.onAmmoEmpty?.(weapon);\n            return false;\n        }\n        \n        // For charge weapons, handle charging\n        if (weapon.stats.chargeTime > 0) {\n            if (!state.isCharging) {\n                state.isCharging = true;\n                state.chargeProgress = 0;\n                return false; // Start charging, don't fire yet\n            } else if (state.chargeProgress < 1.0) {\n                return false; // Still charging\n            }\n        }\n        \n        // Determine target position\n        let finalTargetPos = targetPosition;\n        if (!finalTargetPos) {\n            if (this.targetPosition) {\n                finalTargetPos = this.targetPosition;\n            } else if (this.currentTarget && this.targets.has(this.currentTarget)) {\n                finalTargetPos = this.targets.get(this.currentTarget)!.position;\n            } else {\n                // Default forward firing\n                finalTargetPos = {\n                    x: sourcePosition.x + weapon.stats.range,\n                    y: sourcePosition.y\n                };\n            }\n        }\n        \n        // Calculate firing direction with spread\n        const direction = this.calculateFiringDirection(sourcePosition, finalTargetPos, weapon.stats.spread);\n        \n        // Create projectile\n        const projectile = this.createProjectile(weapon, sourcePosition, direction, finalTargetPos);\n        this.projectiles.set(projectile.id, projectile);\n        \n        // Update weapon state\n        state.lastFired = currentTime;\n        state.heat += 0.1; // Weapons generate heat\n        state.isCharging = false;\n        state.chargeProgress = 0;\n        \n        if (state.ammo > 0) {\n            state.ammo--;\n        }\n        \n        // Check for overheat\n        if (state.heat > 1.0) {\n            state.isOverheated = true;\n            state.cooldownEnd = currentTime + weapon.stats.cooldownTime;\n            this.events.onWeaponOverheat?.(weapon);\n        }\n        \n        this.events.onWeaponFired?.(weapon, projectile);\n        \n        this.logger.debug(`🔥 Fired ${weapon.name}`, {\n            damage: projectile.damage,\n            range: projectile.maxRange,\n            targetDistance: this.calculateDistance(sourcePosition, finalTargetPos)\n        });\n        \n        return true;\n    }\n\n    /**\n     * Create projectile from weapon\n     */\n    private createProjectile(weapon: WeaponConfig, sourcePos: Vector2, direction: Vector2, targetPos: Vector2): Projectile {\n        const projectileId = `proj_${weapon.id}_${this.nextProjectileId++}`;\n        \n        // Calculate velocity based on weapon type\n        let speed = 500; // Default speed\n        let isHoming = false;\n        let homingStrength = 0;\n        \n        switch (weapon.type) {\n            case WeaponType.Energy:\n                speed = 800;\n                break;\n            case WeaponType.Projectile:\n                speed = 600;\n                break;\n            case WeaponType.Missile:\n                speed = 300;\n                isHoming = true;\n                homingStrength = 0.1;\n                break;\n            case WeaponType.Plasma:\n                speed = 400;\n                break;\n            case WeaponType.Beam:\n                speed = 1200; // Very fast\n                break;\n            case WeaponType.Torpedo:\n                speed = 250;\n                isHoming = true;\n                homingStrength = 0.15;\n                break;\n        }\n        \n        const velocity = {\n            x: direction.x * speed,\n            y: direction.y * speed\n        };\n        \n        return {\n            id: projectileId,\n            position: { ...sourcePos },\n            velocity,\n            damage: weapon.stats.damage,\n            damageType: weapon.damageType,\n            range: 0,\n            maxRange: weapon.stats.range,\n            size: this.getProjectileSize(weapon.type),\n            weaponId: weapon.id,\n            targetId: this.currentTarget || undefined,\n            penetration: weapon.stats.penetration,\n            isHoming,\n            homingStrength,\n            life: 1.0,\n            trail: []\n        };\n    }\n\n    /**\n     * Get projectile visual size based on weapon type\n     */\n    private getProjectileSize(weaponType: WeaponType): number {\n        switch (weaponType) {\n            case WeaponType.Energy: return 2;\n            case WeaponType.Projectile: return 1;\n            case WeaponType.Missile: return 4;\n            case WeaponType.Plasma: return 3;\n            case WeaponType.Beam: return 1;\n            case WeaponType.Torpedo: return 6;\n            default: return 2;\n        }\n    }\n\n    /**\n     * Calculate firing direction with accuracy and spread\n     */\n    private calculateFiringDirection(sourcePos: Vector2, targetPos: Vector2, spread: number): Vector2 {\n        // Base direction to target\n        const dx = targetPos.x - sourcePos.x;\n        const dy = targetPos.y - sourcePos.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance === 0) {\n            return { x: 1, y: 0 }; // Default forward\n        }\n        \n        // Normalize\n        let direction = {\n            x: dx / distance,\n            y: dy / distance\n        };\n        \n        // Apply spread (inaccuracy)\n        if (spread > 0) {\n            const spreadRad = (spread * Math.PI / 180) * (Math.random() - 0.5);\n            const cos = Math.cos(spreadRad);\n            const sin = Math.sin(spreadRad);\n            \n            direction = {\n                x: direction.x * cos - direction.y * sin,\n                y: direction.x * sin + direction.y * cos\n            };\n        }\n        \n        return direction;\n    }\n\n    /**\n     * Update weapon system\n     */\n    update(deltaTime: number): void {\n        this.updateWeaponStates(deltaTime);\n        this.updateProjectiles(deltaTime);\n        this.checkProjectileHits();\n        this.cleanupProjectiles();\n    }\n\n    /**\n     * Update weapon states (cooling, charging, etc.)\n     */\n    private updateWeaponStates(deltaTime: number): void {\n        const currentTime = Date.now() / 1000;\n        \n        for (const [weaponId, state] of this.weaponStates.entries()) {\n            const weapon = this.weapons.get(weaponId);\n            if (!weapon) continue;\n            \n            // Cool down heat\n            if (state.heat > 0) {\n                state.heat = Math.max(0, state.heat - deltaTime * 0.5); // Heat dissipation rate\n            }\n            \n            // Check if cooled down from overheat\n            if (state.isOverheated && currentTime >= state.cooldownEnd) {\n                state.isOverheated = false;\n                state.heat = 0;\n            }\n            \n            // Update charging\n            if (state.isCharging && weapon.stats.chargeTime > 0) {\n                state.chargeProgress = Math.min(1.0, state.chargeProgress + deltaTime / weapon.stats.chargeTime);\n            }\n        }\n    }\n\n    /**\n     * Update projectile movement and behavior\n     */\n    private updateProjectiles(deltaTime: number): void {\n        for (const [projId, projectile] of this.projectiles.entries()) {\n            // Update position\n            projectile.position.x += projectile.velocity.x * deltaTime;\n            projectile.position.y += projectile.velocity.y * deltaTime;\n            \n            // Update range\n            projectile.range += Math.sqrt(\n                projectile.velocity.x * projectile.velocity.x + \n                projectile.velocity.y * projectile.velocity.y\n            ) * deltaTime;\n            \n            // Update trail\n            if (projectile.trail.length > 10) {\n                projectile.trail.shift(); // Remove oldest position\n            }\n            projectile.trail.push({ ...projectile.position });\n            \n            // Homing behavior\n            if (projectile.isHoming && projectile.targetId && this.targets.has(projectile.targetId)) {\n                this.updateHomingProjectile(projectile, deltaTime);\n            }\n            \n            // Update life based on range\n            projectile.life = Math.max(0, 1 - (projectile.range / projectile.maxRange));\n        }\n    }\n\n    /**\n     * Update homing projectile guidance\n     */\n    private updateHomingProjectile(projectile: Projectile, deltaTime: number): void {\n        const target = this.targets.get(projectile.targetId!);\n        if (!target) return;\n        \n        // Predict target position\n        const predictedPos = {\n            x: target.position.x + target.velocity.x * 0.5, // 0.5 second prediction\n            y: target.position.y + target.velocity.y * 0.5\n        };\n        \n        // Calculate direction to predicted position\n        const dx = predictedPos.x - projectile.position.x;\n        const dy = predictedPos.y - projectile.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 0) {\n            const targetDirection = {\n                x: dx / distance,\n                y: dy / distance\n            };\n            \n            // Current velocity direction\n            const speed = Math.sqrt(\n                projectile.velocity.x * projectile.velocity.x + \n                projectile.velocity.y * projectile.velocity.y\n            );\n            \n            // Interpolate toward target direction\n            const currentDirection = {\n                x: projectile.velocity.x / speed,\n                y: projectile.velocity.y / speed\n            };\n            \n            const homingFactor = projectile.homingStrength * deltaTime * 10;\n            const newDirection = {\n                x: currentDirection.x + (targetDirection.x - currentDirection.x) * homingFactor,\n                y: currentDirection.y + (targetDirection.y - currentDirection.y) * homingFactor\n            };\n            \n            // Normalize and apply\n            const newLength = Math.sqrt(newDirection.x * newDirection.x + newDirection.y * newDirection.y);\n            if (newLength > 0) {\n                projectile.velocity.x = (newDirection.x / newLength) * speed;\n                projectile.velocity.y = (newDirection.y / newLength) * speed;\n            }\n        }\n    }\n\n    /**\n     * Check for projectile hits against targets\n     */\n    private checkProjectileHits(): void {\n        for (const [projId, projectile] of this.projectiles.entries()) {\n            for (const [targetId, target] of this.targets.entries()) {\n                const distance = this.calculateDistance(projectile.position, target.position);\n                const hitRadius = projectile.size + target.size;\n                \n                if (distance <= hitRadius) {\n                    // Hit detected\n                    const damage = this.calculateDamage(projectile, target);\n                    const result: DamageResult = {\n                        targetId,\n                        damage: damage.finalDamage,\n                        damageType: projectile.damageType,\n                        criticalHit: damage.critical,\n                        penetrated: damage.penetrated,\n                        shieldsHit: damage.shieldsHit,\n                        hullHit: damage.hullHit\n                    };\n                    \n                    this.events.onProjectileHit?.(projectile, result);\n                    \n                    // Remove projectile unless it penetrates\n                    if (!damage.penetrated) {\n                        this.projectiles.delete(projId);\n                    }\n                    \n                    this.logger.debug(`💥 Projectile hit`, {\n                        targetId,\n                        damage: damage.finalDamage,\n                        critical: damage.critical\n                    });\n                    \n                    break; // One hit per projectile per frame\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate damage from projectile hit\n     */\n    private calculateDamage(projectile: Projectile, target: { position: Vector2, velocity: Vector2, size: number }): {\n        finalDamage: number;\n        critical: boolean;\n        penetrated: boolean;\n        shieldsHit: boolean;\n        hullHit: boolean;\n    } {\n        let damage = projectile.damage;\n        let critical = false;\n        let penetrated = false;\n        \n        // Critical hit chance (5% base)\n        if (Math.random() < 0.05) {\n            critical = true;\n            damage *= 2;\n        }\n        \n        // Damage falloff with range\n        const falloff = Math.max(0.3, 1 - (projectile.range / projectile.maxRange) * 0.5);\n        damage *= falloff;\n        \n        // Penetration check (simplified)\n        if (projectile.penetration > 0.7) {\n            penetrated = Math.random() < 0.3;\n        }\n        \n        return {\n            finalDamage: Math.floor(damage),\n            critical,\n            penetrated,\n            shieldsHit: true, // Simplified - assume shields absorb first\n            hullHit: penetrated\n        };\n    }\n\n    /**\n     * Remove expired projectiles\n     */\n    private cleanupProjectiles(): void {\n        for (const [projId, projectile] of this.projectiles.entries()) {\n            if (projectile.life <= 0 || projectile.range >= projectile.maxRange) {\n                this.projectiles.delete(projId);\n            }\n        }\n    }\n\n    /**\n     * Set targeting mode\n     */\n    setTargetingMode(mode: TargetingMode): void {\n        this.targetingMode = mode;\n        this.logger.debug(`🎯 Targeting mode: ${mode}`);\n    }\n\n    /**\n     * Set manual target position\n     */\n    setTargetPosition(position: Vector2): void {\n        this.targetPosition = { ...position };\n    }\n\n    /**\n     * Set current target\n     */\n    setTarget(targetId: string | null): void {\n        this.currentTarget = targetId;\n        this.logger.debug(`🎯 Target: ${targetId || 'none'}`);\n    }\n\n    /**\n     * Add/update target for tracking\n     */\n    updateTarget(targetId: string, position: Vector2, velocity: Vector2, size: number): void {\n        this.targets.set(targetId, { position: { ...position }, velocity: { ...velocity }, size });\n    }\n\n    /**\n     * Remove target from tracking\n     */\n    removeTarget(targetId: string): void {\n        this.targets.delete(targetId);\n        if (this.currentTarget === targetId) {\n            this.currentTarget = null;\n        }\n    }\n\n    /**\n     * Get weapon information\n     */\n    getWeapon(weaponId: string): { weapon: WeaponConfig; state: any } | null {\n        const weapon = this.weapons.get(weaponId);\n        const state = this.weaponStates.get(weaponId);\n        \n        if (!weapon || !state) return null;\n        \n        return { weapon, state };\n    }\n\n    /**\n     * Get all weapons\n     */\n    getAllWeapons(): Array<{ weapon: WeaponConfig; state: any }> {\n        const result: Array<{ weapon: WeaponConfig; state: any }> = [];\n        \n        for (const [weaponId, weapon] of this.weapons.entries()) {\n            const state = this.weaponStates.get(weaponId);\n            if (state) {\n                result.push({ weapon, state });\n            }\n        }\n        \n        return result;\n    }\n\n    /**\n     * Reload weapon\n     */\n    reloadWeapon(weaponId: string): boolean {\n        const weapon = this.weapons.get(weaponId);\n        const state = this.weaponStates.get(weaponId);\n        \n        if (!weapon || !state || !weapon.stats.ammoCapacity) return false;\n        \n        state.ammo = weapon.stats.ammoCapacity;\n        this.logger.debug(`🔄 Reloaded ${weapon.name}`);\n        \n        return true;\n    }\n\n    /**\n     * Render weapon effects\n     */\n    render(renderer: Renderer): void {\n        this.renderProjectiles(renderer);\n        this.renderWeaponCharges(renderer);\n    }\n\n    /**\n     * Render projectiles and their trails\n     */\n    private renderProjectiles(renderer: Renderer): void {\n        for (const projectile of this.projectiles.values()) {\n            // Render trail\n            if (projectile.trail.length > 1) {\n                for (let i = 1; i < projectile.trail.length; i++) {\n                    const alpha = (i / projectile.trail.length) * projectile.life;\n                    const trailColor = this.getProjectileColor(projectile, alpha * 0.5);\n                    \n                    renderer.drawLine(\n                        projectile.trail[i-1].x, projectile.trail[i-1].y,\n                        projectile.trail[i].x, projectile.trail[i].y,\n                        trailColor\n                    );\n                }\n            }\n            \n            // Render projectile\n            const color = this.getProjectileColor(projectile, projectile.life);\n            const size = projectile.size * projectile.life;\n            \n            if (projectile.size > 2) {\n                // Larger projectiles as filled circles\n                renderer.drawCircle(projectile.position.x, projectile.position.y, size, color, true);\n            } else {\n                // Small projectiles as pixels\n                renderer.fillRect(\n                    projectile.position.x - size/2, \n                    projectile.position.y - size/2, \n                    size, size, color\n                );\n            }\n        }\n    }\n\n    /**\n     * Get projectile color based on weapon type\n     */\n    private getProjectileColor(projectile: Projectile, alpha: number): Color {\n        const weapon = this.weapons.get(projectile.weaponId);\n        if (!weapon) return { r: 48, g: 48, b: 48 };\n        \n        let baseColor: Color;\n        \n        switch (weapon.type) {\n            case WeaponType.Energy:\n                baseColor = { r: 16, g: 48, b: 16 }; // Green energy\n                break;\n            case WeaponType.Projectile:\n                baseColor = { r: 96, g: 64, b: 16 }; // Orange projectile\n                break;\n            case WeaponType.Missile:\n                baseColor = { r: 72, g: 24, b: 24 }; // Red missile\n                break;\n            case WeaponType.Plasma:\n                baseColor = { r: 48, g: 24, b: 72 }; // Purple plasma\n                break;\n            case WeaponType.Beam:\n                baseColor = { r: 32, g: 80, b: 64 }; // Cyan beam\n                break;\n            case WeaponType.Torpedo:\n                baseColor = { r: 64, g: 32, b: 96 }; // Magenta torpedo\n                break;\n            default:\n                baseColor = { r: 48, g: 48, b: 48 };\n        }\n        \n        return {\n            r: Math.floor(baseColor.r * alpha),\n            g: Math.floor(baseColor.g * alpha),\n            b: Math.floor(baseColor.b * alpha)\n        };\n    }\n\n    /**\n     * Render weapon charge indicators\n     */\n    private renderWeaponCharges(renderer: Renderer): void {\n        // TODO: Render charging indicators for weapons that require charging\n        // This would show charge progress bars near weapon hardpoints\n    }\n\n    /**\n     * Calculate distance between two points\n     */\n    private calculateDistance(pos1: Vector2, pos2: Vector2): number {\n        const dx = pos1.x - pos2.x;\n        const dy = pos1.y - pos2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Get weapon system statistics\n     */\n    getStats(): {\n        totalWeapons: number;\n        activeProjectiles: number;\n        targetsTracked: number;\n        weaponsByType: { [type: string]: number };\n    } {\n        const weaponsByType: { [type: string]: number } = {};\n        \n        for (const weapon of this.weapons.values()) {\n            weaponsByType[weapon.type] = (weaponsByType[weapon.type] || 0) + 1;\n        }\n        \n        return {\n            totalWeapons: this.weapons.size,\n            activeProjectiles: this.projectiles.size,\n            targetsTracked: this.targets.size,\n            weaponsByType\n        };\n    }\n\n    /**\n     * Clear all projectiles (for cleanup/reset)\n     */\n    clearProjectiles(): void {\n        this.projectiles.clear();\n    }\n\n    /**\n     * Clear all targets\n     */\n    clearTargets(): void {\n        this.targets.clear();\n        this.currentTarget = null;\n    }\n}","/**\n * Enemy AI System\n * Intelligent combat AI with different behaviors and ship types\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer, Color } from '@core/Renderer';\nimport { WeaponSystem, WeaponConfig, WeaponType, DamageType } from './WeaponSystem';\n\nexport enum AIBehavior {\n    Aggressive = 'aggressive',\n    Defensive = 'defensive',\n    Evasive = 'evasive',\n    Patrol = 'patrol',\n    Guard = 'guard',\n    Kamikaze = 'kamikaze',\n    Sniper = 'sniper',\n    Support = 'support'\n}\n\nexport enum ShipClass {\n    Fighter = 'fighter',\n    Corvette = 'corvette',\n    Frigate = 'frigate',\n    Destroyer = 'destroyer',\n    Cruiser = 'cruiser',\n    Battleship = 'battleship',\n    Drone = 'drone'\n}\n\nexport interface EnemyShipConfig {\n    id: string;\n    name: string;\n    shipClass: ShipClass;\n    faction: string;\n    \n    // Physical properties\n    size: number;\n    mass: number;\n    maxSpeed: number;\n    acceleration: number;\n    turnRate: number;\n    \n    // Combat properties\n    hull: number;\n    maxHull: number;\n    shields: number;\n    maxShields: number;\n    armor: number;\n    \n    // AI properties\n    behavior: AIBehavior;\n    aggression: number; // 0-1\n    intelligence: number; // 0-1\n    accuracy: number; // 0-1\n    reactionTime: number; // seconds\n    \n    // Equipment\n    weapons: WeaponConfig[];\n    engagementRange: number;\n    preferredRange: number;\n}\n\nexport interface EnemyShip {\n    config: EnemyShipConfig;\n    position: Vector2;\n    velocity: Vector2;\n    rotation: number;\n    \n    // AI state\n    currentTarget: string | null;\n    state: AIState;\n    stateTimer: number;\n    lastDecisionTime: number;\n    \n    // Combat state\n    lastShotTime: number;\n    weaponCooldowns: Map<string, number>;\n    \n    // Movement state\n    waypoint: Vector2 | null;\n    patrolCenter: Vector2;\n    patrolRadius: number;\n    \n    // Status\n    isAlive: boolean;\n    lastDamageTime: number;\n}\n\nexport enum AIState {\n    Idle = 'idle',\n    Patrol = 'patrol',\n    Pursue = 'pursue',\n    Attack = 'attack',\n    Evade = 'evade',\n    Retreat = 'retreat',\n    Guard = 'guard',\n    CircleStrafe = 'circle_strafe',\n    Ramming = 'ramming'\n}\n\nexport interface AIEvents {\n    onEnemySpawned?: (enemy: EnemyShip) => void;\n    onEnemyDestroyed?: (enemy: EnemyShip) => void;\n    onEnemyDamaged?: (enemy: EnemyShip, damage: number) => void;\n    onEnemyStateChanged?: (enemy: EnemyShip, oldState: AIState, newState: AIState) => void;\n}\n\nexport class EnemyAI {\n    private enemies: Map<string, EnemyShip> = new Map();\n    private weaponSystem: WeaponSystem;\n    private events: AIEvents;\n    \n    // Player tracking\n    private playerPosition: Vector2 = { x: 0, y: 0 };\n    private playerVelocity: Vector2 = { x: 0, y: 0 };\n    private playerSize: number = 20;\n    \n    // Faction relationships\n    private factionRelations: Map<string, Map<string, number>> = new Map(); // -1 to 1\n    \n    private logger: Logger;\n\n    constructor(weaponSystem: WeaponSystem, events: AIEvents = {}) {\n        this.logger = new Logger('EnemyAI');\n        this.weaponSystem = weaponSystem;\n        this.events = events;\n        \n        this.initializeFactions();\n        \n        this.logger.info('🤖 Enemy AI system initialized');\n    }\n\n    /**\n     * Initialize faction relationships\n     */\n    private initializeFactions(): void {\n        const factions = ['pirates', 'aliens', 'rebels', 'corporation', 'military'];\n        \n        for (const faction1 of factions) {\n            if (!this.factionRelations.has(faction1)) {\n                this.factionRelations.set(faction1, new Map());\n            }\n            \n            for (const faction2 of factions) {\n                let relation = 0;\n                \n                if (faction1 === faction2) {\n                    relation = 1; // Same faction\n                } else if (\n                    (faction1 === 'pirates' && faction2 === 'military') ||\n                    (faction1 === 'military' && faction2 === 'pirates') ||\n                    (faction1 === 'rebels' && faction2 === 'corporation') ||\n                    (faction1 === 'corporation' && faction2 === 'rebels')\n                ) {\n                    relation = -1; // Hostile\n                } else if (faction1 === 'aliens') {\n                    relation = -0.5; // Aliens generally hostile\n                } else {\n                    relation = Math.random() * 0.4 - 0.2; // Neutral with slight variation\n                }\n                \n                this.factionRelations.get(faction1)!.set(faction2, relation);\n            }\n        }\n    }\n\n    /**\n     * Spawn enemy ship\n     */\n    spawnEnemy(config: EnemyShipConfig, position: Vector2): string {\n        const enemy: EnemyShip = {\n            config,\n            position: { ...position },\n            velocity: { x: 0, y: 0 },\n            rotation: Math.random() * Math.PI * 2,\n            \n            currentTarget: null,\n            state: AIState.Idle,\n            stateTimer: 0,\n            lastDecisionTime: 0,\n            \n            lastShotTime: 0,\n            weaponCooldowns: new Map(),\n            \n            waypoint: null,\n            patrolCenter: { ...position },\n            patrolRadius: 500,\n            \n            isAlive: true,\n            lastDamageTime: 0\n        };\n        \n        // Add weapons to weapon system\n        config.weapons.forEach(weapon => {\n            const weaponId = `${config.id}_${weapon.id}`;\n            this.weaponSystem.addWeapon({\n                ...weapon,\n                id: weaponId\n            });\n        });\n        \n        // Add as target to weapon system\n        this.weaponSystem.updateTarget(config.id, position, { x: 0, y: 0 }, config.size);\n        \n        this.enemies.set(config.id, enemy);\n        this.events.onEnemySpawned?.(enemy);\n        \n        this.logger.info(`🛸 Spawned ${config.shipClass} \"${config.name}\"`, {\n            faction: config.faction,\n            behavior: config.behavior,\n            position\n        });\n        \n        return config.id;\n    }\n\n    /**\n     * Update player information for AI targeting\n     */\n    updatePlayer(position: Vector2, velocity: Vector2, size: number): void {\n        this.playerPosition = { ...position };\n        this.playerVelocity = { ...velocity };\n        this.playerSize = size;\n        \n        // Update player as target in weapon system\n        this.weaponSystem.updateTarget('player', position, velocity, size);\n    }\n\n    /**\n     * Update AI system\n     */\n    update(deltaTime: number): void {\n        for (const enemy of this.enemies.values()) {\n            if (enemy.isAlive) {\n                this.updateEnemy(enemy, deltaTime);\n            }\n        }\n        \n        this.cleanupDeadEnemies();\n    }\n\n    /**\n     * Update individual enemy\n     */\n    private updateEnemy(enemy: EnemyShip, deltaTime: number): void {\n        const currentTime = Date.now() / 1000;\n        \n        // Update timers\n        enemy.stateTimer += deltaTime;\n        \n        // AI decision making (based on reaction time)\n        if (currentTime - enemy.lastDecisionTime >= enemy.config.reactionTime) {\n            this.makeDecision(enemy);\n            enemy.lastDecisionTime = currentTime;\n        }\n        \n        // Execute current state\n        this.executeState(enemy, deltaTime);\n        \n        // Update movement\n        this.updateMovement(enemy, deltaTime);\n        \n        // Update weapon targeting and firing\n        this.updateCombat(enemy, deltaTime);\n        \n        // Update weapon system target\n        this.weaponSystem.updateTarget(enemy.config.id, enemy.position, enemy.velocity, enemy.config.size);\n    }\n\n    /**\n     * AI decision making\n     */\n    private makeDecision(enemy: EnemyShip): void {\n        const distanceToPlayer = this.calculateDistance(enemy.position, this.playerPosition);\n        const inRange = distanceToPlayer <= enemy.config.engagementRange;\n        const hasLineOfSight = this.hasLineOfSight(enemy.position, this.playerPosition);\n        \n        let newState = enemy.state;\n        \n        switch (enemy.config.behavior) {\n            case AIBehavior.Aggressive:\n                if (inRange && hasLineOfSight) {\n                    newState = AIState.Attack;\n                } else if (distanceToPlayer < enemy.config.engagementRange * 2) {\n                    newState = AIState.Pursue;\n                } else {\n                    newState = AIState.Patrol;\n                }\n                break;\n                \n            case AIBehavior.Defensive:\n                if (inRange && hasLineOfSight && enemy.lastDamageTime > Date.now() / 1000 - 5) {\n                    newState = AIState.Attack;\n                } else if (distanceToPlayer < enemy.config.engagementRange) {\n                    newState = AIState.Guard;\n                } else {\n                    newState = AIState.Patrol;\n                }\n                break;\n                \n            case AIBehavior.Evasive:\n                if (enemy.config.hull < enemy.config.maxHull * 0.3) {\n                    newState = AIState.Retreat;\n                } else if (inRange) {\n                    newState = AIState.Evade;\n                } else {\n                    newState = AIState.Patrol;\n                }\n                break;\n                \n            case AIBehavior.Sniper:\n                if (distanceToPlayer <= enemy.config.preferredRange && hasLineOfSight) {\n                    newState = AIState.Attack;\n                } else if (distanceToPlayer < enemy.config.preferredRange) {\n                    newState = AIState.Retreat; // Back up to preferred range\n                } else {\n                    newState = AIState.Pursue;\n                }\n                break;\n                \n            case AIBehavior.Kamikaze:\n                if (distanceToPlayer < 100) {\n                    newState = AIState.Ramming;\n                } else {\n                    newState = AIState.Pursue;\n                }\n                break;\n                \n            default:\n                newState = AIState.Patrol;\n        }\n        \n        if (newState !== enemy.state) {\n            this.changeState(enemy, newState);\n        }\n    }\n\n    /**\n     * Change enemy AI state\n     */\n    private changeState(enemy: EnemyShip, newState: AIState): void {\n        const oldState = enemy.state;\n        enemy.state = newState;\n        enemy.stateTimer = 0;\n        \n        // State entry logic\n        switch (newState) {\n            case AIState.Patrol:\n                enemy.waypoint = this.generatePatrolWaypoint(enemy);\n                break;\n                \n            case AIState.Pursue:\n                enemy.currentTarget = 'player';\n                break;\n                \n            case AIState.Attack:\n                enemy.currentTarget = 'player';\n                break;\n                \n            case AIState.CircleStrafe:\n                enemy.currentTarget = 'player';\n                break;\n                \n            case AIState.Retreat:\n                enemy.waypoint = this.generateRetreatWaypoint(enemy);\n                break;\n        }\n        \n        this.events.onEnemyStateChanged?.(enemy, oldState, newState);\n        \n        this.logger.debug(`🤖 ${enemy.config.name} state: ${oldState} → ${newState}`);\n    }\n\n    /**\n     * Execute current AI state\n     */\n    private executeState(enemy: EnemyShip, deltaTime: number): void {\n        switch (enemy.state) {\n            case AIState.Idle:\n                // Do nothing, maybe rotate slowly\n                break;\n                \n            case AIState.Patrol:\n                this.executePatrol(enemy, deltaTime);\n                break;\n                \n            case AIState.Pursue:\n                this.executePursue(enemy, deltaTime);\n                break;\n                \n            case AIState.Attack:\n                this.executeAttack(enemy, deltaTime);\n                break;\n                \n            case AIState.Evade:\n                this.executeEvade(enemy, deltaTime);\n                break;\n                \n            case AIState.Retreat:\n                this.executeRetreat(enemy, deltaTime);\n                break;\n                \n            case AIState.CircleStrafe:\n                this.executeCircleStrafe(enemy, deltaTime);\n                break;\n                \n            case AIState.Ramming:\n                this.executeRamming(enemy, deltaTime);\n                break;\n        }\n    }\n\n    /**\n     * Execute patrol behavior\n     */\n    private executePatrol(enemy: EnemyShip, deltaTime: number): void {\n        if (!enemy.waypoint || this.calculateDistance(enemy.position, enemy.waypoint) < 50) {\n            enemy.waypoint = this.generatePatrolWaypoint(enemy);\n        }\n        \n        this.moveToward(enemy, enemy.waypoint, 0.5); // Half speed for patrol\n    }\n\n    /**\n     * Execute pursue behavior\n     */\n    private executePursue(enemy: EnemyShip, deltaTime: number): void {\n        const predictedPlayerPos = this.predictPlayerPosition(0.5);\n        this.moveToward(enemy, predictedPlayerPos, 1.0);\n    }\n\n    /**\n     * Execute attack behavior\n     */\n    private executeAttack(enemy: EnemyShip, deltaTime: number): void {\n        const distanceToPlayer = this.calculateDistance(enemy.position, this.playerPosition);\n        \n        if (distanceToPlayer > enemy.config.preferredRange * 1.2) {\n            // Too far, move closer\n            this.moveToward(enemy, this.playerPosition, 1.0);\n        } else if (distanceToPlayer < enemy.config.preferredRange * 0.8) {\n            // Too close, back away\n            const retreatPoint = this.calculateRetreatPoint(enemy.position, this.playerPosition);\n            this.moveToward(enemy, retreatPoint, 0.8);\n        } else {\n            // Good range, circle strafe\n            this.executeCircleStrafe(enemy, deltaTime);\n        }\n    }\n\n    /**\n     * Execute evade behavior\n     */\n    private executeEvade(enemy: EnemyShip, deltaTime: number): void {\n        const evasionPoint = this.calculateEvasionPoint(enemy);\n        this.moveToward(enemy, evasionPoint, 1.2); // Slightly faster for evasion\n    }\n\n    /**\n     * Execute retreat behavior\n     */\n    private executeRetreat(enemy: EnemyShip, deltaTime: number): void {\n        if (!enemy.waypoint) {\n            enemy.waypoint = this.generateRetreatWaypoint(enemy);\n        }\n        \n        this.moveToward(enemy, enemy.waypoint, 1.5); // Faster retreat\n    }\n\n    /**\n     * Execute circle strafe behavior\n     */\n    private executeCircleStrafe(enemy: EnemyShip, deltaTime: number): void {\n        const toPlayer = {\n            x: this.playerPosition.x - enemy.position.x,\n            y: this.playerPosition.y - enemy.position.y\n        };\n        \n        const distance = Math.sqrt(toPlayer.x * toPlayer.x + toPlayer.y * toPlayer.y);\n        if (distance === 0) return;\n        \n        // Normalize\n        toPlayer.x /= distance;\n        toPlayer.y /= distance;\n        \n        // Calculate perpendicular direction for strafing\n        const strafeDirection = {\n            x: -toPlayer.y, // Perpendicular\n            y: toPlayer.x\n        };\n        \n        // Random direction change\n        if (Math.random() < 0.1) {\n            strafeDirection.x *= -1;\n            strafeDirection.y *= -1;\n        }\n        \n        // Move in strafe direction\n        const targetPoint = {\n            x: enemy.position.x + strafeDirection.x * 200,\n            y: enemy.position.y + strafeDirection.y * 200\n        };\n        \n        this.moveToward(enemy, targetPoint, 0.8);\n    }\n\n    /**\n     * Execute ramming behavior\n     */\n    private executeRamming(enemy: EnemyShip, deltaTime: number): void {\n        // Full speed toward player\n        this.moveToward(enemy, this.playerPosition, 2.0); // Maximum speed\n    }\n\n    /**\n     * Move enemy toward target position\n     */\n    private moveToward(enemy: EnemyShip, target: Vector2, speedMultiplier: number): void {\n        const direction = {\n            x: target.x - enemy.position.x,\n            y: target.y - enemy.position.y\n        };\n        \n        const distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n        if (distance === 0) return;\n        \n        // Normalize\n        direction.x /= distance;\n        direction.y /= distance;\n        \n        // Apply desired velocity\n        const desiredSpeed = enemy.config.maxSpeed * speedMultiplier;\n        const desiredVelocity = {\n            x: direction.x * desiredSpeed,\n            y: direction.y * desiredSpeed\n        };\n        \n        // Smooth acceleration\n        const acceleration = enemy.config.acceleration;\n        enemy.velocity.x += (desiredVelocity.x - enemy.velocity.x) * acceleration * 0.016; // Assume 60fps\n        enemy.velocity.y += (desiredVelocity.y - enemy.velocity.y) * acceleration * 0.016;\n        \n        // Update rotation to face movement direction\n        const targetRotation = Math.atan2(direction.y, direction.x);\n        enemy.rotation = this.lerpAngle(enemy.rotation, targetRotation, enemy.config.turnRate * 0.016);\n    }\n\n    /**\n     * Update enemy movement\n     */\n    private updateMovement(enemy: EnemyShip, deltaTime: number): void {\n        // Apply velocity\n        enemy.position.x += enemy.velocity.x * deltaTime;\n        enemy.position.y += enemy.velocity.y * deltaTime;\n        \n        // Apply drag\n        const drag = 0.95;\n        enemy.velocity.x *= drag;\n        enemy.velocity.y *= drag;\n    }\n\n    /**\n     * Update combat behavior\n     */\n    private updateCombat(enemy: EnemyShip, deltaTime: number): void {\n        if (!enemy.currentTarget) return;\n        \n        const currentTime = Date.now() / 1000;\n        const target = enemy.currentTarget === 'player' ? this.playerPosition : null;\n        \n        if (!target) return;\n        \n        const distance = this.calculateDistance(enemy.position, target);\n        const inRange = distance <= enemy.config.engagementRange;\n        const hasLineOfSight = this.hasLineOfSight(enemy.position, target);\n        \n        if (inRange && hasLineOfSight) {\n            // Try to fire weapons\n            for (const weaponConfig of enemy.config.weapons) {\n                const weaponId = `${enemy.config.id}_${weaponConfig.id}`;\n                const cooldownKey = weaponId;\n                const lastFired = enemy.weaponCooldowns.get(cooldownKey) || 0;\n                \n                // Check if weapon can fire based on fire rate\n                const fireRate = weaponConfig.stats.fireRate;\n                const timeSinceLastShot = currentTime - lastFired;\n                \n                if (timeSinceLastShot >= 1 / fireRate) {\n                    // Apply accuracy\n                    const accuracy = enemy.config.accuracy * enemy.config.intelligence;\n                    const shouldFire = Math.random() < accuracy;\n                    \n                    if (shouldFire) {\n                        const fired = this.weaponSystem.fireWeapon(\n                            weaponId,\n                            enemy.position,\n                            this.predictPlayerPosition(distance / 600) // Predict based on projectile travel time\n                        );\n                        \n                        if (fired) {\n                            enemy.weaponCooldowns.set(cooldownKey, currentTime);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Apply damage to enemy\n     */\n    applyDamage(enemyId: string, damage: number, damageType: string): boolean {\n        const enemy = this.enemies.get(enemyId);\n        if (!enemy || !enemy.isAlive) return false;\n        \n        // Apply armor reduction\n        let finalDamage = damage;\n        if (enemy.config.armor > 0) {\n            finalDamage = Math.max(1, damage - enemy.config.armor * 0.1);\n        }\n        \n        // Apply to shields first\n        if (enemy.config.shields > 0) {\n            const shieldDamage = Math.min(finalDamage, enemy.config.shields);\n            enemy.config.shields -= shieldDamage;\n            finalDamage -= shieldDamage;\n        }\n        \n        // Apply remaining damage to hull\n        if (finalDamage > 0) {\n            enemy.config.hull -= finalDamage;\n        }\n        \n        enemy.lastDamageTime = Date.now() / 1000;\n        \n        this.events.onEnemyDamaged?.(enemy, damage);\n        \n        // Check if destroyed\n        if (enemy.config.hull <= 0) {\n            this.destroyEnemy(enemyId);\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Destroy enemy\n     */\n    private destroyEnemy(enemyId: string): void {\n        const enemy = this.enemies.get(enemyId);\n        if (!enemy) return;\n        \n        enemy.isAlive = false;\n        \n        // Remove weapons\n        enemy.config.weapons.forEach(weapon => {\n            this.weaponSystem.removeWeapon(`${enemyId}_${weapon.id}`);\n        });\n        \n        // Remove from weapon system targets\n        this.weaponSystem.removeTarget(enemyId);\n        \n        this.events.onEnemyDestroyed?.(enemy);\n        \n        this.logger.info(`💥 Destroyed ${enemy.config.name}`);\n    }\n\n    /**\n     * Clean up dead enemies\n     */\n    private cleanupDeadEnemies(): void {\n        for (const [enemyId, enemy] of this.enemies.entries()) {\n            if (!enemy.isAlive) {\n                this.enemies.delete(enemyId);\n            }\n        }\n    }\n\n    /**\n     * Helper methods\n     */\n    \n    private generatePatrolWaypoint(enemy: EnemyShip): Vector2 {\n        const angle = Math.random() * Math.PI * 2;\n        const radius = enemy.patrolRadius * (0.5 + Math.random() * 0.5);\n        \n        return {\n            x: enemy.patrolCenter.x + Math.cos(angle) * radius,\n            y: enemy.patrolCenter.y + Math.sin(angle) * radius\n        };\n    }\n\n    private generateRetreatWaypoint(enemy: EnemyShip): Vector2 {\n        const awayFromPlayer = {\n            x: enemy.position.x - this.playerPosition.x,\n            y: enemy.position.y - this.playerPosition.y\n        };\n        \n        const distance = Math.sqrt(awayFromPlayer.x * awayFromPlayer.x + awayFromPlayer.y * awayFromPlayer.y);\n        if (distance === 0) {\n            return { x: enemy.position.x + 500, y: enemy.position.y };\n        }\n        \n        awayFromPlayer.x /= distance;\n        awayFromPlayer.y /= distance;\n        \n        return {\n            x: enemy.position.x + awayFromPlayer.x * 800,\n            y: enemy.position.y + awayFromPlayer.y * 800\n        };\n    }\n\n    private calculateRetreatPoint(from: Vector2, away: Vector2): Vector2 {\n        const direction = {\n            x: from.x - away.x,\n            y: from.y - away.y\n        };\n        \n        const distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y);\n        if (distance === 0) return from;\n        \n        direction.x /= distance;\n        direction.y /= distance;\n        \n        return {\n            x: from.x + direction.x * 200,\n            y: from.y + direction.y * 200\n        };\n    }\n\n    private calculateEvasionPoint(enemy: EnemyShip): Vector2 {\n        // Move perpendicular to player direction\n        const toPlayer = {\n            x: this.playerPosition.x - enemy.position.x,\n            y: this.playerPosition.y - enemy.position.y\n        };\n        \n        const distance = Math.sqrt(toPlayer.x * toPlayer.x + toPlayer.y * toPlayer.y);\n        if (distance === 0) return enemy.position;\n        \n        // Perpendicular direction\n        const perpendicular = {\n            x: -toPlayer.y / distance,\n            y: toPlayer.x / distance\n        };\n        \n        // Random side\n        if (Math.random() < 0.5) {\n            perpendicular.x *= -1;\n            perpendicular.y *= -1;\n        }\n        \n        return {\n            x: enemy.position.x + perpendicular.x * 300,\n            y: enemy.position.y + perpendicular.y * 300\n        };\n    }\n\n    private predictPlayerPosition(seconds: number): Vector2 {\n        return {\n            x: this.playerPosition.x + this.playerVelocity.x * seconds,\n            y: this.playerPosition.y + this.playerVelocity.y * seconds\n        };\n    }\n\n    private hasLineOfSight(from: Vector2, to: Vector2): boolean {\n        // Simplified - assume always true for now\n        // In a real implementation, this would check for obstacles\n        return true;\n    }\n\n    private calculateDistance(pos1: Vector2, pos2: Vector2): number {\n        const dx = pos1.x - pos2.x;\n        const dy = pos1.y - pos2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    private lerpAngle(from: number, to: number, factor: number): number {\n        let diff = to - from;\n        \n        // Wrap difference to [-π, π]\n        while (diff > Math.PI) diff -= Math.PI * 2;\n        while (diff < -Math.PI) diff += Math.PI * 2;\n        \n        return from + diff * factor;\n    }\n\n    /**\n     * Render enemies\n     */\n    render(renderer: Renderer): void {\n        for (const enemy of this.enemies.values()) {\n            if (enemy.isAlive) {\n                this.renderEnemy(renderer, enemy);\n            }\n        }\n    }\n\n    /**\n     * Render individual enemy\n     */\n    private renderEnemy(renderer: Renderer, enemy: EnemyShip): void {\n        const pos = enemy.position;\n        const size = enemy.config.size;\n        \n        // Get ship color based on faction and class\n        const color = this.getShipColor(enemy.config.faction, enemy.config.shipClass);\n        \n        // Draw ship body\n        if (enemy.config.shipClass === ShipClass.Drone) {\n            // Small triangle for drones\n            const points = this.getTrianglePoints(pos, size * 0.5, enemy.rotation);\n            this.drawTriangle(renderer, points, color);\n        } else {\n            // Larger ships as rectangles with details\n            this.drawShip(renderer, pos, size, enemy.rotation, color);\n        }\n        \n        // Draw health bar\n        this.drawHealthBar(renderer, enemy);\n        \n        // Draw AI state indicator (debug)\n        if (enemy.state !== AIState.Idle) {\n            this.drawStateIndicator(renderer, enemy);\n        }\n    }\n\n    private getShipColor(faction: string, shipClass: ShipClass): Color {\n        const factionColors: { [key: string]: Color } = {\n            pirates: { r: 72, g: 24, b: 24 },     // Dark red\n            aliens: { r: 48, g: 24, b: 72 },      // Dark purple\n            rebels: { r: 24, g: 48, b: 24 },      // Dark green\n            corporation: { r: 48, g: 48, b: 32 }, // Dark yellow\n            military: { r: 32, g: 32, b: 48 }     // Dark blue\n        };\n        \n        return factionColors[faction] || { r: 48, g: 48, b: 48 };\n    }\n\n    private getTrianglePoints(center: Vector2, size: number, rotation: number): Vector2[] {\n        const cos = Math.cos(rotation);\n        const sin = Math.sin(rotation);\n        \n        return [\n            {\n                x: center.x + cos * size,\n                y: center.y + sin * size\n            },\n            {\n                x: center.x + cos * (-size * 0.5) - sin * (size * 0.5),\n                y: center.y + sin * (-size * 0.5) + cos * (size * 0.5)\n            },\n            {\n                x: center.x + cos * (-size * 0.5) - sin * (-size * 0.5),\n                y: center.y + sin * (-size * 0.5) + cos * (-size * 0.5)\n            }\n        ];\n    }\n\n    private drawTriangle(renderer: Renderer, points: Vector2[], color: Color): void {\n        // Draw triangle outline\n        for (let i = 0; i < points.length; i++) {\n            const next = (i + 1) % points.length;\n            renderer.drawLine(points[i].x, points[i].y, points[next].x, points[next].y, color);\n        }\n    }\n\n    private drawShip(renderer: Renderer, pos: Vector2, size: number, rotation: number, color: Color): void {\n        // Simple ship representation as oriented rectangle\n        const cos = Math.cos(rotation);\n        const sin = Math.sin(rotation);\n        \n        const halfWidth = size * 0.3;\n        const halfHeight = size * 0.6;\n        \n        const corners = [\n            { x: pos.x + cos * halfHeight - sin * halfWidth, y: pos.y + sin * halfHeight + cos * halfWidth },\n            { x: pos.x + cos * halfHeight - sin * (-halfWidth), y: pos.y + sin * halfHeight + cos * (-halfWidth) },\n            { x: pos.x + cos * (-halfHeight) - sin * (-halfWidth), y: pos.y + sin * (-halfHeight) + cos * (-halfWidth) },\n            { x: pos.x + cos * (-halfHeight) - sin * halfWidth, y: pos.y + sin * (-halfHeight) + cos * halfWidth }\n        ];\n        \n        // Draw ship outline\n        for (let i = 0; i < corners.length; i++) {\n            const next = (i + 1) % corners.length;\n            renderer.drawLine(corners[i].x, corners[i].y, corners[next].x, corners[next].y, color);\n        }\n        \n        // Draw front indicator\n        const frontX = pos.x + cos * halfHeight;\n        const frontY = pos.y + sin * halfHeight;\n        renderer.fillRect(frontX - 1, frontY - 1, 2, 2, color);\n    }\n\n    private drawHealthBar(renderer: Renderer, enemy: EnemyShip): void {\n        const pos = enemy.position;\n        const size = enemy.config.size;\n        \n        const barWidth = size * 1.2;\n        const barHeight = 3;\n        const barY = pos.y - size * 0.8;\n        \n        // Background\n        renderer.fillRect(pos.x - barWidth/2, barY, barWidth, barHeight, { r: 16, g: 16, b: 16 });\n        \n        // Health\n        const healthPercent = enemy.config.hull / enemy.config.maxHull;\n        const healthWidth = barWidth * healthPercent;\n        const healthColor = healthPercent > 0.6 ? \n            { r: 12, g: 36, b: 12 } : \n            healthPercent > 0.3 ? \n                { r: 72, g: 48, b: 12 } : \n                { r: 72, g: 24, b: 24 };\n        \n        renderer.fillRect(pos.x - barWidth/2, barY, healthWidth, barHeight, healthColor);\n        \n        // Shields (if any)\n        if (enemy.config.maxShields > 0) {\n            const shieldPercent = enemy.config.shields / enemy.config.maxShields;\n            const shieldWidth = barWidth * shieldPercent;\n            renderer.fillRect(pos.x - barWidth/2, barY - 5, shieldWidth, 2, { r: 16, g: 40, b: 32 });\n        }\n    }\n\n    private drawStateIndicator(renderer: Renderer, enemy: EnemyShip): void {\n        const pos = enemy.position;\n        const stateColors: { [key: string]: Color } = {\n            [AIState.Patrol]: { r: 32, g: 32, b: 32 },\n            [AIState.Pursue]: { r: 72, g: 48, b: 12 },\n            [AIState.Attack]: { r: 72, g: 24, b: 24 },\n            [AIState.Evade]: { r: 12, g: 36, b: 12 },\n            [AIState.Retreat]: { r: 48, g: 32, b: 72 },\n            [AIState.Ramming]: { r: 96, g: 32, b: 32 }\n        };\n        \n        const color = stateColors[enemy.state] || { r: 48, g: 48, b: 48 };\n        renderer.fillRect(pos.x - 3, pos.y + enemy.config.size + 5, 6, 6, color);\n    }\n\n    /**\n     * Get all enemies\n     */\n    getAllEnemies(): EnemyShip[] {\n        return Array.from(this.enemies.values()).filter(e => e.isAlive);\n    }\n\n    /**\n     * Get enemy by ID\n     */\n    getEnemy(enemyId: string): EnemyShip | null {\n        return this.enemies.get(enemyId) || null;\n    }\n\n    /**\n     * Get AI statistics\n     */\n    getStats(): {\n        totalEnemies: number;\n        aliveEnemies: number;\n        enemiesByFaction: { [faction: string]: number };\n        enemiesByState: { [state: string]: number };\n    } {\n        const enemiesByFaction: { [faction: string]: number } = {};\n        const enemiesByState: { [state: string]: number } = {};\n        \n        let aliveCount = 0;\n        \n        for (const enemy of this.enemies.values()) {\n            if (enemy.isAlive) {\n                aliveCount++;\n                enemiesByFaction[enemy.config.faction] = (enemiesByFaction[enemy.config.faction] || 0) + 1;\n                enemiesByState[enemy.state] = (enemiesByState[enemy.state] || 0) + 1;\n            }\n        }\n        \n        return {\n            totalEnemies: this.enemies.size,\n            aliveEnemies: aliveCount,\n            enemiesByFaction,\n            enemiesByState\n        };\n    }\n\n    /**\n     * Clear all enemies\n     */\n    clearEnemies(): void {\n        for (const [enemyId] of this.enemies.entries()) {\n            this.destroyEnemy(enemyId);\n        }\n        this.enemies.clear();\n    }\n}","/**\n * Combat Manager\n * Coordinates weapon systems, enemy AI, and combat encounters\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Vector2, Renderer } from '@core/Renderer';\nimport { WeaponSystem, WeaponConfig, WeaponType, DamageType, DamageResult } from './WeaponSystem';\nimport { EnemyAI, EnemyShipConfig, ShipClass, AIBehavior } from './EnemyAI';\nimport { GameItem, ItemDatabase } from '@items/ItemSystem';\nimport { InventoryManager } from '@inventory/InventoryManager';\n\nexport interface CombatEncounter {\n    id: string;\n    name: string;\n    difficulty: number; // 1-10\n    enemyConfigs: EnemyShipConfig[];\n    spawnPositions: Vector2[];\n    rewards: {\n        experience: number;\n        credits: number;\n        items: { itemId: string, quantity: number, dropRate: number }[];\n    };\n    isActive: boolean;\n    startTime: number;\n    completionTime?: number;\n}\n\nexport interface CombatStats {\n    totalDamageDealt: number;\n    totalDamageReceived: number;\n    enemiesDestroyed: number;\n    shotsHit: number;\n    shotsFired: number;\n    encountersCompleted: number;\n    experienceGained: number;\n}\n\nexport interface CombatEvents {\n    onEncounterStarted?: (encounter: CombatEncounter) => void;\n    onEncounterCompleted?: (encounter: CombatEncounter, success: boolean) => void;\n    onEnemyDestroyed?: (enemyId: string, rewards: { items: GameItem[], experience: number }) => void;\n    onPlayerDamaged?: (damage: number, damageType: DamageType) => void;\n    onCombatStatsUpdated?: (stats: CombatStats) => void;\n}\n\nexport class CombatManager {\n    private weaponSystem: WeaponSystem;\n    private enemyAI: EnemyAI;\n    private itemDatabase: ItemDatabase;\n    private inventory: InventoryManager;\n    \n    // Combat state\n    private activeEncounters: Map<string, CombatEncounter> = new Map();\n    private combatStats: CombatStats = {\n        totalDamageDealt: 0,\n        totalDamageReceived: 0,\n        enemiesDestroyed: 0,\n        shotsHit: 0,\n        shotsFired: 0,\n        encountersCompleted: 0,\n        experienceGained: 0\n    };\n    \n    // Player ship reference\n    private playerPosition: Vector2 = { x: 0, y: 0 };\n    private playerVelocity: Vector2 = { x: 0, y: 0 };\n    private playerSize: number = 20;\n    private playerHull: number = 100;\n    private playerMaxHull: number = 100;\n    \n    private events: CombatEvents;\n    private logger: Logger;\n\n    constructor(\n        itemDatabase: ItemDatabase,\n        inventory: InventoryManager,\n        events: CombatEvents = {}\n    ) {\n        this.logger = new Logger('CombatManager');\n        this.itemDatabase = itemDatabase;\n        this.inventory = inventory;\n        this.events = events;\n        \n        // Initialize weapon system\n        this.weaponSystem = new WeaponSystem({\n            onWeaponFired: (weapon, projectile) => {\n                this.combatStats.shotsFired++;\n                this.logger.debug(`🔫 ${weapon.name} fired`);\n            },\n            onProjectileHit: (projectile, result) => {\n                this.handleProjectileHit(projectile, result);\n            },\n            onWeaponOverheat: (weapon) => {\n                this.logger.warn(`🔥 ${weapon.name} overheated`);\n            }\n        });\n        \n        // Initialize enemy AI\n        this.enemyAI = new EnemyAI(this.weaponSystem, {\n            onEnemySpawned: (enemy) => {\n                this.logger.info(`🛸 Enemy spawned: ${enemy.config.name}`);\n            },\n            onEnemyDestroyed: (enemy) => {\n                this.handleEnemyDestroyed(enemy);\n            },\n            onEnemyDamaged: (enemy, damage) => {\n                this.logger.debug(`💥 ${enemy.config.name} took ${damage} damage`);\n            }\n        });\n        \n        this.initializePlayerWeapons();\n        \n        this.logger.info('⚔️ Combat manager initialized');\n    }\n\n    /**\n     * Initialize player weapons\n     */\n    private initializePlayerWeapons(): void {\n        // Add basic player weapons\n        const basicLaser: WeaponConfig = {\n            id: 'player_laser_1',\n            name: 'Basic Laser Cannon',\n            type: WeaponType.Energy,\n            damageType: DamageType.Energy,\n            stats: {\n                damage: 25,\n                range: 400,\n                fireRate: 3, // 3 shots per second\n                energyCost: 5,\n                accuracy: 0.9,\n                penetration: 0.1,\n                spread: 2, // 2 degrees\n                chargeTime: 0,\n                cooldownTime: 2\n            },\n            mountPoint: { x: 0, y: -10 },\n            hardpointSize: 'small'\n        };\n        \n        const basicProjectile: WeaponConfig = {\n            id: 'player_cannon_1',\n            name: 'Mass Driver',\n            type: WeaponType.Projectile,\n            damageType: DamageType.Kinetic,\n            stats: {\n                damage: 40,\n                range: 500,\n                fireRate: 2,\n                energyCost: 0,\n                accuracy: 0.8,\n                penetration: 0.3,\n                spread: 1,\n                chargeTime: 0,\n                cooldownTime: 1,\n                ammoCapacity: 100,\n                reloadTime: 3\n            },\n            mountPoint: { x: 0, y: 10 },\n            hardpointSize: 'small'\n        };\n        \n        this.weaponSystem.addWeapon(basicLaser);\n        this.weaponSystem.addWeapon(basicProjectile);\n        \n        this.logger.info('🔫 Player weapons initialized', {\n            laser: basicLaser.name,\n            cannon: basicProjectile.name\n        });\n    }\n\n    /**\n     * Handle projectile hit\n     */\n    private handleProjectileHit(projectile: any, result: DamageResult): void {\n        this.combatStats.shotsHit++;\n        \n        if (result.targetId === 'player') {\n            // Player took damage\n            this.playerHull = Math.max(0, this.playerHull - result.damage);\n            this.combatStats.totalDamageReceived += result.damage;\n            \n            this.events.onPlayerDamaged?.(result.damage, result.damageType);\n            \n            this.logger.info(`💥 Player hit for ${result.damage} ${result.damageType} damage`, {\n                critical: result.criticalHit,\n                penetrated: result.penetrated,\n                hullRemaining: this.playerHull\n            });\n        } else {\n            // Enemy took damage\n            const destroyed = this.enemyAI.applyDamage(result.targetId, result.damage, result.damageType);\n            this.combatStats.totalDamageDealt += result.damage;\n            \n            if (destroyed) {\n                this.combatStats.enemiesDestroyed++;\n            }\n        }\n        \n        this.events.onCombatStatsUpdated?.(this.combatStats);\n    }\n\n    /**\n     * Handle enemy destroyed\n     */\n    private handleEnemyDestroyed(enemy: any): void {\n        const rewards = this.calculateRewards(enemy.config);\n        \n        // Add items to inventory\n        rewards.items.forEach(item => {\n            this.inventory.addItem(item, 1);\n        });\n        \n        // Add experience\n        this.combatStats.experienceGained += rewards.experience;\n        \n        this.events.onEnemyDestroyed?.(enemy.config.id, rewards);\n        \n        // Check if any encounters are completed\n        this.checkEncounterCompletion();\n        \n        this.logger.info(`💰 Enemy destroyed rewards`, {\n            enemy: enemy.config.name,\n            items: rewards.items.length,\n            experience: rewards.experience\n        });\n    }\n\n    /**\n     * Calculate rewards for destroyed enemy\n     */\n    private calculateRewards(enemyConfig: any): { items: GameItem[], experience: number } {\n        const items: GameItem[] = [];\n        let experience = 0;\n        \n        // Base experience based on ship class\n        const baseExperience: { [key: string]: number } = {\n            [ShipClass.Drone]: 5,\n            [ShipClass.Fighter]: 15,\n            [ShipClass.Corvette]: 30,\n            [ShipClass.Frigate]: 50,\n            [ShipClass.Destroyer]: 100,\n            [ShipClass.Cruiser]: 200,\n            [ShipClass.Battleship]: 500\n        };\n        \n        experience = baseExperience[enemyConfig.shipClass] || 10;\n        \n        // Random item drops\n        const dropChance = 0.3; // 30% chance for item drop\n        if (Math.random() < dropChance) {\n            const randomItem = this.itemDatabase.generateRandomItem();\n            if (randomItem) {\n                items.push(randomItem);\n            }\n        }\n        \n        // Specific loot based on faction\n        const factionLoot: { [faction: string]: string[] } = {\n            pirates: ['metal_iron', 'gas_hydrogen'],\n            aliens: ['crystal_dilithium', 'energy_antimatter'],\n            military: ['comp_circuit', 'tool_repair_kit'],\n            corporation: ['crystal_quartz', 'comp_shield_emitter']\n        };\n        \n        const possibleLoot = factionLoot[enemyConfig.faction] || [];\n        if (possibleLoot.length > 0 && Math.random() < 0.4) {\n            const lootId = possibleLoot[Math.floor(Math.random() * possibleLoot.length)];\n            const lootItem = this.itemDatabase.getItem(lootId);\n            if (lootItem) {\n                items.push(lootItem);\n            }\n        }\n        \n        return { items, experience };\n    }\n\n    /**\n     * Start combat encounter\n     */\n    startEncounter(encounter: CombatEncounter): void {\n        encounter.isActive = true;\n        encounter.startTime = Date.now();\n        \n        // Spawn enemies\n        encounter.enemyConfigs.forEach((config, index) => {\n            const spawnPos = encounter.spawnPositions[index] || { x: 800, y: 400 };\n            this.enemyAI.spawnEnemy(config, spawnPos);\n        });\n        \n        this.activeEncounters.set(encounter.id, encounter);\n        this.events.onEncounterStarted?.(encounter);\n        \n        this.logger.info(`🚨 Combat encounter started: ${encounter.name}`, {\n            difficulty: encounter.difficulty,\n            enemies: encounter.enemyConfigs.length\n        });\n    }\n\n    /**\n     * Check if encounters are completed\n     */\n    private checkEncounterCompletion(): void {\n        for (const [encounterId, encounter] of this.activeEncounters.entries()) {\n            if (!encounter.isActive) continue;\n            \n            // Check if all enemies from this encounter are destroyed\n            const remainingEnemies = this.enemyAI.getAllEnemies()\n                .filter(enemy => encounter.enemyConfigs.some(config => config.id === enemy.config.id));\n            \n            if (remainingEnemies.length === 0) {\n                // Encounter completed\n                encounter.isActive = false;\n                encounter.completionTime = Date.now();\n                \n                this.combatStats.encountersCompleted++;\n                this.events.onEncounterCompleted?.(encounter, true);\n                \n                this.logger.info(`✅ Encounter completed: ${encounter.name}`, {\n                    duration: (encounter.completionTime - encounter.startTime) / 1000,\n                    rewards: encounter.rewards\n                });\n                \n                this.activeEncounters.delete(encounterId);\n            }\n        }\n    }\n\n    /**\n     * Generate predefined encounters\n     */\n    generateEncounters(): CombatEncounter[] {\n        const encounters: CombatEncounter[] = [];\n        \n        // Pirate patrol\n        encounters.push({\n            id: 'pirate_patrol_1',\n            name: 'Pirate Patrol',\n            difficulty: 2,\n            enemyConfigs: [\n                this.createEnemyConfig('pirate_fighter_1', 'Pirate Fighter', ShipClass.Fighter, 'pirates', AIBehavior.Aggressive),\n                this.createEnemyConfig('pirate_drone_1', 'Pirate Drone', ShipClass.Drone, 'pirates', AIBehavior.Kamikaze)\n            ],\n            spawnPositions: [\n                { x: 700, y: 300 },\n                { x: 750, y: 350 }\n            ],\n            rewards: {\n                experience: 50,\n                credits: 100,\n                items: [\n                    { itemId: 'metal_iron', quantity: 5, dropRate: 0.8 },\n                    { itemId: 'tool_repair_kit', quantity: 1, dropRate: 0.3 }\n                ]\n            },\n            isActive: false,\n            startTime: 0\n        });\n        \n        // Alien scout\n        encounters.push({\n            id: 'alien_scout_1',\n            name: 'Alien Scout',\n            difficulty: 4,\n            enemyConfigs: [\n                this.createEnemyConfig('alien_corvette_1', 'Alien Corvette', ShipClass.Corvette, 'aliens', AIBehavior.Evasive)\n            ],\n            spawnPositions: [\n                { x: 600, y: 200 }\n            ],\n            rewards: {\n                experience: 80,\n                credits: 200,\n                items: [\n                    { itemId: 'crystal_dilithium', quantity: 2, dropRate: 0.6 },\n                    { itemId: 'energy_antimatter', quantity: 1, dropRate: 0.2 }\n                ]\n            },\n            isActive: false,\n            startTime: 0\n        });\n        \n        // Corporate security\n        encounters.push({\n            id: 'corp_security_1',\n            name: 'Corporate Security',\n            difficulty: 3,\n            enemyConfigs: [\n                this.createEnemyConfig('corp_frigate_1', 'Corporate Frigate', ShipClass.Frigate, 'corporation', AIBehavior.Defensive),\n                this.createEnemyConfig('corp_fighter_1', 'Corporate Fighter', ShipClass.Fighter, 'corporation', AIBehavior.Support)\n            ],\n            spawnPositions: [\n                { x: 800, y: 400 },\n                { x: 750, y: 450 }\n            ],\n            rewards: {\n                experience: 120,\n                credits: 300,\n                items: [\n                    { itemId: 'comp_shield_emitter', quantity: 1, dropRate: 0.5 },\n                    { itemId: 'crystal_quartz', quantity: 3, dropRate: 0.7 }\n                ]\n            },\n            isActive: false,\n            startTime: 0\n        });\n        \n        return encounters;\n    }\n\n    /**\n     * Create enemy ship configuration\n     */\n    private createEnemyConfig(\n        id: string,\n        name: string,\n        shipClass: ShipClass,\n        faction: string,\n        behavior: AIBehavior\n    ): EnemyShipConfig {\n        // Base stats by ship class\n        const classStats: { [key: string]: any } = {\n            [ShipClass.Drone]: {\n                size: 8, maxSpeed: 200, hull: 20, weapons: [this.createBasicWeapon('drone_laser', WeaponType.Energy, 15)]\n            },\n            [ShipClass.Fighter]: {\n                size: 15, maxSpeed: 180, hull: 60, weapons: [this.createBasicWeapon('fighter_cannon', WeaponType.Projectile, 25)]\n            },\n            [ShipClass.Corvette]: {\n                size: 20, maxSpeed: 150, hull: 120, weapons: [\n                    this.createBasicWeapon('corvette_laser', WeaponType.Energy, 30),\n                    this.createBasicWeapon('corvette_missiles', WeaponType.Missile, 40)\n                ]\n            },\n            [ShipClass.Frigate]: {\n                size: 25, maxSpeed: 120, hull: 200, weapons: [\n                    this.createBasicWeapon('frigate_plasma', WeaponType.Plasma, 45),\n                    this.createBasicWeapon('frigate_cannon', WeaponType.Projectile, 35)\n                ]\n            }\n        };\n        \n        const stats = classStats[shipClass] || classStats[ShipClass.Fighter];\n        \n        return {\n            id,\n            name,\n            shipClass,\n            faction,\n            \n            size: stats.size,\n            mass: stats.size * 10,\n            maxSpeed: stats.maxSpeed,\n            acceleration: 0.8,\n            turnRate: 2.0,\n            \n            hull: stats.hull,\n            maxHull: stats.hull,\n            shields: shipClass === ShipClass.Drone ? 0 : stats.hull * 0.5,\n            maxShields: shipClass === ShipClass.Drone ? 0 : stats.hull * 0.5,\n            armor: Math.floor(stats.hull * 0.1),\n            \n            behavior,\n            aggression: behavior === AIBehavior.Aggressive ? 0.9 : 0.6,\n            intelligence: 0.7,\n            accuracy: 0.75,\n            reactionTime: 0.5,\n            \n            weapons: stats.weapons,\n            engagementRange: stats.size * 20,\n            preferredRange: stats.size * 15\n        };\n    }\n\n    /**\n     * Create basic weapon configuration\n     */\n    private createBasicWeapon(id: string, type: WeaponType, damage: number): WeaponConfig {\n        const baseStats = {\n            [WeaponType.Energy]: { range: 300, fireRate: 2.5, energyCost: 5 },\n            [WeaponType.Projectile]: { range: 400, fireRate: 2.0, energyCost: 0 },\n            [WeaponType.Missile]: { range: 500, fireRate: 0.5, energyCost: 15 },\n            [WeaponType.Plasma]: { range: 250, fireRate: 1.5, energyCost: 10 },\n            [WeaponType.Beam]: { range: 350, fireRate: 3.0, energyCost: 8 },\n            [WeaponType.Torpedo]: { range: 600, fireRate: 0.3, energyCost: 20 }\n        };\n        \n        const stats = baseStats[type] || baseStats[WeaponType.Energy];\n        \n        return {\n            id,\n            name: `${type} Weapon`,\n            type,\n            damageType: type === WeaponType.Energy ? DamageType.Energy : DamageType.Kinetic,\n            stats: {\n                damage,\n                range: stats.range,\n                fireRate: stats.fireRate,\n                energyCost: stats.energyCost,\n                accuracy: 0.8,\n                penetration: 0.2,\n                spread: 3,\n                chargeTime: 0,\n                cooldownTime: 1\n            },\n            mountPoint: { x: 0, y: 0 },\n            hardpointSize: 'small'\n        };\n    }\n\n    /**\n     * Update combat manager\n     */\n    update(deltaTime: number): void {\n        // Update weapon system\n        this.weaponSystem.update(deltaTime);\n        \n        // Update enemy AI with player position\n        this.enemyAI.updatePlayer(this.playerPosition, this.playerVelocity, this.playerSize);\n        this.enemyAI.update(deltaTime);\n        \n        // Check encounter completion\n        this.checkEncounterCompletion();\n    }\n\n    /**\n     * Update player information\n     */\n    updatePlayer(position: Vector2, velocity: Vector2, size: number, hull: number, maxHull: number): void {\n        this.playerPosition = { ...position };\n        this.playerVelocity = { ...velocity };\n        this.playerSize = size;\n        this.playerHull = hull;\n        this.playerMaxHull = maxHull;\n    }\n\n    /**\n     * Fire player weapon\n     */\n    firePlayerWeapon(weaponId: string, targetPosition?: Vector2): boolean {\n        return this.weaponSystem.fireWeapon(weaponId, this.playerPosition, targetPosition);\n    }\n\n    /**\n     * Render combat effects\n     */\n    render(renderer: Renderer): void {\n        // Render weapon effects (projectiles, etc.)\n        this.weaponSystem.render(renderer);\n        \n        // Render enemies\n        this.enemyAI.render(renderer);\n    }\n\n    /**\n     * Start random encounter\n     */\n    startRandomEncounter(): void {\n        const encounters = this.generateEncounters();\n        if (encounters.length > 0) {\n            const randomIndex = Math.floor(Math.random() * encounters.length);\n            this.startEncounter(encounters[randomIndex]);\n        }\n    }\n\n    /**\n     * Get combat statistics\n     */\n    getCombatStats(): CombatStats {\n        return { ...this.combatStats };\n    }\n\n    /**\n     * Get active encounters\n     */\n    getActiveEncounters(): CombatEncounter[] {\n        return Array.from(this.activeEncounters.values());\n    }\n\n    /**\n     * Get player weapons\n     */\n    getPlayerWeapons(): Array<{ weapon: WeaponConfig; state: any }> {\n        return this.weaponSystem.getAllWeapons().filter(w => w.weapon.id.startsWith('player_'));\n    }\n\n    /**\n     * Get all enemies\n     */\n    getEnemies(): any[] {\n        return this.enemyAI.getAllEnemies();\n    }\n\n    /**\n     * Clear all combat\n     */\n    clearCombat(): void {\n        this.weaponSystem.clearProjectiles();\n        this.enemyAI.clearEnemies();\n        this.activeEncounters.clear();\n        \n        this.logger.info('🧹 Combat cleared');\n    }\n\n    /**\n     * Reset combat stats\n     */\n    resetStats(): void {\n        this.combatStats = {\n            totalDamageDealt: 0,\n            totalDamageReceived: 0,\n            enemiesDestroyed: 0,\n            shotsHit: 0,\n            shotsFired: 0,\n            encountersCompleted: 0,\n            experienceGained: 0\n        };\n        \n        this.events.onCombatStatsUpdated?.(this.combatStats);\n    }\n}","/**\n * Player Progression System\n * Complete RPG progression with levels, skills, attributes, and achievements\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\n\nexport enum SkillCategory {\n    Combat = 'combat',\n    Piloting = 'piloting',\n    Engineering = 'engineering',\n    Science = 'science',\n    Trade = 'trade',\n    Exploration = 'exploration'\n}\n\nexport enum AttributeType {\n    Reflexes = 'reflexes',       // Combat speed, evasion\n    Intelligence = 'intelligence', // Research, hacking\n    Endurance = 'endurance',     // Hull points, fatigue resistance\n    Perception = 'perception',   // Detection, accuracy\n    Charisma = 'charisma',      // Trade, diplomacy\n    Technical = 'technical'      // Engineering, repair efficiency\n}\n\nexport interface Skill {\n    id: string;\n    name: string;\n    category: SkillCategory;\n    level: number;\n    experience: number;\n    maxLevel: number;\n    description: string;\n    prerequisite?: string; // Required skill ID\n    prerequisiteLevel?: number;\n    \n    // Effects\n    bonuses: SkillBonus[];\n}\n\nexport interface SkillBonus {\n    type: 'damage' | 'accuracy' | 'speed' | 'efficiency' | 'cost_reduction' | 'detection' | 'capacity';\n    value: number; // Percentage or flat bonus\n    description: string;\n}\n\nexport interface Attribute {\n    type: AttributeType;\n    value: number;\n    baseValue: number;\n    modifiers: AttributeModifier[];\n}\n\nexport interface AttributeModifier {\n    source: string;\n    value: number;\n    duration: number; // -1 for permanent\n    description: string;\n}\n\nexport interface Achievement {\n    id: string;\n    name: string;\n    description: string;\n    category: string;\n    requirements: AchievementRequirement[];\n    rewards: AchievementReward[];\n    unlocked: boolean;\n    unlockedDate?: number;\n    hidden: boolean; // Don't show until unlocked\n}\n\nexport interface AchievementRequirement {\n    type: 'kill_enemies' | 'travel_distance' | 'earn_credits' | 'discover_systems' | 'craft_items' | 'complete_missions';\n    target: number;\n    current: number;\n    data?: any; // Additional requirement data\n}\n\nexport interface AchievementReward {\n    type: 'experience' | 'credits' | 'skill_points' | 'attribute_points' | 'item';\n    value: number;\n    itemId?: string;\n}\n\nexport interface CharacterSheet {\n    // Basic info\n    name: string;\n    level: number;\n    experience: number;\n    experienceToNext: number;\n    \n    // Points\n    skillPoints: number;\n    attributePoints: number;\n    \n    // Statistics\n    totalPlayTime: number;\n    enemiesDefeated: number;\n    systemsExplored: number;\n    distanceTraveled: number;\n    creditsEarned: number;\n    itemsCrafted: number;\n    \n    // Skills and attributes\n    skills: Map<string, Skill>;\n    attributes: Map<AttributeType, Attribute>;\n    achievements: Map<string, Achievement>;\n}\n\nexport interface ProgressionEvents {\n    onLevelUp?: (newLevel: number, rewards: { skillPoints: number, attributePoints: number }) => void;\n    onSkillLevelUp?: (skill: Skill, newLevel: number) => void;\n    onAchievementUnlocked?: (achievement: Achievement) => void;\n    onAttributeChanged?: (attribute: AttributeType, oldValue: number, newValue: number) => void;\n}\n\nexport class PlayerProgression {\n    private character!: CharacterSheet;\n    private events: ProgressionEvents;\n    \n    // Experience tables\n    private levelExperienceTable: number[] = [];\n    private skillExperienceTable: number[] = [];\n    \n    private logger: Logger;\n\n    constructor(events: ProgressionEvents = {}) {\n        this.logger = new Logger('PlayerProgression');\n        this.events = events;\n        \n        this.generateExperienceTables();\n        this.initializeCharacter();\n        this.initializeSkills();\n        this.initializeAchievements();\n        \n        this.logger.info('🎭 Player progression system initialized');\n    }\n\n    /**\n     * Generate experience tables for levels and skills\n     */\n    private generateExperienceTables(): void {\n        // Level experience: exponential growth\n        for (let level = 1; level <= 100; level++) {\n            const baseXP = 100;\n            const multiplier = Math.pow(1.15, level - 1);\n            this.levelExperienceTable.push(Math.floor(baseXP * multiplier));\n        }\n        \n        // Skill experience: linear with slight exponential\n        for (let level = 1; level <= 50; level++) {\n            const baseXP = 50;\n            const multiplier = Math.pow(1.1, level - 1);\n            this.skillExperienceTable.push(Math.floor(baseXP * multiplier));\n        }\n    }\n\n    /**\n     * Initialize character with default values\n     */\n    private initializeCharacter(): void {\n        this.character = {\n            name: 'Captain',\n            level: 1,\n            experience: 0,\n            experienceToNext: this.levelExperienceTable[1],\n            \n            skillPoints: 5,\n            attributePoints: 10,\n            \n            totalPlayTime: 0,\n            enemiesDefeated: 0,\n            systemsExplored: 0,\n            distanceTraveled: 0,\n            creditsEarned: 0,\n            itemsCrafted: 0,\n            \n            skills: new Map(),\n            attributes: new Map(),\n            achievements: new Map()\n        };\n        \n        // Initialize attributes\n        for (const attrType of Object.values(AttributeType)) {\n            this.character.attributes.set(attrType, {\n                type: attrType,\n                value: 10,\n                baseValue: 10,\n                modifiers: []\n            });\n        }\n    }\n\n    /**\n     * Initialize skill tree\n     */\n    private initializeSkills(): void {\n        const skills: Skill[] = [\n            // Combat Skills\n            {\n                id: 'weapon_proficiency',\n                name: 'Weapon Proficiency',\n                category: SkillCategory.Combat,\n                level: 0,\n                experience: 0,\n                maxLevel: 25,\n                description: 'Increases weapon damage and accuracy',\n                bonuses: [\n                    { type: 'damage', value: 2, description: '+2% weapon damage per level' },\n                    { type: 'accuracy', value: 1, description: '+1% accuracy per level' }\n                ]\n            },\n            {\n                id: 'tactical_combat',\n                name: 'Tactical Combat',\n                category: SkillCategory.Combat,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Reduces weapon heat buildup and cooldowns',\n                prerequisite: 'weapon_proficiency',\n                prerequisiteLevel: 5,\n                bonuses: [\n                    { type: 'efficiency', value: 3, description: '+3% weapon efficiency per level' },\n                    { type: 'cost_reduction', value: 2, description: '-2% energy cost per level' }\n                ]\n            },\n            {\n                id: 'shield_mastery',\n                name: 'Shield Mastery',\n                category: SkillCategory.Combat,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Improves shield capacity and regeneration',\n                bonuses: [\n                    { type: 'capacity', value: 5, description: '+5% shield capacity per level' },\n                    { type: 'efficiency', value: 3, description: '+3% regeneration rate per level' }\n                ]\n            },\n            \n            // Piloting Skills\n            {\n                id: 'ship_handling',\n                name: 'Ship Handling',\n                category: SkillCategory.Piloting,\n                level: 0,\n                experience: 0,\n                maxLevel: 25,\n                description: 'Improves ship maneuverability and speed',\n                bonuses: [\n                    { type: 'speed', value: 2, description: '+2% ship speed per level' },\n                    { type: 'efficiency', value: 1, description: '+1% turn rate per level' }\n                ]\n            },\n            {\n                id: 'evasive_maneuvers',\n                name: 'Evasive Maneuvers',\n                category: SkillCategory.Piloting,\n                level: 0,\n                experience: 0,\n                maxLevel: 15,\n                description: 'Increases evasion chance and reduces incoming damage',\n                prerequisite: 'ship_handling',\n                prerequisiteLevel: 8,\n                bonuses: [\n                    { type: 'efficiency', value: 2, description: '+2% evasion chance per level' }\n                ]\n            },\n            {\n                id: 'warp_navigation',\n                name: 'Warp Navigation',\n                category: SkillCategory.Piloting,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Reduces warp energy costs and improves efficiency',\n                bonuses: [\n                    { type: 'cost_reduction', value: 3, description: '-3% warp energy cost per level' },\n                    { type: 'speed', value: 1, description: '+1% warp speed per level' }\n                ]\n            },\n            \n            // Engineering Skills\n            {\n                id: 'system_repair',\n                name: 'System Repair',\n                category: SkillCategory.Engineering,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Improves repair efficiency and reduces costs',\n                bonuses: [\n                    { type: 'efficiency', value: 4, description: '+4% repair efficiency per level' },\n                    { type: 'cost_reduction', value: 2, description: '-2% repair cost per level' }\n                ]\n            },\n            {\n                id: 'power_management',\n                name: 'Power Management',\n                category: SkillCategory.Engineering,\n                level: 0,\n                experience: 0,\n                maxLevel: 15,\n                description: 'Increases power capacity and efficiency',\n                bonuses: [\n                    { type: 'capacity', value: 3, description: '+3% power capacity per level' },\n                    { type: 'efficiency', value: 2, description: '+2% power efficiency per level' }\n                ]\n            },\n            {\n                id: 'advanced_crafting',\n                name: 'Advanced Crafting',\n                category: SkillCategory.Engineering,\n                level: 0,\n                experience: 0,\n                maxLevel: 25,\n                description: 'Increases crafting success rates and unlocks recipes',\n                prerequisite: 'system_repair',\n                prerequisiteLevel: 5,\n                bonuses: [\n                    { type: 'efficiency', value: 3, description: '+3% crafting success rate per level' }\n                ]\n            },\n            \n            // Science Skills\n            {\n                id: 'sensor_analysis',\n                name: 'Sensor Analysis',\n                category: SkillCategory.Science,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Improves scanning range and accuracy',\n                bonuses: [\n                    { type: 'detection', value: 5, description: '+5% scanning range per level' },\n                    { type: 'efficiency', value: 2, description: '+2% scan accuracy per level' }\n                ]\n            },\n            {\n                id: 'research_methodology',\n                name: 'Research Methodology',\n                category: SkillCategory.Science,\n                level: 0,\n                experience: 0,\n                maxLevel: 15,\n                description: 'Increases research speed and technology unlock rate',\n                bonuses: [\n                    { type: 'efficiency', value: 4, description: '+4% research speed per level' }\n                ]\n            },\n            \n            // Trade Skills\n            {\n                id: 'negotiation',\n                name: 'Negotiation',\n                category: SkillCategory.Trade,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Improves trade prices and contract rewards',\n                bonuses: [\n                    { type: 'efficiency', value: 2, description: '+2% trade profit per level' }\n                ]\n            },\n            {\n                id: 'market_analysis',\n                name: 'Market Analysis',\n                category: SkillCategory.Trade,\n                level: 0,\n                experience: 0,\n                maxLevel: 15,\n                description: 'Provides better market information and price predictions',\n                prerequisite: 'negotiation',\n                prerequisiteLevel: 5,\n                bonuses: [\n                    { type: 'detection', value: 3, description: '+3% market insight per level' }\n                ]\n            },\n            \n            // Exploration Skills\n            {\n                id: 'stellar_cartography',\n                name: 'Stellar Cartography',\n                category: SkillCategory.Exploration,\n                level: 0,\n                experience: 0,\n                maxLevel: 20,\n                description: 'Improves exploration rewards and discovery rates',\n                bonuses: [\n                    { type: 'efficiency', value: 3, description: '+3% discovery rate per level' },\n                    { type: 'detection', value: 2, description: '+2% exploration rewards per level' }\n                ]\n            },\n            {\n                id: 'xenobiology',\n                name: 'Xenobiology',\n                category: SkillCategory.Exploration,\n                level: 0,\n                experience: 0,\n                maxLevel: 15,\n                description: 'Increases rewards from biological discoveries',\n                prerequisite: 'stellar_cartography',\n                prerequisiteLevel: 8,\n                bonuses: [\n                    { type: 'efficiency', value: 5, description: '+5% biological research rewards per level' }\n                ]\n            }\n        ];\n        \n        skills.forEach(skill => {\n            this.character.skills.set(skill.id, skill);\n        });\n    }\n\n    /**\n     * Initialize achievements\n     */\n    private initializeAchievements(): void {\n        const achievements: Achievement[] = [\n            {\n                id: 'first_blood',\n                name: 'First Blood',\n                description: 'Destroy your first enemy ship',\n                category: 'Combat',\n                requirements: [\n                    { type: 'kill_enemies', target: 1, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 50 },\n                    { type: 'skill_points', value: 1 }\n                ],\n                unlocked: false,\n                hidden: false\n            },\n            {\n                id: 'ace_pilot',\n                name: 'Ace Pilot',\n                description: 'Destroy 50 enemy ships',\n                category: 'Combat',\n                requirements: [\n                    { type: 'kill_enemies', target: 50, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 500 },\n                    { type: 'skill_points', value: 3 }\n                ],\n                unlocked: false,\n                hidden: false\n            },\n            {\n                id: 'explorer',\n                name: 'Explorer',\n                description: 'Discover 10 star systems',\n                category: 'Exploration',\n                requirements: [\n                    { type: 'discover_systems', target: 10, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 200 },\n                    { type: 'attribute_points', value: 2 }\n                ],\n                unlocked: false,\n                hidden: false\n            },\n            {\n                id: 'master_craftsman',\n                name: 'Master Craftsman',\n                description: 'Craft 100 items',\n                category: 'Engineering',\n                requirements: [\n                    { type: 'craft_items', target: 100, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 300 },\n                    { type: 'skill_points', value: 2 }\n                ],\n                unlocked: false,\n                hidden: false\n            },\n            {\n                id: 'millionaire',\n                name: 'Millionaire',\n                description: 'Earn 1,000,000 credits',\n                category: 'Trade',\n                requirements: [\n                    { type: 'earn_credits', target: 1000000, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 1000 },\n                    { type: 'attribute_points', value: 5 }\n                ],\n                unlocked: false,\n                hidden: false\n            },\n            {\n                id: 'long_journey',\n                name: 'Long Journey',\n                description: 'Travel 100,000 kilometers',\n                category: 'Exploration',\n                requirements: [\n                    { type: 'travel_distance', target: 100000, current: 0 }\n                ],\n                rewards: [\n                    { type: 'experience', value: 250 },\n                    { type: 'skill_points', value: 1 }\n                ],\n                unlocked: false,\n                hidden: false\n            }\n        ];\n        \n        achievements.forEach(achievement => {\n            this.character.achievements.set(achievement.id, achievement);\n        });\n    }\n\n    /**\n     * Add experience to character\n     */\n    addExperience(amount: number): void {\n        this.character.experience += amount;\n        \n        // Check for level ups\n        while (this.character.experience >= this.character.experienceToNext) {\n            this.levelUp();\n        }\n        \n        this.logger.debug(`+${amount} XP (Total: ${this.character.experience})`);\n    }\n\n    /**\n     * Level up character\n     */\n    private levelUp(): void {\n        this.character.level++;\n        this.character.experience -= this.character.experienceToNext;\n        \n        // Calculate next level requirement\n        if (this.character.level < this.levelExperienceTable.length) {\n            this.character.experienceToNext = this.levelExperienceTable[this.character.level];\n        } else {\n            this.character.experienceToNext = this.levelExperienceTable[this.levelExperienceTable.length - 1];\n        }\n        \n        // Level rewards\n        const skillPointsGained = this.character.level % 2 === 0 ? 2 : 1; // 2 every even level, 1 every odd\n        const attributePointsGained = this.character.level % 5 === 0 ? 2 : 0; // 2 every 5 levels\n        \n        this.character.skillPoints += skillPointsGained;\n        this.character.attributePoints += attributePointsGained;\n        \n        this.events.onLevelUp?.(this.character.level, {\n            skillPoints: skillPointsGained,\n            attributePoints: attributePointsGained\n        });\n        \n        this.logger.info(`🎉 Level Up! Now level ${this.character.level}`, {\n            skillPoints: skillPointsGained,\n            attributePoints: attributePointsGained\n        });\n    }\n\n    /**\n     * Add skill experience\n     */\n    addSkillExperience(skillId: string, amount: number): void {\n        const skill = this.character.skills.get(skillId);\n        if (!skill || skill.level >= skill.maxLevel) return;\n        \n        skill.experience += amount;\n        \n        // Check for skill level up\n        const requiredXP = this.skillExperienceTable[skill.level] || this.skillExperienceTable[this.skillExperienceTable.length - 1];\n        \n        if (skill.experience >= requiredXP) {\n            skill.level++;\n            skill.experience -= requiredXP;\n            \n            this.events.onSkillLevelUp?.(skill, skill.level);\n            \n            this.logger.info(`📈 Skill Level Up: ${skill.name} → ${skill.level}`);\n        }\n    }\n\n    /**\n     * Spend skill points to level up a skill\n     */\n    levelUpSkill(skillId: string): boolean {\n        const skill = this.character.skills.get(skillId);\n        if (!skill || skill.level >= skill.maxLevel) return false;\n        \n        // Check prerequisites\n        if (skill.prerequisite) {\n            const prereqSkill = this.character.skills.get(skill.prerequisite);\n            if (!prereqSkill || prereqSkill.level < (skill.prerequisiteLevel || 1)) {\n                this.logger.warn(`Prerequisite not met: ${skill.prerequisite} level ${skill.prerequisiteLevel}`);\n                return false;\n            }\n        }\n        \n        // Check skill points\n        const cost = Math.max(1, Math.floor(skill.level / 5) + 1); // Increasing cost\n        if (this.character.skillPoints < cost) {\n            this.logger.warn(`Not enough skill points: need ${cost}, have ${this.character.skillPoints}`);\n            return false;\n        }\n        \n        // Level up skill\n        this.character.skillPoints -= cost;\n        skill.level++;\n        \n        this.events.onSkillLevelUp?.(skill, skill.level);\n        \n        this.logger.info(`💫 Manual skill upgrade: ${skill.name} → ${skill.level} (Cost: ${cost} SP)`);\n        \n        return true;\n    }\n\n    /**\n     * Increase attribute\n     */\n    increaseAttribute(type: AttributeType, amount: number = 1): boolean {\n        const cost = amount * 2; // 2 attribute points per increase\n        if (this.character.attributePoints < cost) {\n            this.logger.warn(`Not enough attribute points: need ${cost}, have ${this.character.attributePoints}`);\n            return false;\n        }\n        \n        const attribute = this.character.attributes.get(type);\n        if (!attribute) return false;\n        \n        const oldValue = attribute.value;\n        attribute.baseValue += amount;\n        this.recalculateAttribute(type);\n        \n        this.character.attributePoints -= cost;\n        \n        this.events.onAttributeChanged?.(type, oldValue, attribute.value);\n        \n        this.logger.info(`⚡ Attribute increased: ${type} → ${attribute.value} (Cost: ${cost} AP)`);\n        \n        return true;\n    }\n\n    /**\n     * Add temporary attribute modifier\n     */\n    addAttributeModifier(type: AttributeType, modifier: AttributeModifier): void {\n        const attribute = this.character.attributes.get(type);\n        if (!attribute) return;\n        \n        attribute.modifiers.push(modifier);\n        this.recalculateAttribute(type);\n        \n        this.logger.debug(`Applied modifier to ${type}: ${modifier.value} from ${modifier.source}`);\n    }\n\n    /**\n     * Remove attribute modifier\n     */\n    removeAttributeModifier(type: AttributeType, source: string): void {\n        const attribute = this.character.attributes.get(type);\n        if (!attribute) return;\n        \n        attribute.modifiers = attribute.modifiers.filter(mod => mod.source !== source);\n        this.recalculateAttribute(type);\n        \n        this.logger.debug(`Removed modifier from ${type}: ${source}`);\n    }\n\n    /**\n     * Recalculate attribute value with modifiers\n     */\n    private recalculateAttribute(type: AttributeType): void {\n        const attribute = this.character.attributes.get(type);\n        if (!attribute) return;\n        \n        const oldValue = attribute.value;\n        attribute.value = attribute.baseValue;\n        \n        // Apply modifiers\n        attribute.modifiers.forEach(mod => {\n            attribute.value += mod.value;\n        });\n        \n        // Minimum value of 1\n        attribute.value = Math.max(1, attribute.value);\n        \n        if (oldValue !== attribute.value) {\n            this.events.onAttributeChanged?.(type, oldValue, attribute.value);\n        }\n    }\n\n    /**\n     * Update achievement progress\n     */\n    updateAchievementProgress(type: string, amount: number, data?: any): void {\n        for (const achievement of this.character.achievements.values()) {\n            if (achievement.unlocked) continue;\n            \n            for (const req of achievement.requirements) {\n                if (req.type === type) {\n                    req.current = Math.min(req.target, req.current + amount);\n                    \n                    // Check if achievement is completed\n                    if (this.isAchievementCompleted(achievement)) {\n                        this.unlockAchievement(achievement.id);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if achievement is completed\n     */\n    private isAchievementCompleted(achievement: Achievement): boolean {\n        return achievement.requirements.every(req => req.current >= req.target);\n    }\n\n    /**\n     * Unlock achievement\n     */\n    private unlockAchievement(achievementId: string): void {\n        const achievement = this.character.achievements.get(achievementId);\n        if (!achievement || achievement.unlocked) return;\n        \n        achievement.unlocked = true;\n        achievement.unlockedDate = Date.now();\n        \n        // Apply rewards\n        achievement.rewards.forEach(reward => {\n            switch (reward.type) {\n                case 'experience':\n                    this.addExperience(reward.value);\n                    break;\n                case 'skill_points':\n                    this.character.skillPoints += reward.value;\n                    break;\n                case 'attribute_points':\n                    this.character.attributePoints += reward.value;\n                    break;\n                case 'credits':\n                    this.character.creditsEarned += reward.value;\n                    break;\n            }\n        });\n        \n        this.events.onAchievementUnlocked?.(achievement);\n        \n        this.logger.info(`🏆 Achievement Unlocked: ${achievement.name}`, {\n            rewards: achievement.rewards\n        });\n    }\n\n    /**\n     * Update character statistics\n     */\n    updateStatistics(stats: {\n        playTime?: number;\n        enemiesDefeated?: number;\n        systemsExplored?: number;\n        distanceTraveled?: number;\n        creditsEarned?: number;\n        itemsCrafted?: number;\n    }): void {\n        if (stats.playTime) this.character.totalPlayTime += stats.playTime;\n        if (stats.enemiesDefeated) {\n            this.character.enemiesDefeated += stats.enemiesDefeated;\n            this.updateAchievementProgress('kill_enemies', stats.enemiesDefeated);\n        }\n        if (stats.systemsExplored) {\n            this.character.systemsExplored += stats.systemsExplored;\n            this.updateAchievementProgress('discover_systems', stats.systemsExplored);\n        }\n        if (stats.distanceTraveled) {\n            this.character.distanceTraveled += stats.distanceTraveled;\n            this.updateAchievementProgress('travel_distance', stats.distanceTraveled);\n        }\n        if (stats.creditsEarned) {\n            this.character.creditsEarned += stats.creditsEarned;\n            this.updateAchievementProgress('earn_credits', stats.creditsEarned);\n        }\n        if (stats.itemsCrafted) {\n            this.character.itemsCrafted += stats.itemsCrafted;\n            this.updateAchievementProgress('craft_items', stats.itemsCrafted);\n        }\n    }\n\n    /**\n     * Get skill bonus value\n     */\n    getSkillBonus(skillId: string, bonusType: string): number {\n        const skill = this.character.skills.get(skillId);\n        if (!skill) return 0;\n        \n        const bonus = skill.bonuses.find(b => b.type === bonusType);\n        if (!bonus) return 0;\n        \n        return bonus.value * skill.level;\n    }\n\n    /**\n     * Get total bonus from all skills of a category\n     */\n    getCategoryBonus(category: SkillCategory, bonusType: string): number {\n        let total = 0;\n        \n        for (const skill of this.character.skills.values()) {\n            if (skill.category === category) {\n                total += this.getSkillBonus(skill.id, bonusType);\n            }\n        }\n        \n        return total;\n    }\n\n    /**\n     * Get attribute value\n     */\n    getAttributeValue(type: AttributeType): number {\n        const attribute = this.character.attributes.get(type);\n        return attribute ? attribute.value : 10;\n    }\n\n    /**\n     * Get character sheet\n     */\n    getCharacterSheet(): CharacterSheet {\n        return { ...this.character };\n    }\n\n    /**\n     * Get available skills for leveling\n     */\n    getAvailableSkills(): Skill[] {\n        return Array.from(this.character.skills.values()).filter(skill => {\n            if (skill.level >= skill.maxLevel) return false;\n            \n            // Check prerequisites\n            if (skill.prerequisite) {\n                const prereqSkill = this.character.skills.get(skill.prerequisite);\n                if (!prereqSkill || prereqSkill.level < (skill.prerequisiteLevel || 1)) {\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    }\n\n    /**\n     * Get unlocked achievements\n     */\n    getUnlockedAchievements(): Achievement[] {\n        return Array.from(this.character.achievements.values()).filter(a => a.unlocked);\n    }\n\n    /**\n     * Get achievement progress\n     */\n    getAchievementProgress(): Achievement[] {\n        return Array.from(this.character.achievements.values()).filter(a => !a.unlocked && !a.hidden);\n    }\n\n    /**\n     * Save character data\n     */\n    saveCharacter(): any {\n        return {\n            character: {\n                ...this.character,\n                skills: Array.from(this.character.skills.entries()),\n                attributes: Array.from(this.character.attributes.entries()),\n                achievements: Array.from(this.character.achievements.entries())\n            }\n        };\n    }\n\n    /**\n     * Load character data\n     */\n    loadCharacter(data: any): void {\n        if (data.character) {\n            this.character = {\n                ...data.character,\n                skills: new Map(data.character.skills),\n                attributes: new Map(data.character.attributes),\n                achievements: new Map(data.character.achievements)\n            };\n            \n            this.logger.info('📜 Character data loaded', {\n                level: this.character.level,\n                experience: this.character.experience\n            });\n        }\n    }\n\n    /**\n     * Get progression statistics\n     */\n    getProgressionStats(): {\n        totalSkillLevels: number;\n        highestSkillLevel: number;\n        totalAttributePoints: number;\n        achievementsUnlocked: number;\n        totalAchievements: number;\n        progressionPercentage: number;\n    } {\n        const totalSkillLevels = Array.from(this.character.skills.values())\n            .reduce((sum, skill) => sum + skill.level, 0);\n        \n        const highestSkillLevel = Math.max(...Array.from(this.character.skills.values())\n            .map(skill => skill.level));\n        \n        const totalAttributePoints = Array.from(this.character.attributes.values())\n            .reduce((sum, attr) => sum + attr.baseValue, 0);\n        \n        const achievementsUnlocked = Array.from(this.character.achievements.values())\n            .filter(a => a.unlocked).length;\n        \n        const totalAchievements = this.character.achievements.size;\n        \n        const maxSkillLevels = Array.from(this.character.skills.values())\n            .reduce((sum, skill) => sum + skill.maxLevel, 0);\n        \n        const progressionPercentage = Math.min(100, \n            (this.character.level / 50) * 30 + \n            (totalSkillLevels / maxSkillLevels) * 40 + \n            (achievementsUnlocked / totalAchievements) * 30\n        );\n        \n        return {\n            totalSkillLevels,\n            highestSkillLevel,\n            totalAttributePoints,\n            achievementsUnlocked,\n            totalAchievements,\n            progressionPercentage\n        };\n    }\n}","/**\n * Research & Technology System\n * Advanced research tree with technological progression and discoveries\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\nimport { GameItem } from '@items/ItemSystem';\n\nexport enum ResearchField {\n    Physics = 'physics',\n    Engineering = 'engineering',\n    Biology = 'biology',\n    Computing = 'computing',\n    Military = 'military',\n    Exploration = 'exploration'\n}\n\nexport enum TechnologyTier {\n    Basic = 1,\n    Advanced = 2,\n    Expert = 3,\n    Master = 4,\n    Legendary = 5\n}\n\nexport interface Technology {\n    id: string;\n    name: string;\n    description: string;\n    field: ResearchField;\n    tier: TechnologyTier;\n    \n    // Research requirements\n    researchCost: number;\n    researchTime: number; // Base time in seconds\n    prerequisites: string[]; // Required technology IDs\n    \n    // Research resources\n    requiredItems: { itemId: string, quantity: number }[];\n    requiredFacilities: string[];\n    \n    // Unlocks\n    unlocks: TechnologyUnlock[];\n    \n    // Progress\n    isUnlocked: boolean;\n    isResearching: boolean;\n    researchProgress: number;\n    researchStartTime: number;\n    completedTime?: number;\n}\n\nexport interface TechnologyUnlock {\n    type: 'ship_component' | 'weapon' | 'facility' | 'ability' | 'recipe' | 'upgrade';\n    target: string;\n    value?: number;\n    description: string;\n}\n\nexport interface ResearchProject {\n    id: string;\n    technologyId: string;\n    facilityId: string;\n    assignedScientists: string[];\n    startTime: number;\n    estimatedCompletion: number;\n    efficiency: number; // 0-1 multiplier\n    status: 'active' | 'paused' | 'completed' | 'failed';\n}\n\nexport interface ResearchFacility {\n    id: string;\n    name: string;\n    type: 'laboratory' | 'observatory' | 'workshop' | 'computer_core' | 'testing_chamber';\n    efficiency: number; // Research speed multiplier\n    specialization: ResearchField[];\n    maxProjects: number;\n    \n    // Current state\n    isOperational: boolean;\n    currentProjects: string[];\n    maintenanceLevel: number; // 0-1\n    upgradeLevel: number;\n}\n\nexport interface Scientist {\n    id: string;\n    name: string;\n    expertise: ResearchField;\n    skill: number; // 1-10\n    efficiency: number; // Research speed bonus\n    \n    // Current assignment\n    assignedProject?: string;\n    assignedFacility?: string;\n    \n    // Status\n    isAvailable: boolean;\n    fatigue: number; // 0-1, affects efficiency\n    morale: number; // 0-1, affects efficiency\n}\n\nexport interface ResearchEvents {\n    onTechnologyUnlocked?: (technology: Technology) => void;\n    onResearchCompleted?: (project: ResearchProject) => void;\n    onDiscoveryMade?: (discovery: Discovery) => void;\n    onBreakthroughAchieved?: (field: ResearchField, tier: TechnologyTier) => void;\n}\n\nexport interface Discovery {\n    id: string;\n    name: string;\n    description: string;\n    field: ResearchField;\n    rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n    discoveryTime: number;\n    \n    // Effects\n    researchBonus?: { field: ResearchField, bonus: number };\n    unlocksTechnology?: string;\n    grantsResources?: { itemId: string, quantity: number }[];\n}\n\nexport class ResearchSystem {\n    private technologies: Map<string, Technology> = new Map();\n    private projects: Map<string, ResearchProject> = new Map();\n    private facilities: Map<string, ResearchFacility> = new Map();\n    private scientists: Map<string, Scientist> = new Map();\n    private discoveries: Discovery[] = [];\n    \n    // Research state\n    private totalResearchPoints: number = 0;\n    private researchMultipliers: Map<ResearchField, number> = new Map();\n    \n    private events: ResearchEvents;\n    private logger: Logger;\n\n    constructor(events: ResearchEvents = {}) {\n        this.logger = new Logger('ResearchSystem');\n        this.events = events;\n        \n        this.initializeResearchMultipliers();\n        this.initializeTechnologies();\n        this.initializeFacilities();\n        this.initializeScientists();\n        \n        this.logger.info('🔬 Research system initialized');\n    }\n\n    /**\n     * Initialize research field multipliers\n     */\n    private initializeResearchMultipliers(): void {\n        Object.values(ResearchField).forEach(field => {\n            this.researchMultipliers.set(field, 1.0);\n        });\n    }\n\n    /**\n     * Initialize technology tree\n     */\n    private initializeTechnologies(): void {\n        const technologies: Technology[] = [\n            // Tier 1 - Basic Technologies\n            {\n                id: 'basic_sensors',\n                name: 'Enhanced Sensors',\n                description: 'Improved sensor arrays for better detection range',\n                field: ResearchField.Engineering,\n                tier: TechnologyTier.Basic,\n                researchCost: 100,\n                researchTime: 300, // 5 minutes\n                prerequisites: [],\n                requiredItems: [\n                    { itemId: 'comp_circuit', quantity: 5 },\n                    { itemId: 'crystal_quartz', quantity: 3 }\n                ],\n                requiredFacilities: ['basic_lab'],\n                unlocks: [\n                    { type: 'ship_component', target: 'advanced_sensors', description: 'Unlocks Advanced Sensor Array' },\n                    { type: 'ability', target: 'long_range_scan', description: 'Enables long-range scanning' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            {\n                id: 'improved_hull',\n                name: 'Improved Hull Design',\n                description: 'Stronger hull materials and construction techniques',\n                field: ResearchField.Engineering,\n                tier: TechnologyTier.Basic,\n                researchCost: 150,\n                researchTime: 450,\n                prerequisites: [],\n                requiredItems: [\n                    { itemId: 'metal_iron', quantity: 10 },\n                    { itemId: 'metal_titanium', quantity: 5 }\n                ],\n                requiredFacilities: ['workshop'],\n                unlocks: [\n                    { type: 'upgrade', target: 'hull_strength', value: 25, description: '+25% hull strength' },\n                    { type: 'ship_component', target: 'reinforced_hull', description: 'Unlocks Reinforced Hull Plating' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            {\n                id: 'energy_weapons',\n                name: 'Energy Weapon Technology',\n                description: 'Basic laser and plasma weapon systems',\n                field: ResearchField.Military,\n                tier: TechnologyTier.Basic,\n                researchCost: 200,\n                researchTime: 600,\n                prerequisites: [],\n                requiredItems: [\n                    { itemId: 'energy_antimatter', quantity: 2 },\n                    { itemId: 'comp_circuit', quantity: 8 }\n                ],\n                requiredFacilities: ['basic_lab', 'workshop'],\n                unlocks: [\n                    { type: 'weapon', target: 'plasma_cannon', description: 'Unlocks Plasma Cannon' },\n                    { type: 'upgrade', target: 'energy_efficiency', value: 15, description: '+15% energy weapon efficiency' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            \n            // Tier 2 - Advanced Technologies\n            {\n                id: 'quantum_computing',\n                name: 'Quantum Computing',\n                description: 'Advanced quantum processors for complex calculations',\n                field: ResearchField.Computing,\n                tier: TechnologyTier.Advanced,\n                researchCost: 500,\n                researchTime: 1200,\n                prerequisites: ['basic_sensors'],\n                requiredItems: [\n                    { itemId: 'crystal_dilithium', quantity: 3 },\n                    { itemId: 'comp_quantum_processor', quantity: 1 }\n                ],\n                requiredFacilities: ['computer_core'],\n                unlocks: [\n                    { type: 'facility', target: 'quantum_lab', description: 'Unlocks Quantum Research Lab' },\n                    { type: 'upgrade', target: 'research_speed', value: 30, description: '+30% research speed' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            {\n                id: 'shield_technology',\n                name: 'Advanced Shielding',\n                description: 'Improved shield generators and energy distribution',\n                field: ResearchField.Physics,\n                tier: TechnologyTier.Advanced,\n                researchCost: 400,\n                researchTime: 900,\n                prerequisites: ['improved_hull', 'energy_weapons'],\n                requiredItems: [\n                    { itemId: 'comp_shield_emitter', quantity: 3 },\n                    { itemId: 'energy_antimatter', quantity: 5 }\n                ],\n                requiredFacilities: ['testing_chamber'],\n                unlocks: [\n                    { type: 'ship_component', target: 'adaptive_shields', description: 'Unlocks Adaptive Shield Matrix' },\n                    { type: 'upgrade', target: 'shield_capacity', value: 40, description: '+40% shield capacity' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            {\n                id: 'warp_optimization',\n                name: 'Warp Drive Optimization',\n                description: 'Improved warp field stability and efficiency',\n                field: ResearchField.Physics,\n                tier: TechnologyTier.Advanced,\n                researchCost: 600,\n                researchTime: 1500,\n                prerequisites: ['quantum_computing'],\n                requiredItems: [\n                    { itemId: 'crystal_dilithium', quantity: 8 },\n                    { itemId: 'comp_warp_coil', quantity: 2 }\n                ],\n                requiredFacilities: ['observatory'],\n                unlocks: [\n                    { type: 'upgrade', target: 'warp_efficiency', value: 25, description: '+25% warp efficiency' },\n                    { type: 'ability', target: 'emergency_warp', description: 'Enables emergency warp escape' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            \n            // Tier 3 - Expert Technologies\n            {\n                id: 'artificial_intelligence',\n                name: 'Artificial Intelligence',\n                description: 'Advanced AI systems for ship automation',\n                field: ResearchField.Computing,\n                tier: TechnologyTier.Expert,\n                researchCost: 1000,\n                researchTime: 2400,\n                prerequisites: ['quantum_computing', 'shield_technology'],\n                requiredItems: [\n                    { itemId: 'comp_ai_core', quantity: 1 },\n                    { itemId: 'crystal_dilithium', quantity: 10 }\n                ],\n                requiredFacilities: ['quantum_lab'],\n                unlocks: [\n                    { type: 'ship_component', target: 'ai_assistant', description: 'Unlocks AI Ship Assistant' },\n                    { type: 'upgrade', target: 'automation_efficiency', value: 50, description: '+50% system automation' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            {\n                id: 'exotic_matter',\n                name: 'Exotic Matter Research',\n                description: 'Studies of exotic matter and its applications',\n                field: ResearchField.Physics,\n                tier: TechnologyTier.Expert,\n                researchCost: 1200,\n                researchTime: 3000,\n                prerequisites: ['warp_optimization'],\n                requiredItems: [\n                    { itemId: 'exotic_dark_matter', quantity: 3 },\n                    { itemId: 'comp_containment_field', quantity: 2 }\n                ],\n                requiredFacilities: ['testing_chamber', 'quantum_lab'],\n                unlocks: [\n                    { type: 'weapon', target: 'exotic_weapons', description: 'Unlocks Exotic Matter Weapons' },\n                    { type: 'ability', target: 'phase_shift', description: 'Enables temporary phase shifting' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            \n            // Tier 4 - Master Technologies\n            {\n                id: 'consciousness_transfer',\n                name: 'Consciousness Transfer',\n                description: 'Technology to transfer consciousness between vessels',\n                field: ResearchField.Biology,\n                tier: TechnologyTier.Master,\n                researchCost: 2000,\n                researchTime: 4800,\n                prerequisites: ['artificial_intelligence', 'exotic_matter'],\n                requiredItems: [\n                    { itemId: 'bio_neural_matrix', quantity: 1 },\n                    { itemId: 'comp_ai_core', quantity: 3 }\n                ],\n                requiredFacilities: ['quantum_lab', 'bio_lab'],\n                unlocks: [\n                    { type: 'ability', target: 'backup_consciousness', description: 'Enables consciousness backup' },\n                    { type: 'ship_component', target: 'neural_interface', description: 'Direct neural ship control' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            },\n            \n            // Tier 5 - Legendary Technologies\n            {\n                id: 'reality_manipulation',\n                name: 'Reality Manipulation',\n                description: 'Ultimate technology to alter space-time itself',\n                field: ResearchField.Physics,\n                tier: TechnologyTier.Legendary,\n                researchCost: 5000,\n                researchTime: 10000,\n                prerequisites: ['consciousness_transfer'],\n                requiredItems: [\n                    { itemId: 'artifact_singularity_core', quantity: 1 },\n                    { itemId: 'exotic_temporal_crystal', quantity: 5 }\n                ],\n                requiredFacilities: ['quantum_lab', 'testing_chamber', 'observatory'],\n                unlocks: [\n                    { type: 'ability', target: 'time_dilation', description: 'Manipulate local time flow' },\n                    { type: 'ability', target: 'space_folding', description: 'Fold space for instant travel' }\n                ],\n                isUnlocked: false,\n                isResearching: false,\n                researchProgress: 0,\n                researchStartTime: 0\n            }\n        ];\n        \n        technologies.forEach(tech => {\n            this.technologies.set(tech.id, tech);\n        });\n    }\n\n    /**\n     * Initialize research facilities\n     */\n    private initializeFacilities(): void {\n        const facilities: ResearchFacility[] = [\n            {\n                id: 'basic_lab',\n                name: 'Basic Laboratory',\n                type: 'laboratory',\n                efficiency: 1.0,\n                specialization: [ResearchField.Engineering, ResearchField.Computing],\n                maxProjects: 1,\n                isOperational: true,\n                currentProjects: [],\n                maintenanceLevel: 1.0,\n                upgradeLevel: 1\n            },\n            {\n                id: 'workshop',\n                name: 'Engineering Workshop',\n                type: 'workshop',\n                efficiency: 1.2,\n                specialization: [ResearchField.Engineering, ResearchField.Military],\n                maxProjects: 2,\n                isOperational: true,\n                currentProjects: [],\n                maintenanceLevel: 1.0,\n                upgradeLevel: 1\n            },\n            {\n                id: 'computer_core',\n                name: 'Computer Core',\n                type: 'computer_core',\n                efficiency: 1.5,\n                specialization: [ResearchField.Computing],\n                maxProjects: 1,\n                isOperational: true,\n                currentProjects: [],\n                maintenanceLevel: 1.0,\n                upgradeLevel: 1\n            }\n        ];\n        \n        facilities.forEach(facility => {\n            this.facilities.set(facility.id, facility);\n        });\n    }\n\n    /**\n     * Initialize scientists\n     */\n    private initializeScientists(): void {\n        const scientists: Scientist[] = [\n            {\n                id: 'dr_smith',\n                name: 'Dr. Sarah Smith',\n                expertise: ResearchField.Engineering,\n                skill: 7,\n                efficiency: 1.2,\n                isAvailable: true,\n                fatigue: 0,\n                morale: 0.8\n            },\n            {\n                id: 'prof_chen',\n                name: 'Prof. Wei Chen',\n                expertise: ResearchField.Physics,\n                skill: 8,\n                efficiency: 1.3,\n                isAvailable: true,\n                fatigue: 0,\n                morale: 0.9\n            },\n            {\n                id: 'dr_ivanov',\n                name: 'Dr. Viktor Ivanov',\n                expertise: ResearchField.Computing,\n                skill: 6,\n                efficiency: 1.1,\n                isAvailable: true,\n                fatigue: 0,\n                morale: 0.7\n            }\n        ];\n        \n        scientists.forEach(scientist => {\n            this.scientists.set(scientist.id, scientist);\n        });\n    }\n\n    /**\n     * Start research project\n     */\n    startResearch(technologyId: string, facilityId: string, scientistIds: string[] = []): boolean {\n        const technology = this.technologies.get(technologyId);\n        const facility = this.facilities.get(facilityId);\n        \n        if (!technology || !facility) {\n            this.logger.warn('Invalid technology or facility for research', { technologyId, facilityId });\n            return false;\n        }\n        \n        // Check if technology is available for research\n        if (technology.isUnlocked || technology.isResearching) {\n            this.logger.warn('Technology already unlocked or being researched', { technologyId });\n            return false;\n        }\n        \n        // Check prerequisites\n        for (const prereq of technology.prerequisites) {\n            const prereqTech = this.technologies.get(prereq);\n            if (!prereqTech || !prereqTech.isUnlocked) {\n                this.logger.warn('Prerequisites not met', { technologyId, missingPrereq: prereq });\n                return false;\n            }\n        }\n        \n        // Check facility availability\n        if (facility.currentProjects.length >= facility.maxProjects) {\n            this.logger.warn('Facility at capacity', { facilityId });\n            return false;\n        }\n        \n        // Check facility specialization\n        if (facility.specialization.length > 0 && !facility.specialization.includes(technology.field)) {\n            this.logger.warn('Facility not specialized for this research field', { \n                facilityId, \n                field: technology.field, \n                specializations: facility.specialization \n            });\n            return false;\n        }\n        \n        // Validate and assign scientists\n        const validScientists: string[] = [];\n        for (const scientistId of scientistIds) {\n            const scientist = this.scientists.get(scientistId);\n            if (scientist && scientist.isAvailable) {\n                validScientists.push(scientistId);\n                scientist.isAvailable = false;\n                scientist.assignedProject = technologyId;\n                scientist.assignedFacility = facilityId;\n            }\n        }\n        \n        // Calculate research efficiency\n        let efficiency = facility.efficiency * facility.maintenanceLevel;\n        \n        // Add scientist bonuses\n        validScientists.forEach(scientistId => {\n            const scientist = this.scientists.get(scientistId);\n            if (scientist) {\n                let scientistBonus = scientist.efficiency * scientist.morale * (1 - scientist.fatigue);\n                \n                // Expertise bonus\n                if (scientist.expertise === technology.field) {\n                    scientistBonus *= 1.5;\n                }\n                \n                efficiency += scientistBonus;\n            }\n        });\n        \n        // Apply research field multipliers\n        const fieldMultiplier = this.researchMultipliers.get(technology.field) || 1.0;\n        efficiency *= fieldMultiplier;\n        \n        // Calculate estimated completion time\n        const baseTime = technology.researchTime;\n        const estimatedTime = baseTime / efficiency;\n        \n        // Create research project\n        const projectId = `project_${technologyId}_${Date.now()}`;\n        const project: ResearchProject = {\n            id: projectId,\n            technologyId,\n            facilityId,\n            assignedScientists: validScientists,\n            startTime: Date.now(),\n            estimatedCompletion: Date.now() + estimatedTime * 1000,\n            efficiency,\n            status: 'active'\n        };\n        \n        this.projects.set(projectId, project);\n        facility.currentProjects.push(projectId);\n        technology.isResearching = true;\n        technology.researchStartTime = Date.now();\n        \n        this.logger.info(`🔬 Research started: ${technology.name}`, {\n            facility: facility.name,\n            scientists: validScientists.length,\n            efficiency: efficiency.toFixed(2),\n            estimatedHours: (estimatedTime / 3600).toFixed(1)\n        });\n        \n        return true;\n    }\n\n    /**\n     * Update research progress\n     */\n    update(deltaTime: number): void {\n        const currentTime = Date.now();\n        \n        for (const project of this.projects.values()) {\n            if (project.status !== 'active') continue;\n            \n            const technology = this.technologies.get(project.technologyId);\n            if (!technology) continue;\n            \n            // Calculate progress\n            const elapsed = currentTime - project.startTime;\n            const totalDuration = project.estimatedCompletion - project.startTime;\n            const progress = Math.min(1.0, elapsed / totalDuration);\n            \n            technology.researchProgress = progress;\n            \n            // Check for completion\n            if (progress >= 1.0) {\n                this.completeResearch(project.id);\n            } else {\n                // Update scientist fatigue\n                project.assignedScientists.forEach(scientistId => {\n                    const scientist = this.scientists.get(scientistId);\n                    if (scientist) {\n                        scientist.fatigue = Math.min(1.0, scientist.fatigue + deltaTime * 0.0001); // Gradual fatigue\n                    }\n                });\n            }\n        }\n        \n        // Random discovery chances\n        if (Math.random() < 0.001) { // 0.1% chance per update\n            this.makeRandomDiscovery();\n        }\n    }\n\n    /**\n     * Complete research project\n     */\n    private completeResearch(projectId: string): void {\n        const project = this.projects.get(projectId);\n        if (!project) return;\n        \n        const technology = this.technologies.get(project.technologyId);\n        const facility = this.facilities.get(project.facilityId);\n        \n        if (!technology || !facility) return;\n        \n        // Mark technology as unlocked\n        technology.isUnlocked = true;\n        technology.isResearching = false;\n        technology.researchProgress = 1.0;\n        technology.completedTime = Date.now();\n        \n        // Free up scientists\n        project.assignedScientists.forEach(scientistId => {\n            const scientist = this.scientists.get(scientistId);\n            if (scientist) {\n                scientist.isAvailable = true;\n                scientist.assignedProject = undefined;\n                scientist.assignedFacility = undefined;\n                scientist.morale = Math.min(1.0, scientist.morale + 0.1); // Boost morale on success\n            }\n        });\n        \n        // Remove project from facility\n        facility.currentProjects = facility.currentProjects.filter(id => id !== projectId);\n        \n        // Mark project as completed\n        project.status = 'completed';\n        \n        // Award research points\n        this.totalResearchPoints += technology.researchCost;\n        \n        // Apply technology unlocks\n        this.applyTechnologyUnlocks(technology);\n        \n        this.events.onTechnologyUnlocked?.(technology);\n        this.events.onResearchCompleted?.(project);\n        \n        this.logger.info(`🎉 Research completed: ${technology.name}`, {\n            duration: ((Date.now() - project.startTime) / 1000 / 60).toFixed(1) + ' minutes',\n            unlocks: technology.unlocks.length\n        });\n        \n        // Check for breakthrough achievements\n        const tierCount = this.getTierUnlockCount(technology.field, technology.tier);\n        if (tierCount === 1) { // First technology of this tier in this field\n            this.events.onBreakthroughAchieved?.(technology.field, technology.tier);\n        }\n    }\n\n    /**\n     * Apply technology unlocks\n     */\n    private applyTechnologyUnlocks(technology: Technology): void {\n        technology.unlocks.forEach(unlock => {\n            switch (unlock.type) {\n                case 'facility':\n                    this.unlockFacility(unlock.target);\n                    break;\n                case 'upgrade':\n                    this.applyUpgrade(unlock.target, unlock.value || 0);\n                    break;\n                case 'ability':\n                    this.unlockAbility(unlock.target);\n                    break;\n                case 'recipe':\n                    this.unlockRecipe(unlock.target);\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Unlock new research facility\n     */\n    private unlockFacility(facilityType: string): void {\n        const facilityConfigs: { [key: string]: Partial<ResearchFacility> } = {\n            quantum_lab: {\n                name: 'Quantum Research Lab',\n                type: 'laboratory',\n                efficiency: 2.0,\n                specialization: [ResearchField.Physics, ResearchField.Computing],\n                maxProjects: 2\n            },\n            bio_lab: {\n                name: 'Biological Research Lab',\n                type: 'laboratory',\n                efficiency: 1.8,\n                specialization: [ResearchField.Biology],\n                maxProjects: 1\n            },\n            testing_chamber: {\n                name: 'Testing Chamber',\n                type: 'testing_chamber',\n                efficiency: 1.5,\n                specialization: [ResearchField.Military, ResearchField.Engineering],\n                maxProjects: 3\n            },\n            observatory: {\n                name: 'Deep Space Observatory',\n                type: 'observatory',\n                efficiency: 1.6,\n                specialization: [ResearchField.Exploration, ResearchField.Physics],\n                maxProjects: 1\n            }\n        };\n        \n        const config = facilityConfigs[facilityType];\n        if (config) {\n            const facilityId = `${facilityType}_${Date.now()}`;\n            const facility: ResearchFacility = {\n                id: facilityId,\n                name: config.name || facilityType,\n                type: config.type || 'laboratory',\n                efficiency: config.efficiency || 1.0,\n                specialization: config.specialization || [],\n                maxProjects: config.maxProjects || 1,\n                isOperational: true,\n                currentProjects: [],\n                maintenanceLevel: 1.0,\n                upgradeLevel: 1\n            };\n            \n            this.facilities.set(facilityId, facility);\n            this.logger.info(`🏗️ New facility unlocked: ${facility.name}`);\n        }\n    }\n\n    /**\n     * Apply research upgrade\n     */\n    private applyUpgrade(upgradeType: string, value: number): void {\n        switch (upgradeType) {\n            case 'research_speed':\n                Object.values(ResearchField).forEach(field => {\n                    const current = this.researchMultipliers.get(field) || 1.0;\n                    this.researchMultipliers.set(field, current * (1 + value / 100));\n                });\n                break;\n            case 'hull_strength':\n            case 'shield_capacity':\n            case 'warp_efficiency':\n                // These would be applied to ship systems\n                this.logger.info(`⚡ Upgrade applied: ${upgradeType} +${value}%`);\n                break;\n        }\n    }\n\n    /**\n     * Unlock new ability\n     */\n    private unlockAbility(abilityId: string): void {\n        this.logger.info(`🌟 New ability unlocked: ${abilityId}`);\n    }\n\n    /**\n     * Unlock new recipe\n     */\n    private unlockRecipe(recipeId: string): void {\n        this.logger.info(`📋 New recipe unlocked: ${recipeId}`);\n    }\n\n    /**\n     * Make random discovery\n     */\n    private makeRandomDiscovery(): void {\n        const discoveries = [\n            {\n                name: 'Quantum Fluctuation Anomaly',\n                field: ResearchField.Physics,\n                rarity: 'rare' as const,\n                researchBonus: { field: ResearchField.Physics, bonus: 0.1 }\n            },\n            {\n                name: 'Exotic Particle Traces',\n                field: ResearchField.Physics,\n                rarity: 'uncommon' as const,\n                grantsResources: [{ itemId: 'exotic_dark_matter', quantity: 1 }]\n            },\n            {\n                name: 'Ancient Data Fragment',\n                field: ResearchField.Computing,\n                rarity: 'epic' as const,\n                unlocksTechnology: 'artificial_intelligence'\n            },\n            {\n                name: 'Biological Adaptation Pattern',\n                field: ResearchField.Biology,\n                rarity: 'common' as const,\n                researchBonus: { field: ResearchField.Biology, bonus: 0.05 }\n            }\n        ];\n        \n        const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];\n        const discoveryObj: Discovery = {\n            id: `discovery_${Date.now()}`,\n            name: discovery.name,\n            description: `A ${discovery.rarity} discovery in ${discovery.field}`,\n            field: discovery.field,\n            rarity: discovery.rarity,\n            discoveryTime: Date.now(),\n            researchBonus: discovery.researchBonus,\n            unlocksTechnology: discovery.unlocksTechnology,\n            grantsResources: discovery.grantsResources\n        };\n        \n        this.discoveries.push(discoveryObj);\n        \n        // Apply discovery effects\n        if (discoveryObj.researchBonus) {\n            const current = this.researchMultipliers.get(discoveryObj.researchBonus.field) || 1.0;\n            this.researchMultipliers.set(discoveryObj.researchBonus.field, current + discoveryObj.researchBonus.bonus);\n        }\n        \n        this.events.onDiscoveryMade?.(discoveryObj);\n        \n        this.logger.info(`🔍 Discovery made: ${discoveryObj.name}`, {\n            field: discoveryObj.field,\n            rarity: discoveryObj.rarity\n        });\n    }\n\n    /**\n     * Get available technologies for research\n     */\n    getAvailableTechnologies(): Technology[] {\n        return Array.from(this.technologies.values()).filter(tech => {\n            if (tech.isUnlocked || tech.isResearching) return false;\n            \n            // Check prerequisites\n            return tech.prerequisites.every(prereqId => {\n                const prereq = this.technologies.get(prereqId);\n                return prereq && prereq.isUnlocked;\n            });\n        });\n    }\n\n    /**\n     * Get active research projects\n     */\n    getActiveProjects(): ResearchProject[] {\n        return Array.from(this.projects.values()).filter(p => p.status === 'active');\n    }\n\n    /**\n     * Get unlocked technologies\n     */\n    getUnlockedTechnologies(): Technology[] {\n        return Array.from(this.technologies.values()).filter(tech => tech.isUnlocked);\n    }\n\n    /**\n     * Get technology by ID\n     */\n    getTechnology(technologyId: string): Technology | null {\n        return this.technologies.get(technologyId) || null;\n    }\n\n    /**\n     * Get all facilities\n     */\n    getFacilities(): ResearchFacility[] {\n        return Array.from(this.facilities.values());\n    }\n\n    /**\n     * Get available scientists\n     */\n    getAvailableScientists(): Scientist[] {\n        return Array.from(this.scientists.values()).filter(s => s.isAvailable);\n    }\n\n    /**\n     * Get recent discoveries\n     */\n    getRecentDiscoveries(limit: number = 10): Discovery[] {\n        return this.discoveries\n            .sort((a, b) => b.discoveryTime - a.discoveryTime)\n            .slice(0, limit);\n    }\n\n    /**\n     * Get tier unlock count for field\n     */\n    private getTierUnlockCount(field: ResearchField, tier: TechnologyTier): number {\n        return Array.from(this.technologies.values())\n            .filter(tech => tech.field === field && tech.tier === tier && tech.isUnlocked)\n            .length;\n    }\n\n    /**\n     * Get research statistics\n     */\n    getResearchStats(): {\n        totalTechnologies: number;\n        unlockedTechnologies: number;\n        activeProjects: number;\n        totalResearchPoints: number;\n        discoveries: number;\n        facilities: number;\n        scientists: number;\n        fieldProgress: { [field: string]: { unlocked: number, total: number } };\n    } {\n        const fieldProgress: { [field: string]: { unlocked: number, total: number } } = {};\n        \n        Object.values(ResearchField).forEach(field => {\n            const technologies = Array.from(this.technologies.values()).filter(tech => tech.field === field);\n            const unlocked = technologies.filter(tech => tech.isUnlocked).length;\n            fieldProgress[field] = { unlocked, total: technologies.length };\n        });\n        \n        return {\n            totalTechnologies: this.technologies.size,\n            unlockedTechnologies: Array.from(this.technologies.values()).filter(tech => tech.isUnlocked).length,\n            activeProjects: Array.from(this.projects.values()).filter(p => p.status === 'active').length,\n            totalResearchPoints: this.totalResearchPoints,\n            discoveries: this.discoveries.length,\n            facilities: this.facilities.size,\n            scientists: this.scientists.size,\n            fieldProgress\n        };\n    }\n\n    /**\n     * Cancel research project\n     */\n    cancelResearch(projectId: string): boolean {\n        const project = this.projects.get(projectId);\n        if (!project || project.status !== 'active') return false;\n        \n        const technology = this.technologies.get(project.technologyId);\n        const facility = this.facilities.get(project.facilityId);\n        \n        if (technology) {\n            technology.isResearching = false;\n            technology.researchProgress = 0;\n        }\n        \n        if (facility) {\n            facility.currentProjects = facility.currentProjects.filter(id => id !== projectId);\n        }\n        \n        // Free scientists\n        project.assignedScientists.forEach(scientistId => {\n            const scientist = this.scientists.get(scientistId);\n            if (scientist) {\n                scientist.isAvailable = true;\n                scientist.assignedProject = undefined;\n                scientist.assignedFacility = undefined;\n            }\n        });\n        \n        project.status = 'failed';\n        \n        this.logger.info(`❌ Research cancelled: ${project.technologyId}`);\n        \n        return true;\n    }\n\n    /**\n     * Save research data\n     */\n    saveResearchData(): any {\n        return {\n            technologies: Array.from(this.technologies.entries()),\n            projects: Array.from(this.projects.entries()),\n            facilities: Array.from(this.facilities.entries()),\n            scientists: Array.from(this.scientists.entries()),\n            discoveries: this.discoveries,\n            totalResearchPoints: this.totalResearchPoints,\n            researchMultipliers: Array.from(this.researchMultipliers.entries())\n        };\n    }\n\n    /**\n     * Load research data\n     */\n    loadResearchData(data: any): void {\n        if (data.technologies) {\n            this.technologies = new Map(data.technologies);\n        }\n        if (data.projects) {\n            this.projects = new Map(data.projects);\n        }\n        if (data.facilities) {\n            this.facilities = new Map(data.facilities);\n        }\n        if (data.scientists) {\n            this.scientists = new Map(data.scientists);\n        }\n        if (data.discoveries) {\n            this.discoveries = data.discoveries;\n        }\n        if (data.totalResearchPoints) {\n            this.totalResearchPoints = data.totalResearchPoints;\n        }\n        if (data.researchMultipliers) {\n            this.researchMultipliers = new Map(data.researchMultipliers);\n        }\n        \n        this.logger.info('🔬 Research data loaded', {\n            technologies: this.technologies.size,\n            projects: this.projects.size\n        });\n    }\n}","/**\n * Crew Management System\n * Advanced crew mechanics with skills, assignments, morale, and ship operations\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\nimport { SkillCategory } from './PlayerProgression';\n\nexport enum CrewRole {\n    Captain = 'captain',\n    Pilot = 'pilot',\n    Engineer = 'engineer',\n    Scientist = 'scientist',\n    Security = 'security',\n    Medic = 'medic',\n    Communications = 'communications',\n    Navigator = 'navigator'\n}\n\nexport enum ShipStation {\n    Bridge = 'bridge',\n    Engineering = 'engineering',\n    MedBay = 'medbay',\n    ScienceLab = 'science_lab',\n    WeaponsControl = 'weapons_control',\n    Navigation = 'navigation',\n    Communications = 'communications',\n    Recreation = 'recreation'\n}\n\nexport enum CrewSkill {\n    Leadership = 'leadership',\n    Piloting = 'piloting',\n    Engineering = 'engineering',\n    Science = 'science',\n    Combat = 'combat',\n    Medicine = 'medicine',\n    Communications = 'communications',\n    Navigation = 'navigation'\n}\n\nexport interface CrewMember {\n    id: string;\n    name: string;\n    role: CrewRole;\n    species: string;\n    age: number;\n    \n    // Skills (0-100)\n    skills: Map<CrewSkill, number>;\n    \n    // Status\n    health: number; // 0-100\n    morale: number; // 0-100\n    fatigue: number; // 0-100\n    stress: number; // 0-100\n    \n    // Assignment\n    currentStation?: ShipStation;\n    assignedDuty?: string;\n    workEfficiency: number; // 0-2 multiplier\n    \n    // Personality traits\n    traits: CrewTrait[];\n    preferences: CrewPreferences;\n    relationships: Map<string, number>; // Other crew member ID -> relationship (-100 to 100)\n    \n    // Career\n    experience: number;\n    rank: number; // 1-10\n    specializations: string[];\n    commendations: string[];\n    \n    // Biography\n    background: string;\n    homeworld: string;\n    joinDate: number;\n}\n\nexport interface CrewTrait {\n    id: string;\n    name: string;\n    description: string;\n    effects: TraitEffect[];\n    rarity: 'common' | 'uncommon' | 'rare' | 'legendary';\n}\n\nexport interface TraitEffect {\n    type: 'skill_bonus' | 'morale_bonus' | 'stress_resistance' | 'efficiency_bonus' | 'relationship_modifier';\n    target?: CrewSkill | 'all';\n    value: number;\n    condition?: string;\n}\n\nexport interface CrewPreferences {\n    preferredStation: ShipStation;\n    preferredShift: 'alpha' | 'beta' | 'gamma';\n    personalityType: 'introvert' | 'extrovert' | 'ambivert';\n    workStyle: 'methodical' | 'creative' | 'aggressive' | 'collaborative';\n}\n\nexport interface StationAssignment {\n    stationId: ShipStation;\n    assignedCrew: string[];\n    maxCrew: number;\n    requiredSkills: CrewSkill[];\n    efficiency: number; // Based on crew performance\n    status: 'operational' | 'understaffed' | 'overstaffed' | 'unmanned';\n}\n\nexport interface CrewEvent {\n    id: string;\n    type: 'conflict' | 'romance' | 'achievement' | 'injury' | 'discovery' | 'promotion';\n    involvedCrew: string[];\n    description: string;\n    effects: { crewId: string, effect: string, value: number }[];\n    timestamp: number;\n    resolved: boolean;\n}\n\nexport interface CrewManagementEvents {\n    onCrewJoined?: (crew: CrewMember) => void;\n    onCrewLeft?: (crew: CrewMember, reason: string) => void;\n    onCrewPromoted?: (crew: CrewMember, newRank: number) => void;\n    onCrewEvent?: (event: CrewEvent) => void;\n    onStationEfficiencyChanged?: (station: ShipStation, efficiency: number) => void;\n    onMoraleAlert?: (averageMorale: number) => void;\n}\n\nexport class CrewManagement {\n    private crew: Map<string, CrewMember> = new Map();\n    private stations: Map<ShipStation, StationAssignment> = new Map();\n    private events: CrewEvent[] = [];\n    private traits: Map<string, CrewTrait> = new Map();\n    \n    // Ship-wide status\n    private shipMorale: number = 75;\n    private disciplineLevel: number = 80;\n    private crewQuarters: number = 10; // Maximum crew capacity\n    \n    private managementEvents: CrewManagementEvents;\n    private logger: Logger;\n\n    constructor(events: CrewManagementEvents = {}) {\n        this.logger = new Logger('CrewManagement');\n        this.managementEvents = events;\n        \n        this.initializeTraits();\n        this.initializeStations();\n        this.initializeStartingCrew();\n        \n        this.logger.info('👥 Crew management system initialized');\n    }\n\n    /**\n     * Initialize crew traits\n     */\n    private initializeTraits(): void {\n        const traits: CrewTrait[] = [\n            {\n                id: 'veteran',\n                name: 'Veteran',\n                description: 'Experienced crew member with enhanced skills',\n                effects: [\n                    { type: 'skill_bonus', target: 'all', value: 10 },\n                    { type: 'stress_resistance', value: 25 }\n                ],\n                rarity: 'uncommon'\n            },\n            {\n                id: 'natural_leader',\n                name: 'Natural Leader',\n                description: 'Inspires confidence in fellow crew members',\n                effects: [\n                    { type: 'skill_bonus', target: CrewSkill.Leadership, value: 20 },\n                    { type: 'morale_bonus', value: 10 }\n                ],\n                rarity: 'rare'\n            },\n            {\n                id: 'genius',\n                name: 'Genius',\n                description: 'Exceptional intellectual capabilities',\n                effects: [\n                    { type: 'skill_bonus', target: CrewSkill.Science, value: 30 },\n                    { type: 'efficiency_bonus', value: 50 }\n                ],\n                rarity: 'legendary'\n            },\n            {\n                id: 'ace_pilot',\n                name: 'Ace Pilot',\n                description: 'Exceptional piloting skills',\n                effects: [\n                    { type: 'skill_bonus', target: CrewSkill.Piloting, value: 25 },\n                    { type: 'efficiency_bonus', value: 30 }\n                ],\n                rarity: 'rare'\n            },\n            {\n                id: 'workaholic',\n                name: 'Workaholic',\n                description: 'Works longer without fatigue',\n                effects: [\n                    { type: 'efficiency_bonus', value: 20 },\n                    { type: 'stress_resistance', value: -10 }\n                ],\n                rarity: 'common'\n            },\n            {\n                id: 'diplomatic',\n                name: 'Diplomatic',\n                description: 'Excellent at resolving conflicts',\n                effects: [\n                    { type: 'relationship_modifier', value: 15 },\n                    { type: 'skill_bonus', target: CrewSkill.Communications, value: 15 }\n                ],\n                rarity: 'uncommon'\n            },\n            {\n                id: 'combat_veteran',\n                name: 'Combat Veteran',\n                description: 'Experienced in combat situations',\n                effects: [\n                    { type: 'skill_bonus', target: CrewSkill.Combat, value: 20 },\n                    { type: 'stress_resistance', value: 20 }\n                ],\n                rarity: 'uncommon'\n            },\n            {\n                id: 'perfectionist',\n                name: 'Perfectionist',\n                description: 'Produces higher quality work but slower',\n                effects: [\n                    { type: 'efficiency_bonus', value: 25 },\n                    { type: 'stress_resistance', value: -15 }\n                ],\n                rarity: 'common'\n            }\n        ];\n        \n        traits.forEach(trait => {\n            this.traits.set(trait.id, trait);\n        });\n    }\n\n    /**\n     * Initialize ship stations\n     */\n    private initializeStations(): void {\n        const stationConfigs: Array<{\n            station: ShipStation,\n            maxCrew: number,\n            requiredSkills: CrewSkill[]\n        }> = [\n            {\n                station: ShipStation.Bridge,\n                maxCrew: 3,\n                requiredSkills: [CrewSkill.Leadership, CrewSkill.Navigation]\n            },\n            {\n                station: ShipStation.Engineering,\n                maxCrew: 4,\n                requiredSkills: [CrewSkill.Engineering]\n            },\n            {\n                station: ShipStation.MedBay,\n                maxCrew: 2,\n                requiredSkills: [CrewSkill.Medicine]\n            },\n            {\n                station: ShipStation.ScienceLab,\n                maxCrew: 3,\n                requiredSkills: [CrewSkill.Science]\n            },\n            {\n                station: ShipStation.WeaponsControl,\n                maxCrew: 2,\n                requiredSkills: [CrewSkill.Combat]\n            },\n            {\n                station: ShipStation.Navigation,\n                maxCrew: 2,\n                requiredSkills: [CrewSkill.Navigation, CrewSkill.Piloting]\n            },\n            {\n                station: ShipStation.Communications,\n                maxCrew: 1,\n                requiredSkills: [CrewSkill.Communications]\n            },\n            {\n                station: ShipStation.Recreation,\n                maxCrew: 1,\n                requiredSkills: []\n            }\n        ];\n        \n        stationConfigs.forEach(config => {\n            this.stations.set(config.station, {\n                stationId: config.station,\n                assignedCrew: [],\n                maxCrew: config.maxCrew,\n                requiredSkills: config.requiredSkills,\n                efficiency: 0,\n                status: 'unmanned'\n            });\n        });\n    }\n\n    /**\n     * Initialize starting crew\n     */\n    private initializeStartingCrew(): void {\n        const startingCrew = [\n            {\n                name: 'Commander Sarah Cross',\n                role: CrewRole.Captain,\n                species: 'Human',\n                skills: new Map([\n                    [CrewSkill.Leadership, 85],\n                    [CrewSkill.Navigation, 70],\n                    [CrewSkill.Combat, 60]\n                ]),\n                traits: ['natural_leader'],\n                preferredStation: ShipStation.Bridge\n            },\n            {\n                name: 'Lieutenant Marcus Reid',\n                role: CrewRole.Pilot,\n                species: 'Human',\n                skills: new Map([\n                    [CrewSkill.Piloting, 90],\n                    [CrewSkill.Navigation, 75],\n                    [CrewSkill.Engineering, 45]\n                ]),\n                traits: ['ace_pilot'],\n                preferredStation: ShipStation.Navigation\n            },\n            {\n                name: 'Chief Engineer Zara Voss',\n                role: CrewRole.Engineer,\n                species: 'Centaurian',\n                skills: new Map([\n                    [CrewSkill.Engineering, 88],\n                    [CrewSkill.Science, 65],\n                    [CrewSkill.Combat, 30]\n                ]),\n                traits: ['perfectionist'],\n                preferredStation: ShipStation.Engineering\n            },\n            {\n                name: 'Dr. Elena Vasquez',\n                role: CrewRole.Medic,\n                species: 'Human',\n                skills: new Map([\n                    [CrewSkill.Medicine, 85],\n                    [CrewSkill.Science, 70],\n                    [CrewSkill.Communications, 55]\n                ]),\n                traits: ['diplomatic'],\n                preferredStation: ShipStation.MedBay\n            }\n        ];\n        \n        startingCrew.forEach((crewData, index) => {\n            const crew = this.createCrewMember(\n                crewData.name,\n                crewData.role,\n                crewData.species,\n                crewData.skills,\n                crewData.traits,\n                crewData.preferredStation\n            );\n            this.addCrewMember(crew);\n        });\n    }\n\n    /**\n     * Create new crew member\n     */\n    private createCrewMember(\n        name: string,\n        role: CrewRole,\n        species: string,\n        skills: Map<CrewSkill, number>,\n        traitIds: string[] = [],\n        preferredStation?: ShipStation\n    ): CrewMember {\n        const crewId = `crew_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        \n        // Initialize all skills\n        const allSkills = new Map<CrewSkill, number>();\n        Object.values(CrewSkill).forEach(skill => {\n            allSkills.set(skill, skills.get(skill) || Math.floor(Math.random() * 30) + 20);\n        });\n        \n        // Apply trait bonuses\n        const memberTraits: CrewTrait[] = [];\n        traitIds.forEach(traitId => {\n            const trait = this.traits.get(traitId);\n            if (trait) {\n                memberTraits.push(trait);\n                trait.effects.forEach(effect => {\n                    if (effect.type === 'skill_bonus') {\n                        if (effect.target === 'all') {\n                            Object.values(CrewSkill).forEach(skill => {\n                                const current = allSkills.get(skill) || 0;\n                                allSkills.set(skill, Math.min(100, current + effect.value));\n                            });\n                        } else if (effect.target) {\n                            const current = allSkills.get(effect.target as CrewSkill) || 0;\n                            allSkills.set(effect.target as CrewSkill, Math.min(100, current + effect.value));\n                        }\n                    }\n                });\n            }\n        });\n        \n        return {\n            id: crewId,\n            name,\n            role,\n            species,\n            age: Math.floor(Math.random() * 40) + 25,\n            \n            skills: allSkills,\n            \n            health: 100,\n            morale: Math.floor(Math.random() * 20) + 70, // 70-90\n            fatigue: Math.floor(Math.random() * 20) + 10, // 10-30\n            stress: Math.floor(Math.random() * 15) + 5, // 5-20\n            \n            workEfficiency: 1.0,\n            \n            traits: memberTraits,\n            preferences: {\n                preferredStation: preferredStation || ShipStation.Bridge,\n                preferredShift: 'alpha',\n                personalityType: ['introvert', 'extrovert', 'ambivert'][Math.floor(Math.random() * 3)] as any,\n                workStyle: ['methodical', 'creative', 'aggressive', 'collaborative'][Math.floor(Math.random() * 4)] as any\n            },\n            relationships: new Map(),\n            \n            experience: Math.floor(Math.random() * 1000) + 500,\n            rank: Math.floor(Math.random() * 3) + 1,\n            specializations: [],\n            commendations: [],\n            \n            background: this.generateBackground(species, role),\n            homeworld: this.generateHomeworld(species),\n            joinDate: Date.now() - Math.floor(Math.random() * 365 * 24 * 60 * 60 * 1000) // Random date in past year\n        };\n    }\n\n    /**\n     * Generate crew background\n     */\n    private generateBackground(species: string, role: CrewRole): string {\n        const backgrounds = {\n            [CrewRole.Captain]: ['Former military officer', 'Merchant marine veteran', 'Academy graduate'],\n            [CrewRole.Pilot]: ['Test pilot', 'Racing pilot', 'Military pilot', 'Civilian transport pilot'],\n            [CrewRole.Engineer]: ['Shipyard worker', 'Research scientist', 'Maintenance chief', 'Technical specialist'],\n            [CrewRole.Scientist]: ['University researcher', 'Corporate scientist', 'Field researcher', 'Lab technician'],\n            [CrewRole.Security]: ['Military police', 'Corporate security', 'Bounty hunter', 'Law enforcement'],\n            [CrewRole.Medic]: ['Ship surgeon', 'Emergency medic', 'Research physician', 'Field medic'],\n            [CrewRole.Communications]: ['Signal analyst', 'Diplomatic attaché', 'Communications officer', 'Intelligence operative'],\n            [CrewRole.Navigator]: ['Star chart cartographer', 'Deep space navigator', 'Survey specialist', 'Astrogation expert']\n        };\n        \n        const roleBackgrounds = backgrounds[role] || ['General crew member'];\n        return roleBackgrounds[Math.floor(Math.random() * roleBackgrounds.length)];\n    }\n\n    /**\n     * Generate homeworld\n     */\n    private generateHomeworld(species: string): string {\n        const homeworlds = {\n            'Human': ['Earth', 'Mars', 'Alpha Centauri', 'New Terra', 'Proxima Station'],\n            'Centaurian': ['Centauri Prime', 'Alpha Station', 'Proxima Colony'],\n            'Vulcan': ['Vulcan', 'New Vulcan', 'Vulcan Colony Alpha'],\n            'Andorian': ['Andoria', 'Andorian Outpost', 'Ice Station Beta']\n        };\n        \n        const speciesWorlds = (homeworlds as any)[species] || homeworlds['Human'];\n        return speciesWorlds[Math.floor(Math.random() * speciesWorlds.length)];\n    }\n\n    /**\n     * Add crew member to ship\n     */\n    addCrewMember(crew: CrewMember): boolean {\n        if (this.crew.size >= this.crewQuarters) {\n            this.logger.warn('Cannot add crew member: quarters at capacity');\n            return false;\n        }\n        \n        this.crew.set(crew.id, crew);\n        \n        // Initialize relationships with existing crew\n        for (const existingCrew of this.crew.values()) {\n            if (existingCrew.id !== crew.id) {\n                const relationship = this.calculateInitialRelationship(crew, existingCrew);\n                crew.relationships.set(existingCrew.id, relationship);\n                existingCrew.relationships.set(crew.id, relationship);\n            }\n        }\n        \n        this.managementEvents.onCrewJoined?.(crew);\n        \n        this.logger.info(`👤 Crew member joined: ${crew.name}`, {\n            role: crew.role,\n            species: crew.species,\n            traits: crew.traits.map(t => t.name)\n        });\n        \n        return true;\n    }\n\n    /**\n     * Calculate initial relationship between crew members\n     */\n    private calculateInitialRelationship(crew1: CrewMember, crew2: CrewMember): number {\n        let relationship = 0;\n        \n        // Species compatibility\n        if (crew1.species === crew2.species) {\n            relationship += 10;\n        }\n        \n        // Personality compatibility\n        if (crew1.preferences.personalityType === crew2.preferences.personalityType) {\n            relationship += 5;\n        }\n        \n        // Work style compatibility\n        if (crew1.preferences.workStyle === crew2.preferences.workStyle) {\n            relationship += 5;\n        } else if (\n            (crew1.preferences.workStyle === 'collaborative' || crew2.preferences.workStyle === 'collaborative') &&\n            crew1.preferences.workStyle !== 'aggressive' && crew2.preferences.workStyle !== 'aggressive'\n        ) {\n            relationship += 3;\n        }\n        \n        // Random factor\n        relationship += Math.floor(Math.random() * 21) - 10; // -10 to +10\n        \n        return Math.max(-50, Math.min(50, relationship)); // Clamp to -50 to +50\n    }\n\n    /**\n     * Assign crew member to station\n     */\n    assignCrewToStation(crewId: string, station: ShipStation): boolean {\n        const crew = this.crew.get(crewId);\n        const stationData = this.stations.get(station);\n        \n        if (!crew || !stationData) {\n            this.logger.warn('Invalid crew or station for assignment', { crewId, station });\n            return false;\n        }\n        \n        // Remove from current station\n        if (crew.currentStation) {\n            this.removeCrewFromStation(crewId, crew.currentStation);\n        }\n        \n        // Check capacity\n        if (stationData.assignedCrew.length >= stationData.maxCrew) {\n            this.logger.warn('Station at capacity', { station });\n            return false;\n        }\n        \n        // Assign to new station\n        crew.currentStation = station;\n        stationData.assignedCrew.push(crewId);\n        \n        // Calculate work efficiency based on skills and preferences\n        crew.workEfficiency = this.calculateWorkEfficiency(crew, station);\n        \n        // Update station efficiency\n        this.updateStationEfficiency(station);\n        \n        this.logger.info(`👥 Crew assigned: ${crew.name} → ${station}`, {\n            efficiency: crew.workEfficiency.toFixed(2)\n        });\n        \n        return true;\n    }\n\n    /**\n     * Remove crew from station\n     */\n    private removeCrewFromStation(crewId: string, station: ShipStation): void {\n        const stationData = this.stations.get(station);\n        if (stationData) {\n            stationData.assignedCrew = stationData.assignedCrew.filter(id => id !== crewId);\n            this.updateStationEfficiency(station);\n        }\n        \n        const crew = this.crew.get(crewId);\n        if (crew) {\n            crew.currentStation = undefined;\n            crew.workEfficiency = 1.0;\n        }\n    }\n\n    /**\n     * Calculate work efficiency for crew at station\n     */\n    private calculateWorkEfficiency(crew: CrewMember, station: ShipStation): number {\n        let efficiency = 1.0;\n        \n        // Skill-based efficiency\n        const stationData = this.stations.get(station);\n        if (stationData) {\n            let skillTotal = 0;\n            let skillCount = 0;\n            \n            stationData.requiredSkills.forEach(skill => {\n                const skillLevel = crew.skills.get(skill) || 0;\n                skillTotal += skillLevel;\n                skillCount++;\n            });\n            \n            if (skillCount > 0) {\n                const averageSkill = skillTotal / skillCount;\n                efficiency = 0.5 + (averageSkill / 100) * 1.5; // 0.5 to 2.0 range\n            }\n        }\n        \n        // Preference bonus\n        if (crew.preferences.preferredStation === station) {\n            efficiency *= 1.2;\n        }\n        \n        // Health and morale effects\n        efficiency *= (crew.health / 100);\n        efficiency *= (crew.morale / 100);\n        efficiency *= (1 - crew.fatigue / 200); // Fatigue has less impact\n        efficiency *= (1 - crew.stress / 150); // Stress has moderate impact\n        \n        // Trait effects\n        crew.traits.forEach(trait => {\n            trait.effects.forEach(effect => {\n                if (effect.type === 'efficiency_bonus') {\n                    efficiency *= (1 + effect.value / 100);\n                }\n            });\n        });\n        \n        return Math.max(0.1, Math.min(2.5, efficiency)); // Clamp to 0.1-2.5\n    }\n\n    /**\n     * Update station efficiency based on assigned crew\n     */\n    private updateStationEfficiency(station: ShipStation): void {\n        const stationData = this.stations.get(station);\n        if (!stationData) return;\n        \n        if (stationData.assignedCrew.length === 0) {\n            stationData.efficiency = 0;\n            stationData.status = 'unmanned';\n        } else {\n            let totalEfficiency = 0;\n            let crewCount = 0;\n            \n            stationData.assignedCrew.forEach(crewId => {\n                const crew = this.crew.get(crewId);\n                if (crew) {\n                    totalEfficiency += crew.workEfficiency;\n                    crewCount++;\n                }\n            });\n            \n            if (crewCount > 0) {\n                stationData.efficiency = totalEfficiency / crewCount;\n                \n                // Determine status\n                const optimalCrew = Math.ceil(stationData.maxCrew * 0.75);\n                if (crewCount < optimalCrew) {\n                    stationData.status = 'understaffed';\n                } else if (crewCount > stationData.maxCrew) {\n                    stationData.status = 'overstaffed';\n                    stationData.efficiency *= 0.8; // Overcrowding penalty\n                } else {\n                    stationData.status = 'operational';\n                }\n            }\n        }\n        \n        this.managementEvents.onStationEfficiencyChanged?.(station, stationData.efficiency);\n    }\n\n    /**\n     * Update crew system\n     */\n    update(deltaTime: number): void {\n        this.updateCrewStatus(deltaTime);\n        this.updateRelationships(deltaTime);\n        this.checkCrewEvents();\n        this.updateShipMorale();\n    }\n\n    /**\n     * Update crew status (health, morale, fatigue, stress)\n     */\n    private updateCrewStatus(deltaTime: number): void {\n        for (const crew of this.crew.values()) {\n            // Fatigue increases during work\n            if (crew.currentStation) {\n                crew.fatigue = Math.min(100, crew.fatigue + deltaTime * 0.02);\n            } else {\n                // Rest reduces fatigue\n                crew.fatigue = Math.max(0, crew.fatigue - deltaTime * 0.05);\n            }\n            \n            // Stress management\n            let stressChange = 0;\n            \n            // Work stress\n            if (crew.currentStation) {\n                const stationData = this.stations.get(crew.currentStation);\n                if (stationData && stationData.status === 'understaffed') {\n                    stressChange += deltaTime * 0.03;\n                }\n            }\n            \n            // Relationship stress\n            let relationshipStress = 0;\n            let relationshipCount = 0;\n            crew.relationships.forEach(relationship => {\n                relationshipStress += relationship;\n                relationshipCount++;\n            });\n            \n            if (relationshipCount > 0) {\n                const avgRelationship = relationshipStress / relationshipCount;\n                if (avgRelationship < -20) {\n                    stressChange += deltaTime * 0.02;\n                } else if (avgRelationship > 20) {\n                    stressChange -= deltaTime * 0.01;\n                }\n            }\n            \n            // Apply trait effects\n            crew.traits.forEach(trait => {\n                trait.effects.forEach(effect => {\n                    if (effect.type === 'stress_resistance') {\n                        stressChange *= (1 - effect.value / 100);\n                    }\n                });\n            });\n            \n            crew.stress = Math.max(0, Math.min(100, crew.stress + stressChange));\n            \n            // Morale calculation\n            let moraleChange = 0;\n            \n            // Base morale decay\n            moraleChange -= deltaTime * 0.01;\n            \n            // Station assignment morale\n            if (crew.currentStation === crew.preferences.preferredStation) {\n                moraleChange += deltaTime * 0.02;\n            }\n            \n            // Health affects morale\n            if (crew.health < 80) {\n                moraleChange -= deltaTime * 0.015;\n            }\n            \n            // Stress affects morale\n            if (crew.stress > 60) {\n                moraleChange -= deltaTime * 0.02;\n            }\n            \n            // Apply trait effects\n            crew.traits.forEach(trait => {\n                trait.effects.forEach(effect => {\n                    if (effect.type === 'morale_bonus') {\n                        moraleChange += deltaTime * (effect.value / 1000);\n                    }\n                });\n            });\n            \n            crew.morale = Math.max(0, Math.min(100, crew.morale + moraleChange));\n            \n            // Update work efficiency\n            if (crew.currentStation) {\n                crew.workEfficiency = this.calculateWorkEfficiency(crew, crew.currentStation);\n            }\n        }\n    }\n\n    /**\n     * Update crew relationships\n     */\n    private updateRelationships(deltaTime: number): void {\n        const crewArray = Array.from(this.crew.values());\n        \n        for (let i = 0; i < crewArray.length; i++) {\n            for (let j = i + 1; j < crewArray.length; j++) {\n                const crew1 = crewArray[i];\n                const crew2 = crewArray[j];\n                \n                // Working together improves relationships slowly\n                if (crew1.currentStation === crew2.currentStation && crew1.currentStation) {\n                    const improvement = deltaTime * 0.005;\n                    this.modifyRelationship(crew1.id, crew2.id, improvement);\n                }\n                \n                // Random small relationship changes\n                if (Math.random() < 0.001) { // Very rare random events\n                    const change = (Math.random() - 0.5) * 2; // -1 to +1\n                    this.modifyRelationship(crew1.id, crew2.id, change);\n                }\n            }\n        }\n    }\n\n    /**\n     * Modify relationship between two crew members\n     */\n    private modifyRelationship(crewId1: string, crewId2: string, change: number): void {\n        const crew1 = this.crew.get(crewId1);\n        const crew2 = this.crew.get(crewId2);\n        \n        if (!crew1 || !crew2) return;\n        \n        const current1 = crew1.relationships.get(crewId2) || 0;\n        const current2 = crew2.relationships.get(crewId1) || 0;\n        \n        crew1.relationships.set(crewId2, Math.max(-100, Math.min(100, current1 + change)));\n        crew2.relationships.set(crewId1, Math.max(-100, Math.min(100, current2 + change)));\n    }\n\n    /**\n     * Check for random crew events\n     */\n    private checkCrewEvents(): void {\n        if (Math.random() < 0.0005) { // Very rare events\n            this.generateCrewEvent();\n        }\n    }\n\n    /**\n     * Generate random crew event\n     */\n    private generateCrewEvent(): void {\n        const crewArray = Array.from(this.crew.values());\n        if (crewArray.length < 2) return;\n        \n        const eventTypes = ['conflict', 'achievement', 'discovery', 'promotion'];\n        const eventType = eventTypes[Math.floor(Math.random() * eventTypes.length)] as CrewEvent['type'];\n        \n        let event: CrewEvent;\n        \n        switch (eventType) {\n            case 'conflict':\n                event = this.generateConflictEvent(crewArray);\n                break;\n            case 'achievement':\n                event = this.generateAchievementEvent(crewArray);\n                break;\n            case 'discovery':\n                event = this.generateDiscoveryEvent(crewArray);\n                break;\n            case 'promotion':\n                event = this.generatePromotionEvent(crewArray);\n                break;\n            default:\n                return;\n        }\n        \n        this.events.push(event);\n        this.managementEvents.onCrewEvent?.(event);\n        \n        // Apply event effects\n        event.effects.forEach(effect => {\n            const crew = this.crew.get(effect.crewId);\n            if (crew) {\n                switch (effect.effect) {\n                    case 'morale':\n                        crew.morale = Math.max(0, Math.min(100, crew.morale + effect.value));\n                        break;\n                    case 'stress':\n                        crew.stress = Math.max(0, Math.min(100, crew.stress + effect.value));\n                        break;\n                    case 'experience':\n                        crew.experience += effect.value;\n                        break;\n                }\n            }\n        });\n        \n        this.logger.info(`📰 Crew event: ${event.description}`, {\n            type: event.type,\n            involvedCrew: event.involvedCrew.length\n        });\n    }\n\n    /**\n     * Generate conflict event\n     */\n    private generateConflictEvent(crewArray: CrewMember[]): CrewEvent {\n        const crew1 = crewArray[Math.floor(Math.random() * crewArray.length)];\n        const crew2 = crewArray[Math.floor(Math.random() * crewArray.length)];\n        \n        if (crew1.id === crew2.id) {\n            return this.generateConflictEvent(crewArray); // Retry\n        }\n        \n        const conflictTypes = [\n            'disagreement over procedures',\n            'personality clash',\n            'resource allocation dispute',\n            'work methodology conflict'\n        ];\n        \n        const conflictType = conflictTypes[Math.floor(Math.random() * conflictTypes.length)];\n        \n        return {\n            id: `event_${Date.now()}`,\n            type: 'conflict',\n            involvedCrew: [crew1.id, crew2.id],\n            description: `${crew1.name} and ${crew2.name} had a ${conflictType}`,\n            effects: [\n                { crewId: crew1.id, effect: 'morale', value: -10 },\n                { crewId: crew2.id, effect: 'morale', value: -10 },\n                { crewId: crew1.id, effect: 'stress', value: 15 },\n                { crewId: crew2.id, effect: 'stress', value: 15 }\n            ],\n            timestamp: Date.now(),\n            resolved: false\n        };\n    }\n\n    /**\n     * Generate achievement event\n     */\n    private generateAchievementEvent(crewArray: CrewMember[]): CrewEvent {\n        const crew = crewArray[Math.floor(Math.random() * crewArray.length)];\n        \n        const achievements = [\n            'exceptional performance during crisis',\n            'innovative solution to technical problem',\n            'outstanding leadership during difficult situation',\n            'breakthrough in research project'\n        ];\n        \n        const achievement = achievements[Math.floor(Math.random() * achievements.length)];\n        \n        return {\n            id: `event_${Date.now()}`,\n            type: 'achievement',\n            involvedCrew: [crew.id],\n            description: `${crew.name} demonstrated ${achievement}`,\n            effects: [\n                { crewId: crew.id, effect: 'morale', value: 20 },\n                { crewId: crew.id, effect: 'experience', value: 100 }\n            ],\n            timestamp: Date.now(),\n            resolved: true\n        };\n    }\n\n    /**\n     * Generate discovery event\n     */\n    private generateDiscoveryEvent(crewArray: CrewMember[]): CrewEvent {\n        const crew = crewArray[Math.floor(Math.random() * crewArray.length)];\n        \n        const discoveries = [\n            'discovered new mineral composition',\n            'identified unknown signal pattern',\n            'found evidence of ancient civilization',\n            'detected rare astronomical phenomenon'\n        ];\n        \n        const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];\n        \n        return {\n            id: `event_${Date.now()}`,\n            type: 'discovery',\n            involvedCrew: [crew.id],\n            description: `${crew.name} ${discovery}`,\n            effects: [\n                { crewId: crew.id, effect: 'morale', value: 15 },\n                { crewId: crew.id, effect: 'experience', value: 75 }\n            ],\n            timestamp: Date.now(),\n            resolved: true\n        };\n    }\n\n    /**\n     * Generate promotion event\n     */\n    private generatePromotionEvent(crewArray: CrewMember[]): CrewEvent {\n        const eligibleCrew = crewArray.filter(crew => crew.rank < 10 && crew.experience > 1000);\n        if (eligibleCrew.length === 0) return this.generateAchievementEvent(crewArray);\n        \n        const crew = eligibleCrew[Math.floor(Math.random() * eligibleCrew.length)];\n        crew.rank++;\n        \n        return {\n            id: `event_${Date.now()}`,\n            type: 'promotion',\n            involvedCrew: [crew.id],\n            description: `${crew.name} has been promoted to rank ${crew.rank}`,\n            effects: [\n                { crewId: crew.id, effect: 'morale', value: 25 }\n            ],\n            timestamp: Date.now(),\n            resolved: true\n        };\n    }\n\n    /**\n     * Update ship-wide morale\n     */\n    private updateShipMorale(): void {\n        if (this.crew.size === 0) {\n            this.shipMorale = 50;\n            return;\n        }\n        \n        let totalMorale = 0;\n        for (const crew of this.crew.values()) {\n            totalMorale += crew.morale;\n        }\n        \n        const averageMorale = totalMorale / this.crew.size;\n        \n        // Smooth transition\n        this.shipMorale = this.shipMorale * 0.9 + averageMorale * 0.1;\n        \n        // Check for morale alerts\n        if (this.shipMorale < 40) {\n            this.managementEvents.onMoraleAlert?.(this.shipMorale);\n        }\n    }\n\n    /**\n     * Get crew member by ID\n     */\n    getCrewMember(crewId: string): CrewMember | null {\n        return this.crew.get(crewId) || null;\n    }\n\n    /**\n     * Get all crew members\n     */\n    getAllCrew(): CrewMember[] {\n        return Array.from(this.crew.values());\n    }\n\n    /**\n     * Get crew by role\n     */\n    getCrewByRole(role: CrewRole): CrewMember[] {\n        return Array.from(this.crew.values()).filter(crew => crew.role === role);\n    }\n\n    /**\n     * Get crew by station\n     */\n    getCrewByStation(station: ShipStation): CrewMember[] {\n        return Array.from(this.crew.values()).filter(crew => crew.currentStation === station);\n    }\n\n    /**\n     * Get station information\n     */\n    getStation(station: ShipStation): StationAssignment | null {\n        return this.stations.get(station) || null;\n    }\n\n    /**\n     * Get all stations\n     */\n    getAllStations(): StationAssignment[] {\n        return Array.from(this.stations.values());\n    }\n\n    /**\n     * Get recent crew events\n     */\n    getRecentEvents(limit: number = 10): CrewEvent[] {\n        return this.events\n            .sort((a, b) => b.timestamp - a.timestamp)\n            .slice(0, limit);\n    }\n\n    /**\n     * Get crew management statistics\n     */\n    getCrewStats(): {\n        totalCrew: number;\n        maxCrew: number;\n        averageMorale: number;\n        averageHealth: number;\n        averageFatigue: number;\n        averageStress: number;\n        stationEfficiency: { [station: string]: number };\n        roleDistribution: { [role: string]: number };\n        shipMorale: number;\n        disciplineLevel: number;\n    } {\n        const totalCrew = this.crew.size;\n        const maxCrew = this.crewQuarters;\n        \n        let totalMorale = 0;\n        let totalHealth = 0;\n        let totalFatigue = 0;\n        let totalStress = 0;\n        \n        const roleDistribution: { [role: string]: number } = {};\n        \n        for (const crew of this.crew.values()) {\n            totalMorale += crew.morale;\n            totalHealth += crew.health;\n            totalFatigue += crew.fatigue;\n            totalStress += crew.stress;\n            \n            roleDistribution[crew.role] = (roleDistribution[crew.role] || 0) + 1;\n        }\n        \n        const stationEfficiency: { [station: string]: number } = {};\n        for (const [station, data] of this.stations.entries()) {\n            stationEfficiency[station] = data.efficiency;\n        }\n        \n        return {\n            totalCrew,\n            maxCrew,\n            averageMorale: totalCrew > 0 ? totalMorale / totalCrew : 0,\n            averageHealth: totalCrew > 0 ? totalHealth / totalCrew : 0,\n            averageFatigue: totalCrew > 0 ? totalFatigue / totalCrew : 0,\n            averageStress: totalCrew > 0 ? totalStress / totalCrew : 0,\n            stationEfficiency,\n            roleDistribution,\n            shipMorale: this.shipMorale,\n            disciplineLevel: this.disciplineLevel\n        };\n    }\n\n    /**\n     * Save crew data\n     */\n    saveCrewData(): any {\n        return {\n            crew: Array.from(this.crew.entries()).map(([id, crew]) => [\n                id,\n                {\n                    ...crew,\n                    skills: Array.from(crew.skills.entries()),\n                    relationships: Array.from(crew.relationships.entries())\n                }\n            ]),\n            stations: Array.from(this.stations.entries()),\n            events: this.events,\n            shipMorale: this.shipMorale,\n            disciplineLevel: this.disciplineLevel,\n            crewQuarters: this.crewQuarters\n        };\n    }\n\n    /**\n     * Load crew data\n     */\n    loadCrewData(data: any): void {\n        if (data.crew) {\n            this.crew = new Map(data.crew.map(([id, crew]: [string, any]) => [\n                id,\n                {\n                    ...crew,\n                    skills: new Map(crew.skills),\n                    relationships: new Map(crew.relationships)\n                }\n            ]));\n        }\n        if (data.stations) {\n            this.stations = new Map(data.stations);\n        }\n        if (data.events) {\n            this.events = data.events;\n        }\n        if (data.shipMorale !== undefined) {\n            this.shipMorale = data.shipMorale;\n        }\n        if (data.disciplineLevel !== undefined) {\n            this.disciplineLevel = data.disciplineLevel;\n        }\n        if (data.crewQuarters !== undefined) {\n            this.crewQuarters = data.crewQuarters;\n        }\n        \n        this.logger.info('👥 Crew data loaded', {\n            crewCount: this.crew.size,\n            events: this.events.length\n        });\n    }\n}","/**\n * Diplomacy System\n * Advanced diplomatic interactions with factions, reputation, and negotiations\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\nimport { CrewMember } from '@rpg/CrewManagement';\n\nexport enum FactionType {\n    Government = 'government',\n    Corporate = 'corporate',\n    Military = 'military',\n    Pirates = 'pirates',\n    Traders = 'traders',\n    Scientists = 'scientists',\n    Aliens = 'aliens',\n    Rebels = 'rebels',\n    Religious = 'religious',\n    Independent = 'independent'\n}\n\nexport enum DiplomaticStance {\n    Allied = 'allied',           // +80 to +100\n    Friendly = 'friendly',       // +40 to +79\n    Neutral = 'neutral',         // -39 to +39\n    Unfriendly = 'unfriendly',   // -79 to -40\n    Hostile = 'hostile',         // -100 to -80\n    War = 'war'                  // Active warfare\n}\n\nexport enum NegotiationType {\n    Trade = 'trade',\n    Information = 'information',\n    SafePassage = 'safe_passage',\n    Alliance = 'alliance',\n    Ceasefire = 'ceasefire',\n    Technology = 'technology',\n    Territory = 'territory',\n    Tribute = 'tribute'\n}\n\nexport interface Faction {\n    id: string;\n    name: string;\n    type: FactionType;\n    description: string;\n    \n    // Political attributes\n    government: 'democracy' | 'autocracy' | 'oligarchy' | 'theocracy' | 'anarchy';\n    ideology: 'expansionist' | 'isolationist' | 'pacifist' | 'militaristic' | 'commercial';\n    \n    // Reputation and relationships\n    reputation: number; // -100 to +100\n    stance: DiplomaticStance;\n    trustLevel: number; // 0-100, affects negotiation success\n    \n    // Faction characteristics\n    power: number; // 1-100, military/economic strength\n    territory: string[]; // Controlled systems\n    resources: FactionResources;\n    \n    // Diplomatic history\n    treaties: Treaty[];\n    recentActions: DiplomaticAction[];\n    \n    // AI personality\n    personality: FactionPersonality;\n    \n    // Status\n    isActive: boolean;\n    lastContact: number;\n    homeSystem: string;\n}\n\nexport interface FactionResources {\n    military: number;\n    economic: number;\n    technological: number;\n    influence: number;\n}\n\nexport interface FactionPersonality {\n    aggression: number; // 0-100\n    cooperation: number; // 0-100\n    trustworthiness: number; // 0-100\n    pride: number; // 0-100\n    greed: number; // 0-100\n    xenophobia: number; // 0-100 (for aliens)\n}\n\nexport interface Treaty {\n    id: string;\n    type: 'trade' | 'non_aggression' | 'alliance' | 'technology_sharing' | 'territory';\n    participants: string[]; // Faction IDs\n    terms: TreatyTerm[];\n    startDate: number;\n    duration: number; // -1 for permanent\n    status: 'active' | 'violated' | 'expired' | 'suspended';\n}\n\nexport interface TreatyTerm {\n    type: 'trade_bonus' | 'military_support' | 'information_sharing' | 'territory_access' | 'tribute';\n    beneficiary: string; // Faction ID\n    value: number;\n    description: string;\n}\n\nexport interface DiplomaticAction {\n    id: string;\n    type: 'contact' | 'trade' | 'threat' | 'gift' | 'treaty_offer' | 'treaty_violation' | 'war_declaration';\n    actor: string; // Faction ID\n    target: string; // Faction ID\n    timestamp: number;\n    description: string;\n    reputationChange: number;\n    successful: boolean;\n}\n\nexport interface NegotiationSession {\n    id: string;\n    participants: string[]; // Faction IDs\n    type: NegotiationType;\n    currentOffer: NegotiationOffer;\n    counterOffer?: NegotiationOffer;\n    \n    // Negotiation state\n    rounds: number;\n    maxRounds: number;\n    status: 'active' | 'successful' | 'failed' | 'abandoned';\n    \n    // Modifiers\n    playerSkill: number; // Communications/Charisma bonuses\n    crewBonus: number; // Diplomatic crew bonuses\n    reputationModifier: number;\n}\n\nexport interface NegotiationOffer {\n    proposer: string; // Faction ID\n    terms: OfferTerm[];\n    totalValue: number; // AI-calculated offer value\n    priority: number; // How much proposer wants this\n}\n\nexport interface OfferTerm {\n    type: 'credits' | 'items' | 'information' | 'territory' | 'technology' | 'service' | 'protection';\n    giver: string; // Faction ID\n    receiver: string; // Faction ID\n    description: string;\n    value: number; // AI-calculated worth\n    items?: { itemId: string, quantity: number }[];\n}\n\nexport interface DiplomaticEncounter {\n    id: string;\n    factionId: string;\n    type: 'first_contact' | 'routine_patrol' | 'distress_call' | 'territorial_dispute' | 'trade_opportunity';\n    location: { x: number, y: number };\n    \n    // Encounter details\n    description: string;\n    availableActions: EncounterAction[];\n    consequences: EncounterConsequence[];\n    \n    // Status\n    isActive: boolean;\n    resolution?: 'peaceful' | 'hostile' | 'neutral' | 'beneficial';\n    timestamp: number;\n}\n\nexport interface EncounterAction {\n    id: string;\n    name: string;\n    description: string;\n    requirements?: ActionRequirement[];\n    skillCheck?: { skill: string, difficulty: number };\n    consequences: EncounterConsequence[];\n}\n\nexport interface ActionRequirement {\n    type: 'reputation' | 'crew_skill' | 'technology' | 'item' | 'treaty';\n    value: number | string;\n    description: string;\n}\n\nexport interface EncounterConsequence {\n    type: 'reputation' | 'resources' | 'information' | 'combat' | 'treaty_offer' | 'trade_opportunity';\n    factionId: string;\n    value: number;\n    description: string;\n    items?: { itemId: string, quantity: number }[];\n}\n\nexport interface DiplomacyEvents {\n    onFirstContact?: (faction: Faction) => void;\n    onReputationChanged?: (factionId: string, oldRep: number, newRep: number) => void;\n    onTreatyProposed?: (treaty: Treaty) => void;\n    onTreatyRatified?: (treaty: Treaty) => void;\n    onWarDeclared?: (aggressor: string, target: string) => void;\n    onNegotiationStarted?: (session: NegotiationSession) => void;\n    onNegotiationCompleted?: (session: NegotiationSession, success: boolean) => void;\n    onEncounterGenerated?: (encounter: DiplomaticEncounter) => void;\n}\n\nexport class DiplomacySystem {\n    private factions: Map<string, Faction> = new Map();\n    private treaties: Map<string, Treaty> = new Map();\n    private negotiations: Map<string, NegotiationSession> = new Map();\n    private encounters: Map<string, DiplomaticEncounter> = new Map();\n    private diplomaticActions: DiplomaticAction[] = [];\n    \n    // Player faction\n    private readonly PLAYER_FACTION_ID = 'player';\n    \n    private events: DiplomacyEvents;\n    private logger: Logger;\n\n    constructor(events: DiplomacyEvents = {}) {\n        this.logger = new Logger('DiplomacySystem');\n        this.events = events;\n        \n        this.initializeFactions();\n        this.initializePlayerFaction();\n        \n        this.logger.info('🤝 Diplomacy system initialized');\n    }\n\n    /**\n     * Initialize major factions\n     */\n    private initializeFactions(): void {\n        const factions: Faction[] = [\n            {\n                id: 'terran_federation',\n                name: 'Terran Federation',\n                type: FactionType.Government,\n                description: 'Democratic alliance of human colonies',\n                government: 'democracy',\n                ideology: 'expansionist',\n                reputation: 25,\n                stance: DiplomaticStance.Friendly,\n                trustLevel: 70,\n                power: 85,\n                territory: ['sol_system', 'alpha_centauri', 'proxima_station'],\n                resources: {\n                    military: 80,\n                    economic: 90,\n                    technological: 85,\n                    influence: 75\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 30,\n                    cooperation: 80,\n                    trustworthiness: 85,\n                    pride: 60,\n                    greed: 40,\n                    xenophobia: 20\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'sol_system'\n            },\n            {\n                id: 'zephyrian_empire',\n                name: 'Zephyrian Empire',\n                type: FactionType.Aliens,\n                description: 'Ancient alien empire with advanced technology',\n                government: 'autocracy',\n                ideology: 'isolationist',\n                reputation: -10,\n                stance: DiplomaticStance.Neutral,\n                trustLevel: 45,\n                power: 95,\n                territory: ['zephyr_prime', 'nebula_omega', 'crystal_worlds'],\n                resources: {\n                    military: 90,\n                    economic: 70,\n                    technological: 100,\n                    influence: 60\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 50,\n                    cooperation: 30,\n                    trustworthiness: 60,\n                    pride: 90,\n                    greed: 20,\n                    xenophobia: 70\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'zephyr_prime'\n            },\n            {\n                id: 'crimson_cartel',\n                name: 'Crimson Cartel',\n                type: FactionType.Pirates,\n                description: 'Notorious pirate confederation',\n                government: 'anarchy',\n                ideology: 'militaristic',\n                reputation: -60,\n                stance: DiplomaticStance.Hostile,\n                trustLevel: 15,\n                power: 45,\n                territory: ['asteroid_belt_7', 'rogue_station'],\n                resources: {\n                    military: 70,\n                    economic: 40,\n                    technological: 30,\n                    influence: 25\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 85,\n                    cooperation: 20,\n                    trustworthiness: 25,\n                    pride: 70,\n                    greed: 90,\n                    xenophobia: 40\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'asteroid_belt_7'\n            },\n            {\n                id: 'hegemony_corp',\n                name: 'Hegemony Corporation',\n                type: FactionType.Corporate,\n                description: 'Mega-corporation controlling trade routes',\n                government: 'oligarchy',\n                ideology: 'commercial',\n                reputation: 15,\n                stance: DiplomaticStance.Neutral,\n                trustLevel: 55,\n                power: 75,\n                territory: ['trade_hub_alpha', 'mining_sector_12'],\n                resources: {\n                    military: 50,\n                    economic: 100,\n                    technological: 70,\n                    influence: 80\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 40,\n                    cooperation: 60,\n                    trustworthiness: 50,\n                    pride: 50,\n                    greed: 85,\n                    xenophobia: 30\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'trade_hub_alpha'\n            },\n            {\n                id: 'void_seekers',\n                name: 'Void Seekers',\n                type: FactionType.Religious,\n                description: 'Mystical order seeking ancient knowledge',\n                government: 'theocracy',\n                ideology: 'pacifist',\n                reputation: 5,\n                stance: DiplomaticStance.Neutral,\n                trustLevel: 75,\n                power: 30,\n                territory: ['sanctuary_worlds'],\n                resources: {\n                    military: 20,\n                    economic: 40,\n                    technological: 60,\n                    influence: 70\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 10,\n                    cooperation: 70,\n                    trustworthiness: 90,\n                    pride: 40,\n                    greed: 10,\n                    xenophobia: 5\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'sanctuary_worlds'\n            },\n            {\n                id: 'liberation_front',\n                name: 'Liberation Front',\n                type: FactionType.Rebels,\n                description: 'Revolutionary movement fighting oppression',\n                government: 'democracy',\n                ideology: 'militaristic',\n                reputation: -20,\n                stance: DiplomaticStance.Unfriendly,\n                trustLevel: 40,\n                power: 35,\n                territory: ['frontier_colonies'],\n                resources: {\n                    military: 60,\n                    economic: 30,\n                    technological: 40,\n                    influence: 50\n                },\n                treaties: [],\n                recentActions: [],\n                personality: {\n                    aggression: 70,\n                    cooperation: 50,\n                    trustworthiness: 60,\n                    pride: 80,\n                    greed: 30,\n                    xenophobia: 35\n                },\n                isActive: true,\n                lastContact: 0,\n                homeSystem: 'frontier_colonies'\n            }\n        ];\n        \n        factions.forEach(faction => {\n            this.factions.set(faction.id, faction);\n        });\n        \n        this.logger.info(`🏛️ Initialized ${factions.length} major factions`);\n    }\n\n    /**\n     * Initialize player faction\n     */\n    private initializePlayerFaction(): void {\n        const playerFaction: Faction = {\n            id: this.PLAYER_FACTION_ID,\n            name: 'Independent Captain',\n            type: FactionType.Independent,\n            description: 'Freelance spaceship captain',\n            government: 'democracy',\n            ideology: 'commercial',\n            reputation: 0,\n            stance: DiplomaticStance.Neutral,\n            trustLevel: 50,\n            power: 25,\n            territory: [],\n            resources: {\n                military: 30,\n                economic: 40,\n                technological: 35,\n                influence: 20\n            },\n            treaties: [],\n            recentActions: [],\n            personality: {\n                aggression: 40,\n                cooperation: 60,\n                trustworthiness: 70,\n                pride: 50,\n                greed: 50,\n                xenophobia: 20\n            },\n            isActive: true,\n            lastContact: Date.now(),\n            homeSystem: 'starting_system'\n        };\n        \n        this.factions.set(this.PLAYER_FACTION_ID, playerFaction);\n    }\n\n    /**\n     * Modify reputation with faction\n     */\n    modifyReputation(factionId: string, change: number, reason: string): void {\n        const faction = this.factions.get(factionId);\n        if (!faction) return;\n        \n        const oldReputation = faction.reputation;\n        faction.reputation = Math.max(-100, Math.min(100, faction.reputation + change));\n        \n        // Update diplomatic stance based on new reputation\n        faction.stance = this.calculateDiplomaticStance(faction.reputation);\n        \n        // Record diplomatic action\n        this.recordDiplomaticAction({\n            type: 'contact',\n            actor: this.PLAYER_FACTION_ID,\n            target: factionId,\n            description: reason,\n            reputationChange: change,\n            successful: change > 0\n        });\n        \n        this.events.onReputationChanged?.(factionId, oldReputation, faction.reputation);\n        \n        this.logger.info(`🤝 Reputation changed: ${faction.name} ${oldReputation} → ${faction.reputation} (${reason})`);\n    }\n\n    /**\n     * Calculate diplomatic stance from reputation\n     */\n    private calculateDiplomaticStance(reputation: number): DiplomaticStance {\n        if (reputation >= 80) return DiplomaticStance.Allied;\n        if (reputation >= 40) return DiplomaticStance.Friendly;\n        if (reputation >= -39) return DiplomaticStance.Neutral;\n        if (reputation >= -79) return DiplomaticStance.Unfriendly;\n        return DiplomaticStance.Hostile;\n    }\n\n    /**\n     * Record diplomatic action\n     */\n    private recordDiplomaticAction(actionData: Omit<DiplomaticAction, 'id' | 'timestamp'>): void {\n        const action: DiplomaticAction = {\n            id: `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            timestamp: Date.now(),\n            ...actionData\n        };\n        \n        this.diplomaticActions.push(action);\n        \n        // Add to faction's recent actions\n        const targetFaction = this.factions.get(actionData.target);\n        if (targetFaction) {\n            targetFaction.recentActions.push(action);\n            \n            // Keep only recent actions (last 10)\n            if (targetFaction.recentActions.length > 10) {\n                targetFaction.recentActions.shift();\n            }\n        }\n    }\n\n    /**\n     * Start negotiation with faction\n     */\n    startNegotiation(\n        factionId: string, \n        type: NegotiationType, \n        playerOffer: OfferTerm[],\n        playerSkill: number = 50,\n        crewBonus: number = 0\n    ): NegotiationSession | null {\n        const faction = this.factions.get(factionId);\n        if (!faction) {\n            this.logger.warn('Cannot start negotiation: faction not found', { factionId });\n            return null;\n        }\n        \n        // Check if negotiation is possible\n        if (faction.stance === DiplomaticStance.War) {\n            this.logger.warn('Cannot negotiate: factions at war', { factionId });\n            return null;\n        }\n        \n        const sessionId = `negotiation_${Date.now()}_${factionId}`;\n        const reputationModifier = Math.floor(faction.reputation / 10); // -10 to +10\n        \n        const session: NegotiationSession = {\n            id: sessionId,\n            participants: [this.PLAYER_FACTION_ID, factionId],\n            type,\n            currentOffer: {\n                proposer: this.PLAYER_FACTION_ID,\n                terms: playerOffer,\n                totalValue: this.calculateOfferValue(playerOffer),\n                priority: this.calculateOfferPriority(type, faction)\n            },\n            rounds: 0,\n            maxRounds: 5,\n            status: 'active',\n            playerSkill,\n            crewBonus,\n            reputationModifier\n        };\n        \n        // Generate AI counter-offer\n        session.counterOffer = this.generateCounterOffer(session, faction);\n        \n        this.negotiations.set(sessionId, session);\n        this.events.onNegotiationStarted?.(session);\n        \n        this.logger.info(`💬 Negotiation started: ${faction.name} - ${type}`, {\n            playerValue: session.currentOffer.totalValue,\n            aiValue: session.counterOffer?.totalValue || 0\n        });\n        \n        return session;\n    }\n\n    /**\n     * Calculate offer value for AI evaluation\n     */\n    private calculateOfferValue(terms: OfferTerm[]): number {\n        let totalValue = 0;\n        \n        terms.forEach(term => {\n            switch (term.type) {\n                case 'credits':\n                    totalValue += term.value;\n                    break;\n                case 'items':\n                    totalValue += term.value * 10; // Items worth more than credits\n                    break;\n                case 'information':\n                    totalValue += term.value * 20; // Information is valuable\n                    break;\n                case 'technology':\n                    totalValue += term.value * 50; // Technology is very valuable\n                    break;\n                case 'territory':\n                    totalValue += term.value * 100; // Territory is extremely valuable\n                    break;\n                case 'service':\n                    totalValue += term.value * 5;\n                    break;\n                case 'protection':\n                    totalValue += term.value * 15;\n                    break;\n            }\n        });\n        \n        return totalValue;\n    }\n\n    /**\n     * Calculate how much faction wants this type of deal\n     */\n    private calculateOfferPriority(type: NegotiationType, faction: Faction): number {\n        let priority = 50; // Base priority\n        \n        switch (type) {\n            case NegotiationType.Trade:\n                priority += faction.personality.greed * 0.3;\n                priority += faction.resources.economic * 0.2;\n                break;\n            case NegotiationType.Alliance:\n                priority += faction.personality.cooperation * 0.4;\n                priority -= faction.personality.pride * 0.2;\n                break;\n            case NegotiationType.Technology:\n                priority += (100 - faction.resources.technological) * 0.3;\n                priority += faction.personality.cooperation * 0.2;\n                break;\n            case NegotiationType.SafePassage:\n                priority += faction.personality.trustworthiness * 0.3;\n                priority -= faction.personality.aggression * 0.2;\n                break;\n            case NegotiationType.Information:\n                priority += faction.personality.cooperation * 0.2;\n                priority += faction.resources.influence * 0.1;\n                break;\n        }\n        \n        // Reputation affects priority\n        priority += faction.reputation * 0.2;\n        \n        return Math.max(0, Math.min(100, priority));\n    }\n\n    /**\n     * Generate AI counter-offer\n     */\n    private generateCounterOffer(session: NegotiationSession, faction: Faction): NegotiationOffer {\n        const playerOfferValue = session.currentOffer.totalValue;\n        const factionDemand = this.calculateFactionDemand(session, faction);\n        \n        const counterTerms: OfferTerm[] = [];\n        \n        // AI wants something in return\n        if (factionDemand > playerOfferValue) {\n            const difference = factionDemand - playerOfferValue;\n            \n            // Request credits if greedy\n            if (faction.personality.greed > 60) {\n                counterTerms.push({\n                    type: 'credits',\n                    giver: this.PLAYER_FACTION_ID,\n                    receiver: faction.id,\n                    description: `Additional payment of ${difference} credits`,\n                    value: difference\n                });\n            }\n            // Request information if influence-focused\n            else if (faction.resources.influence > 70) {\n                counterTerms.push({\n                    type: 'information',\n                    giver: this.PLAYER_FACTION_ID,\n                    receiver: faction.id,\n                    description: 'Strategic intelligence data',\n                    value: Math.floor(difference / 20)\n                });\n            }\n            // Request service\n            else {\n                counterTerms.push({\n                    type: 'service',\n                    giver: this.PLAYER_FACTION_ID,\n                    receiver: faction.id,\n                    description: 'Future service commitment',\n                    value: Math.floor(difference / 5)\n                });\n            }\n        }\n        \n        // AI offers something back based on negotiation type\n        if (session.type === NegotiationType.Trade) {\n            counterTerms.push({\n                type: 'credits',\n                giver: faction.id,\n                receiver: this.PLAYER_FACTION_ID,\n                description: `Trade payment`,\n                value: Math.floor(playerOfferValue * 0.8)\n            });\n        } else if (session.type === NegotiationType.Information) {\n            counterTerms.push({\n                type: 'information',\n                giver: faction.id,\n                receiver: this.PLAYER_FACTION_ID,\n                description: 'Classified intelligence',\n                value: Math.floor(playerOfferValue / 20)\n            });\n        }\n        \n        return {\n            proposer: faction.id,\n            terms: counterTerms,\n            totalValue: this.calculateOfferValue(counterTerms),\n            priority: session.currentOffer.priority\n        };\n    }\n\n    /**\n     * Calculate what faction demands in negotiation\n     */\n    private calculateFactionDemand(session: NegotiationSession, faction: Faction): number {\n        let baseDemand = session.currentOffer.totalValue;\n        \n        // Faction personality affects demands\n        baseDemand *= (1 + faction.personality.greed / 200); // 0.5x to 1.5x\n        baseDemand *= (1 + faction.personality.pride / 300); // 0.67x to 1.33x\n        \n        // Reputation affects demands\n        baseDemand *= (1 - faction.reputation / 200); // Better rep = lower demands\n        \n        // Power imbalance affects demands\n        const playerFaction = this.factions.get(this.PLAYER_FACTION_ID)!;\n        const powerRatio = faction.power / playerFaction.power;\n        baseDemand *= Math.pow(powerRatio, 0.3); // Powerful factions demand more\n        \n        return Math.floor(baseDemand);\n    }\n\n    /**\n     * Continue negotiation with player response\n     */\n    continueNegotiation(\n        sessionId: string, \n        acceptCounter: boolean, \n        newOffer?: OfferTerm[]\n    ): NegotiationSession | null {\n        const session = this.negotiations.get(sessionId);\n        if (!session || session.status !== 'active') return null;\n        \n        const faction = this.factions.get(session.participants[1]);\n        if (!faction) return null;\n        \n        session.rounds++;\n        \n        if (acceptCounter && session.counterOffer) {\n            // Player accepted AI's counter-offer\n            session.status = 'successful';\n            this.applyNegotiationResults(session, session.counterOffer);\n            this.events.onNegotiationCompleted?.(session, true);\n            \n            this.logger.info(`✅ Negotiation successful: ${faction.name}`);\n            \n        } else if (newOffer && session.rounds < session.maxRounds) {\n            // Player made counter-offer\n            session.currentOffer = {\n                proposer: this.PLAYER_FACTION_ID,\n                terms: newOffer,\n                totalValue: this.calculateOfferValue(newOffer),\n                priority: session.currentOffer.priority\n            };\n            \n            // AI evaluates new offer\n            const acceptChance = this.calculateAIAcceptanceChance(session, faction);\n            \n            if (Math.random() < acceptChance) {\n                session.status = 'successful';\n                this.applyNegotiationResults(session, session.currentOffer);\n                this.events.onNegotiationCompleted?.(session, true);\n                \n                this.logger.info(`✅ AI accepted negotiation: ${faction.name}`);\n            } else {\n                // Generate new counter-offer\n                session.counterOffer = this.generateCounterOffer(session, faction);\n            }\n            \n        } else {\n            // Negotiation failed\n            session.status = 'failed';\n            this.modifyReputation(faction.id, -5, 'Failed negotiation');\n            this.events.onNegotiationCompleted?.(session, false);\n            \n            this.logger.info(`❌ Negotiation failed: ${faction.name}`);\n        }\n        \n        return session;\n    }\n\n    /**\n     * Calculate AI acceptance chance for player offer\n     */\n    private calculateAIAcceptanceChance(session: NegotiationSession, faction: Faction): number {\n        const offerValue = session.currentOffer.totalValue;\n        const demandValue = this.calculateFactionDemand(session, faction);\n        \n        let acceptanceChance = 0.5; // Base 50%\n        \n        // Value comparison\n        const valueRatio = offerValue / demandValue;\n        acceptanceChance += (valueRatio - 1) * 0.3; // ±30% based on value\n        \n        // Faction personality\n        acceptanceChance += faction.personality.cooperation / 200; // +0% to +50%\n        acceptanceChance -= faction.personality.pride / 300; // -0% to -33%\n        \n        // Reputation bonus\n        acceptanceChance += faction.reputation / 200; // -50% to +50%\n        \n        // Player skill bonus\n        acceptanceChance += session.playerSkill / 200; // +0% to +50%\n        acceptanceChance += session.crewBonus / 100; // Crew diplomatic bonuses\n        \n        // Negotiation rounds penalty (AI gets impatient)\n        acceptanceChance -= session.rounds * 0.1;\n        \n        return Math.max(0.05, Math.min(0.95, acceptanceChance));\n    }\n\n    /**\n     * Apply results of successful negotiation\n     */\n    private applyNegotiationResults(session: NegotiationSession, agreedOffer: NegotiationOffer): void {\n        // Apply reputation bonus for successful negotiation\n        const otherFaction = session.participants.find(id => id !== this.PLAYER_FACTION_ID);\n        if (otherFaction) {\n            this.modifyReputation(otherFaction, 10, 'Successful negotiation');\n        }\n        \n        // TODO: Apply actual offer terms (credits, items, etc.)\n        // This would integrate with inventory, research, etc.\n        \n        this.recordDiplomaticAction({\n            type: 'trade',\n            actor: this.PLAYER_FACTION_ID,\n            target: otherFaction!,\n            description: `Successful ${session.type} negotiation`,\n            reputationChange: 10,\n            successful: true\n        });\n    }\n\n    /**\n     * Generate random diplomatic encounter\n     */\n    generateRandomEncounter(playerPosition: { x: number, y: number }): DiplomaticEncounter | null {\n        const activeFactions = Array.from(this.factions.values()).filter(f => \n            f.id !== this.PLAYER_FACTION_ID && f.isActive\n        );\n        \n        if (activeFactions.length === 0) return null;\n        \n        const faction = activeFactions[Math.floor(Math.random() * activeFactions.length)];\n        const encounterTypes = ['routine_patrol', 'distress_call', 'trade_opportunity', 'territorial_dispute'];\n        const encounterType = encounterTypes[Math.floor(Math.random() * encounterTypes.length)] as DiplomaticEncounter['type'];\n        \n        const encounter: DiplomaticEncounter = {\n            id: `encounter_${Date.now()}_${faction.id}`,\n            factionId: faction.id,\n            type: encounterType,\n            location: { ...playerPosition },\n            description: this.generateEncounterDescription(faction, encounterType),\n            availableActions: this.generateEncounterActions(faction, encounterType),\n            consequences: [],\n            isActive: true,\n            timestamp: Date.now()\n        };\n        \n        this.encounters.set(encounter.id, encounter);\n        this.events.onEncounterGenerated?.(encounter);\n        \n        this.logger.info(`🎭 Diplomatic encounter: ${faction.name} - ${encounterType}`);\n        \n        return encounter;\n    }\n\n    /**\n     * Generate encounter description\n     */\n    private generateEncounterDescription(faction: Faction, type: DiplomaticEncounter['type']): string {\n        const descriptions = {\n            routine_patrol: [\n                `A ${faction.name} patrol vessel approaches your ship`,\n                `${faction.name} forces are conducting routine inspections in this sector`,\n                `You encounter a ${faction.name} security checkpoint`\n            ],\n            distress_call: [\n                `A ${faction.name} ship is transmitting a distress signal`,\n                `${faction.name} vessel appears to be disabled and requesting assistance`,\n                `Emergency beacon from ${faction.name} ship detected`\n            ],\n            trade_opportunity: [\n                `${faction.name} trader wishes to conduct business`,\n                `A ${faction.name} merchant convoy has goods to trade`,\n                `${faction.name} commercial vessel offers trade opportunity`\n            ],\n            territorial_dispute: [\n                `${faction.name} claims this space as their territory`,\n                `${faction.name} forces demand you leave their space immediately`,\n                `You have entered disputed ${faction.name} territory`\n            ],\n            first_contact: [\n                `First contact with unknown ${faction.name} vessel`,\n                `${faction.name} ship of unknown configuration approaches`,\n                `Unprecedented encounter with ${faction.name} representatives`\n            ]\n        };\n        \n        const typeDescriptions = descriptions[type] || descriptions.routine_patrol;\n        return typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)];\n    }\n\n    /**\n     * Generate encounter actions\n     */\n    private generateEncounterActions(faction: Faction, type: DiplomaticEncounter['type']): EncounterAction[] {\n        const baseActions: EncounterAction[] = [\n            {\n                id: 'diplomatic_greeting',\n                name: 'Diplomatic Greeting',\n                description: 'Approach peacefully and initiate diplomatic contact',\n                skillCheck: { skill: 'communications', difficulty: 30 },\n                consequences: [\n                    {\n                        type: 'reputation',\n                        factionId: faction.id,\n                        value: 5,\n                        description: 'Peaceful approach improves relations'\n                    }\n                ]\n            },\n            {\n                id: 'ignore_encounter',\n                name: 'Ignore and Continue',\n                description: 'Ignore the encounter and continue on your course',\n                consequences: [\n                    {\n                        type: 'reputation',\n                        factionId: faction.id,\n                        value: -2,\n                        description: 'Ignoring faction vessel causes minor offense'\n                    }\n                ]\n            }\n        ];\n        \n        // Add type-specific actions\n        switch (type) {\n            case 'distress_call':\n                baseActions.push({\n                    id: 'offer_assistance',\n                    name: 'Offer Assistance',\n                    description: 'Provide aid to the distressed vessel',\n                    skillCheck: { skill: 'engineering', difficulty: 40 },\n                    consequences: [\n                        {\n                            type: 'reputation',\n                            factionId: faction.id,\n                            value: 15,\n                            description: 'Humanitarian aid greatly improves relations'\n                        },\n                        {\n                            type: 'resources',\n                            factionId: faction.id,\n                            value: 100,\n                            description: 'Faction rewards your assistance'\n                        }\n                    ]\n                });\n                break;\n                \n            case 'trade_opportunity':\n                baseActions.push({\n                    id: 'initiate_trade',\n                    name: 'Initiate Trade',\n                    description: 'Begin trade negotiations',\n                    consequences: [\n                        {\n                            type: 'trade_opportunity',\n                            factionId: faction.id,\n                            value: 1,\n                            description: 'Opens trade dialogue'\n                        }\n                    ]\n                });\n                break;\n                \n            case 'territorial_dispute':\n                baseActions.push({\n                    id: 'negotiate_passage',\n                    name: 'Negotiate Safe Passage',\n                    description: 'Attempt to negotiate peaceful passage through their territory',\n                    requirements: [\n                        { type: 'reputation', value: 0, description: 'Neutral or better standing required' }\n                    ],\n                    skillCheck: { skill: 'communications', difficulty: 50 },\n                    consequences: [\n                        {\n                            type: 'reputation',\n                            factionId: faction.id,\n                            value: 8,\n                            description: 'Successful negotiation improves relations'\n                        }\n                    ]\n                });\n                break;\n        }\n        \n        // Add hostile option if reputation is very low\n        if (faction.reputation < -50) {\n            baseActions.push({\n                id: 'threaten_withdrawal',\n                name: 'Threaten Force',\n                description: 'Threaten to use force if they do not withdraw',\n                requirements: [\n                    { type: 'crew_skill', value: 60, description: 'High combat skill required' }\n                ],\n                consequences: [\n                    {\n                        type: 'combat',\n                        factionId: faction.id,\n                        value: 1,\n                        description: 'May escalate to combat'\n                    },\n                    {\n                        type: 'reputation',\n                        factionId: faction.id,\n                        value: -20,\n                        description: 'Threatening behavior severely damages relations'\n                    }\n                ]\n            });\n        }\n        \n        return baseActions;\n    }\n\n    /**\n     * Resolve encounter action\n     */\n    resolveEncounterAction(encounterId: string, actionId: string, skillValue: number = 50): EncounterConsequence[] {\n        const encounter = this.encounters.get(encounterId);\n        if (!encounter || !encounter.isActive) return [];\n        \n        const action = encounter.availableActions.find(a => a.id === actionId);\n        if (!action) return [];\n        \n        const consequences: EncounterConsequence[] = [...action.consequences];\n        \n        // Handle skill check\n        if (action.skillCheck) {\n            const success = skillValue >= action.skillCheck.difficulty;\n            \n            if (success) {\n                // Bonus for skill success\n                consequences.forEach(c => {\n                    if (c.type === 'reputation' && c.value > 0) {\n                        c.value = Math.floor(c.value * 1.5); // 50% bonus\n                    }\n                });\n            } else {\n                // Penalty for skill failure\n                consequences.forEach(c => {\n                    if (c.type === 'reputation') {\n                        c.value = Math.floor(c.value * 0.5); // 50% penalty\n                    }\n                });\n            }\n        }\n        \n        // Apply consequences\n        consequences.forEach(consequence => {\n            switch (consequence.type) {\n                case 'reputation':\n                    this.modifyReputation(consequence.factionId, consequence.value, consequence.description);\n                    break;\n                case 'combat':\n                    // TODO: Trigger combat encounter\n                    break;\n                case 'trade_opportunity':\n                    // TODO: Open trade interface\n                    break;\n            }\n        });\n        \n        // Mark encounter as resolved\n        encounter.isActive = false;\n        encounter.consequences = consequences;\n        \n        if (consequences.some(c => c.type === 'combat')) {\n            encounter.resolution = 'hostile';\n        } else if (consequences.some(c => c.type === 'reputation' && c.value > 0)) {\n            encounter.resolution = 'beneficial';\n        } else {\n            encounter.resolution = 'neutral';\n        }\n        \n        this.logger.info(`🎯 Encounter resolved: ${actionId}`, {\n            consequences: consequences.length,\n            resolution: encounter.resolution\n        });\n        \n        return consequences;\n    }\n\n    /**\n     * Get faction by ID\n     */\n    getFaction(factionId: string): Faction | null {\n        return this.factions.get(factionId) || null;\n    }\n\n    /**\n     * Get all factions\n     */\n    getAllFactions(): Faction[] {\n        return Array.from(this.factions.values()).filter(f => f.id !== this.PLAYER_FACTION_ID);\n    }\n\n    /**\n     * Get player faction\n     */\n    getPlayerFaction(): Faction {\n        return this.factions.get(this.PLAYER_FACTION_ID)!;\n    }\n\n    /**\n     * Get active negotiations\n     */\n    getActiveNegotiations(): NegotiationSession[] {\n        return Array.from(this.negotiations.values()).filter(n => n.status === 'active');\n    }\n\n    /**\n     * Get active encounters\n     */\n    getActiveEncounters(): DiplomaticEncounter[] {\n        return Array.from(this.encounters.values()).filter(e => e.isActive);\n    }\n\n    /**\n     * Get recent diplomatic actions\n     */\n    getRecentDiplomaticActions(limit: number = 10): DiplomaticAction[] {\n        return this.diplomaticActions\n            .sort((a, b) => b.timestamp - a.timestamp)\n            .slice(0, limit);\n    }\n\n    /**\n     * Get diplomacy statistics\n     */\n    getDiplomacyStats(): {\n        totalFactions: number;\n        alliedFactions: number;\n        hostileFactions: number;\n        activeNegotiations: number;\n        activeTreaties: number;\n        totalEncounters: number;\n        averageReputation: number;\n    } {\n        const factions = this.getAllFactions();\n        const allied = factions.filter(f => f.stance === DiplomaticStance.Allied).length;\n        const hostile = factions.filter(f => f.stance === DiplomaticStance.Hostile || f.stance === DiplomaticStance.War).length;\n        const avgReputation = factions.reduce((sum, f) => sum + f.reputation, 0) / factions.length;\n        \n        return {\n            totalFactions: factions.length,\n            alliedFactions: allied,\n            hostileFactions: hostile,\n            activeNegotiations: this.getActiveNegotiations().length,\n            activeTreaties: Array.from(this.treaties.values()).filter(t => t.status === 'active').length,\n            totalEncounters: this.encounters.size,\n            averageReputation: Math.round(avgReputation)\n        };\n    }\n\n    /**\n     * Save diplomacy data\n     */\n    saveDiplomacyData(): any {\n        return {\n            factions: Array.from(this.factions.entries()),\n            treaties: Array.from(this.treaties.entries()),\n            negotiations: Array.from(this.negotiations.entries()),\n            encounters: Array.from(this.encounters.entries()),\n            diplomaticActions: this.diplomaticActions\n        };\n    }\n\n    /**\n     * Load diplomacy data\n     */\n    loadDiplomacyData(data: any): void {\n        if (data.factions) {\n            this.factions = new Map(data.factions);\n        }\n        if (data.treaties) {\n            this.treaties = new Map(data.treaties);\n        }\n        if (data.negotiations) {\n            this.negotiations = new Map(data.negotiations);\n        }\n        if (data.encounters) {\n            this.encounters = new Map(data.encounters);\n        }\n        if (data.diplomaticActions) {\n            this.diplomaticActions = data.diplomaticActions;\n        }\n        \n        this.logger.info('🤝 Diplomacy data loaded', {\n            factions: this.factions.size,\n            treaties: this.treaties.size,\n            encounters: this.encounters.size\n        });\n    }\n}","/**\n * Alien AI System\n * Advanced alien behaviors, species characteristics, and interactions\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\nimport { Faction, DiplomaticStance } from '@diplomacy/DiplomacySystem';\n\nexport enum AlienSpecies {\n    Zephyrian = 'zephyrian',\n    Crystalline = 'crystalline',\n    Ethereal = 'ethereal',\n    Mechanical = 'mechanical',\n    Hive = 'hive',\n    Energy = 'energy',\n    Aquatic = 'aquatic',\n    Silicon = 'silicon'\n}\n\nexport enum AlienBehaviorType {\n    Peaceful = 'peaceful',\n    Aggressive = 'aggressive',\n    Curious = 'curious',\n    Isolationist = 'isolationist',\n    Expansionist = 'expansionist',\n    Trader = 'trader',\n    Scholar = 'scholar',\n    Guardian = 'guardian'\n}\n\nexport enum CommunicationMethod {\n    Verbal = 'verbal',\n    Telepathic = 'telepathic',\n    Chemical = 'chemical',\n    Light = 'light',\n    Electromagnetic = 'electromagnetic',\n    Quantum = 'quantum',\n    Gestural = 'gestural',\n    Mathematical = 'mathematical'\n}\n\nexport interface AlienSpeciesProfile {\n    species: AlienSpecies;\n    name: string;\n    description: string;\n    \n    // Physical characteristics\n    physiology: {\n        size: 'tiny' | 'small' | 'medium' | 'large' | 'huge';\n        composition: 'organic' | 'silicon' | 'crystalline' | 'energy' | 'mechanical';\n        lifespan: number; // Years\n        temperature: 'cryogenic' | 'cold' | 'temperate' | 'hot' | 'plasma';\n        environment: 'vacuum' | 'atmosphere' | 'liquid' | 'plasma' | 'quantum';\n    };\n    \n    // Cultural traits\n    culture: {\n        government: 'collective' | 'hierarchical' | 'anarchic' | 'democratic' | 'theocratic';\n        values: string[];\n        taboos: string[];\n        rituals: string[];\n        artForms: string[];\n    };\n    \n    // Communication\n    communication: {\n        primary: CommunicationMethod;\n        secondary: CommunicationMethod[];\n        linguisticComplexity: number; // 1-10\n        translationDifficulty: number; // 1-10\n        emotionalRange: string[];\n    };\n    \n    // Technology\n    technology: {\n        level: number; // 1-10\n        specializations: string[];\n        weaknesses: string[];\n        uniqueTech: string[];\n        energySource: string;\n    };\n    \n    // Psychology\n    psychology: {\n        intelligence: number; // 1-10\n        emotionalStability: number; // 1-10\n        socialComplexity: number; // 1-10\n        memoryType: 'short' | 'long' | 'perfect' | 'collective';\n        decisionMaking: 'logical' | 'emotional' | 'intuitive' | 'collective';\n    };\n    \n    // Behavior patterns\n    behaviorPatterns: {\n        primary: AlienBehaviorType;\n        secondary: AlienBehaviorType[];\n        aggressionTriggers: string[];\n        friendshipFactors: string[];\n        fearFactors: string[];\n    };\n}\n\nexport interface AlienEncounter {\n    id: string;\n    species: AlienSpecies;\n    type: 'first_contact' | 'routine' | 'scientific' | 'territorial' | 'distress' | 'probe';\n    location: { x: number, y: number };\n    \n    // Encounter state\n    phase: 'approach' | 'contact' | 'communication' | 'interaction' | 'resolution';\n    intensity: number; // 0-100\n    suspicion: number; // 0-100\n    interest: number; // 0-100\n    \n    // Communication state\n    communicationEstablished: boolean;\n    languageBarrier: number; // 0-100, reduces over time\n    translationProgress: number; // 0-100\n    culturalUnderstanding: number; // 0-100\n    \n    // Interaction history\n    actions: AlienAction[];\n    responses: AlienResponse[];\n    \n    // Outcome tracking\n    success: boolean;\n    knowledge_gained: string[];\n    technology_exchanged: string[];\n    cultural_insights: string[];\n    \n    timestamp: number;\n    duration: number;\n}\n\nexport interface AlienAction {\n    id: string;\n    type: 'scan' | 'communicate' | 'approach' | 'retreat' | 'gift' | 'demonstrate' | 'threaten' | 'probe';\n    description: string;\n    timestamp: number;\n    \n    // Action parameters\n    intensity: number;\n    complexity: number;\n    risk: number;\n    \n    // Expected outcomes\n    expectedResponse: string[];\n    culturalContext?: string;\n}\n\nexport interface AlienResponse {\n    actionId: string;\n    type: 'positive' | 'negative' | 'neutral' | 'confused' | 'curious' | 'hostile';\n    description: string;\n    intensity: number;\n    \n    // Response context\n    culturalReason?: string;\n    technologicalFactor?: string;\n    psychologicalState: string;\n}\n\nexport interface AlienKnowledge {\n    species: AlienSpecies;\n    \n    // Known information\n    physicalTraits: string[];\n    culturalTraits: string[];\n    technologicalCapabilities: string[];\n    communicationMethods: string[];\n    behaviorPatterns: string[];\n    \n    // Understanding levels\n    languageComprehension: number; // 0-100\n    culturalUnderstanding: number; // 0-100\n    technologicalUnderstanding: number; // 0-100\n    psychologicalProfile: number; // 0-100\n    \n    // Interaction history\n    totalContacts: number;\n    successfulCommunications: number;\n    hostileEncounters: number;\n    peacefulEncounters: number;\n    \n    // Research progress\n    researchPoints: number;\n    discoveredSecrets: string[];\n    unlockedTechnologies: string[];\n    \n    lastUpdate: number;\n}\n\nexport interface AlienEvents {\n    onFirstContact?: (species: AlienSpecies, encounter: AlienEncounter) => void;\n    onCommunicationBreakthrough?: (species: AlienSpecies, method: CommunicationMethod) => void;\n    onTechnologyDiscovered?: (species: AlienSpecies, technology: string) => void;\n    onCulturalInsight?: (species: AlienSpecies, insight: string) => void;\n    onHostileAction?: (species: AlienSpecies, action: AlienAction) => void;\n    onAllianceOpportunity?: (species: AlienSpecies) => void;\n}\n\nexport class AlienAI {\n    private speciesProfiles: Map<AlienSpecies, AlienSpeciesProfile> = new Map();\n    private activeEncounters: Map<string, AlienEncounter> = new Map();\n    private knowledgeBase: Map<AlienSpecies, AlienKnowledge> = new Map();\n    \n    // AI behavior state\n    private encounterPatterns: Map<AlienSpecies, number[]> = new Map();\n    private adaptiveBehaviors: Map<AlienSpecies, Map<string, number>> = new Map();\n    \n    private events: AlienEvents;\n    private logger: Logger;\n\n    constructor(events: AlienEvents = {}) {\n        this.logger = new Logger('AlienAI');\n        this.events = events;\n        \n        this.initializeSpeciesProfiles();\n        this.initializeKnowledgeBase();\n        \n        this.logger.info('👽 Alien AI system initialized');\n    }\n\n    /**\n     * Initialize alien species profiles\n     */\n    private initializeSpeciesProfiles(): void {\n        const profiles: AlienSpeciesProfile[] = [\n            {\n                species: AlienSpecies.Zephyrian,\n                name: 'Zephyrians',\n                description: 'Ancient crystalline beings with advanced psionic abilities',\n                physiology: {\n                    size: 'large',\n                    composition: 'crystalline',\n                    lifespan: 10000,\n                    temperature: 'cold',\n                    environment: 'atmosphere'\n                },\n                culture: {\n                    government: 'hierarchical',\n                    values: ['knowledge', 'tradition', 'order', 'perfection'],\n                    taboos: ['chaos', 'destruction of crystals', 'emotional outbursts'],\n                    rituals: ['crystal resonance ceremonies', 'memory sharing'],\n                    artForms: ['harmonic sculptures', 'light patterns', 'crystal gardens']\n                },\n                communication: {\n                    primary: CommunicationMethod.Telepathic,\n                    secondary: [CommunicationMethod.Light, CommunicationMethod.Electromagnetic],\n                    linguisticComplexity: 9,\n                    translationDifficulty: 8,\n                    emotionalRange: ['serenity', 'contemplation', 'ancient_wisdom', 'ethereal_beauty']\n                },\n                technology: {\n                    level: 10,\n                    specializations: ['psionics', 'crystalline_tech', 'energy_manipulation', 'consciousness_transfer'],\n                    weaknesses: ['mechanical_systems', 'rapid_adaptation'],\n                    uniqueTech: ['crystal_matrices', 'psionic_amplifiers', 'temporal_perception'],\n                    energySource: 'stellar_radiation'\n                },\n                psychology: {\n                    intelligence: 10,\n                    emotionalStability: 8,\n                    socialComplexity: 9,\n                    memoryType: 'perfect',\n                    decisionMaking: 'logical'\n                },\n                behaviorPatterns: {\n                    primary: AlienBehaviorType.Scholar,\n                    secondary: [AlienBehaviorType.Isolationist, AlienBehaviorType.Guardian],\n                    aggressionTriggers: ['desecration_of_knowledge', 'threat_to_crystals', 'chaos_creation'],\n                    friendshipFactors: ['respect_for_knowledge', 'peaceful_intentions', 'cultural_exchange'],\n                    fearFactors: ['entropy', 'technological_chaos', 'rapid_change']\n                }\n            },\n            {\n                species: AlienSpecies.Crystalline,\n                name: 'Silicon Entities',\n                description: 'Silicon-based life forms with networked consciousness',\n                physiology: {\n                    size: 'medium',\n                    composition: 'silicon',\n                    lifespan: 50000,\n                    temperature: 'hot',\n                    environment: 'vacuum'\n                },\n                culture: {\n                    government: 'collective',\n                    values: ['efficiency', 'logic', 'growth', 'perfection'],\n                    taboos: ['waste', 'inefficiency', 'individual_glory'],\n                    rituals: ['network_synchronization', 'crystal_growth_ceremonies'],\n                    artForms: ['geometric_patterns', 'crystal_formations', 'harmonic_frequencies']\n                },\n                communication: {\n                    primary: CommunicationMethod.Electromagnetic,\n                    secondary: [CommunicationMethod.Light, CommunicationMethod.Mathematical],\n                    linguisticComplexity: 7,\n                    translationDifficulty: 6,\n                    emotionalRange: ['collective_harmony', 'logical_satisfaction', 'growth_joy']\n                },\n                technology: {\n                    level: 9,\n                    specializations: ['crystal_tech', 'network_systems', 'quantum_computing', 'material_science'],\n                    weaknesses: ['biological_systems', 'emotional_logic'],\n                    uniqueTech: ['living_crystals', 'quantum_networks', 'self_repairing_materials'],\n                    energySource: 'geothermal'\n                },\n                psychology: {\n                    intelligence: 9,\n                    emotionalStability: 10,\n                    socialComplexity: 8,\n                    memoryType: 'collective',\n                    decisionMaking: 'logical'\n                },\n                behaviorPatterns: {\n                    primary: AlienBehaviorType.Peaceful,\n                    secondary: [AlienBehaviorType.Scholar, AlienBehaviorType.Trader],\n                    aggressionTriggers: ['network_disruption', 'crystal_destruction', 'logical_paradoxes'],\n                    friendshipFactors: ['logical_consistency', 'technological_exchange', 'mutual_benefit'],\n                    fearFactors: ['chaos', 'irrationality', 'network_isolation']\n                }\n            },\n            {\n                species: AlienSpecies.Ethereal,\n                name: 'Void Dancers',\n                description: 'Energy beings from higher dimensions',\n                physiology: {\n                    size: 'medium',\n                    composition: 'energy',\n                    lifespan: 1000000,\n                    temperature: 'plasma',\n                    environment: 'quantum'\n                },\n                culture: {\n                    government: 'anarchic',\n                    values: ['freedom', 'exploration', 'transcendence', 'beauty'],\n                    taboos: ['confinement', 'materialism', 'dimensional_barriers'],\n                    rituals: ['dimensional_dancing', 'energy_weaving', 'consciousness_expansion'],\n                    artForms: ['energy_sculptures', 'dimensional_poetry', 'temporal_music']\n                },\n                communication: {\n                    primary: CommunicationMethod.Quantum,\n                    secondary: [CommunicationMethod.Telepathic, CommunicationMethod.Electromagnetic],\n                    linguisticComplexity: 10,\n                    translationDifficulty: 10,\n                    emotionalRange: ['transcendent_joy', 'dimensional_curiosity', 'ethereal_melancholy', 'cosmic_awe']\n                },\n                technology: {\n                    level: 10,\n                    specializations: ['dimensional_tech', 'energy_manipulation', 'consciousness_tech', 'temporal_mechanics'],\n                    weaknesses: ['physical_limitations', 'material_constraints'],\n                    uniqueTech: ['dimensional_gates', 'energy_forms', 'consciousness_transfer', 'temporal_loops'],\n                    energySource: 'dimensional_rifts'\n                },\n                psychology: {\n                    intelligence: 10,\n                    emotionalStability: 5,\n                    socialComplexity: 10,\n                    memoryType: 'long',\n                    decisionMaking: 'intuitive'\n                },\n                behaviorPatterns: {\n                    primary: AlienBehaviorType.Curious,\n                    secondary: [AlienBehaviorType.Scholar, AlienBehaviorType.Peaceful],\n                    aggressionTriggers: ['dimensional_imprisonment', 'energy_disruption', 'consciousness_violation'],\n                    friendshipFactors: ['dimensional_understanding', 'energy_harmony', 'consciousness_respect'],\n                    fearFactors: ['dimensional_collapse', 'energy_drain', 'consciousness_destruction']\n                }\n            },\n            {\n                species: AlienSpecies.Hive,\n                name: 'Unity Swarm',\n                description: 'Collective insectoid intelligence with unified purpose',\n                physiology: {\n                    size: 'small',\n                    composition: 'organic',\n                    lifespan: 100,\n                    temperature: 'temperate',\n                    environment: 'atmosphere'\n                },\n                culture: {\n                    government: 'collective',\n                    values: ['unity', 'efficiency', 'expansion', 'survival'],\n                    taboos: ['individualism', 'waste', 'disloyalty'],\n                    rituals: ['queen_communion', 'hive_synchronization', 'collective_memory_sharing'],\n                    artForms: ['architectural_marvels', 'geometric_patterns', 'collective_harmonics']\n                },\n                communication: {\n                    primary: CommunicationMethod.Chemical,\n                    secondary: [CommunicationMethod.Telepathic, CommunicationMethod.Gestural],\n                    linguisticComplexity: 6,\n                    translationDifficulty: 7,\n                    emotionalRange: ['collective_purpose', 'hive_satisfaction', 'protective_fury', 'expansion_drive']\n                },\n                technology: {\n                    level: 7,\n                    specializations: ['biotechnology', 'swarm_systems', 'collective_computing', 'organic_engineering'],\n                    weaknesses: ['individual_systems', 'abstract_concepts'],\n                    uniqueTech: ['living_ships', 'bio_computers', 'collective_consciousness', 'adaptive_evolution'],\n                    energySource: 'biological'\n                },\n                psychology: {\n                    intelligence: 8,\n                    emotionalStability: 9,\n                    socialComplexity: 10,\n                    memoryType: 'collective',\n                    decisionMaking: 'collective'\n                },\n                behaviorPatterns: {\n                    primary: AlienBehaviorType.Expansionist,\n                    secondary: [AlienBehaviorType.Aggressive, AlienBehaviorType.Guardian],\n                    aggressionTriggers: ['threat_to_hive', 'resource_competition', 'territorial_intrusion'],\n                    friendshipFactors: ['mutual_benefit', 'resource_sharing', 'non_aggression'],\n                    fearFactors: ['hive_fragmentation', 'queen_death', 'collective_disruption']\n                }\n            }\n        ];\n        \n        profiles.forEach(profile => {\n            this.speciesProfiles.set(profile.species, profile);\n        });\n        \n        this.logger.info(`👽 Initialized ${profiles.length} alien species profiles`);\n    }\n\n    /**\n     * Initialize knowledge base for all species\n     */\n    private initializeKnowledgeBase(): void {\n        for (const species of Object.values(AlienSpecies)) {\n            const knowledge: AlienKnowledge = {\n                species,\n                physicalTraits: [],\n                culturalTraits: [],\n                technologicalCapabilities: [],\n                communicationMethods: [],\n                behaviorPatterns: [],\n                languageComprehension: 0,\n                culturalUnderstanding: 0,\n                technologicalUnderstanding: 0,\n                psychologicalProfile: 0,\n                totalContacts: 0,\n                successfulCommunications: 0,\n                hostileEncounters: 0,\n                peacefulEncounters: 0,\n                researchPoints: 0,\n                discoveredSecrets: [],\n                unlockedTechnologies: [],\n                lastUpdate: Date.now()\n            };\n            \n            this.knowledgeBase.set(species, knowledge);\n        }\n    }\n\n    /**\n     * Generate alien encounter\n     */\n    generateEncounter(\n        species: AlienSpecies, \n        position: { x: number, y: number },\n        type: AlienEncounter['type'] = 'routine'\n    ): AlienEncounter {\n        const profile = this.speciesProfiles.get(species);\n        if (!profile) {\n            throw new Error(`Unknown alien species: ${species}`);\n        }\n        \n        const knowledge = this.knowledgeBase.get(species)!;\n        const isFirstContact = knowledge.totalContacts === 0;\n        \n        const encounter: AlienEncounter = {\n            id: `encounter_${Date.now()}_${species}`,\n            species,\n            type: isFirstContact ? 'first_contact' : type,\n            location: { ...position },\n            phase: 'approach',\n            intensity: this.calculateInitialIntensity(profile, type),\n            suspicion: this.calculateInitialSuspicion(profile, knowledge),\n            interest: this.calculateInitialInterest(profile, type),\n            communicationEstablished: false,\n            languageBarrier: Math.max(10, 100 - knowledge.languageComprehension),\n            translationProgress: knowledge.languageComprehension,\n            culturalUnderstanding: knowledge.culturalUnderstanding,\n            actions: [],\n            responses: [],\n            success: false,\n            knowledge_gained: [],\n            technology_exchanged: [],\n            cultural_insights: [],\n            timestamp: Date.now(),\n            duration: 0\n        };\n        \n        this.activeEncounters.set(encounter.id, encounter);\n        \n        if (isFirstContact) {\n            this.events.onFirstContact?.(species, encounter);\n        }\n        \n        this.logger.info(`👽 Alien encounter: ${profile.name} - ${type}`, {\n            firstContact: isFirstContact,\n            intensity: encounter.intensity,\n            suspicion: encounter.suspicion\n        });\n        \n        return encounter;\n    }\n\n    /**\n     * Calculate initial encounter intensity\n     */\n    private calculateInitialIntensity(profile: AlienSpeciesProfile, type: AlienEncounter['type']): number {\n        let intensity = 50; // Base intensity\n        \n        // Species behavior affects intensity\n        switch (profile.behaviorPatterns.primary) {\n            case AlienBehaviorType.Aggressive:\n                intensity += 30;\n                break;\n            case AlienBehaviorType.Curious:\n                intensity += 10;\n                break;\n            case AlienBehaviorType.Isolationist:\n                intensity -= 20;\n                break;\n            case AlienBehaviorType.Peaceful:\n                intensity -= 10;\n                break;\n        }\n        \n        // Encounter type affects intensity\n        switch (type) {\n            case 'first_contact':\n                intensity += 40;\n                break;\n            case 'territorial':\n                intensity += 25;\n                break;\n            case 'distress':\n                intensity += 15;\n                break;\n            case 'scientific':\n                intensity -= 10;\n                break;\n        }\n        \n        // Psychological factors\n        intensity += (10 - profile.psychology.emotionalStability) * 3;\n        \n        return Math.max(0, Math.min(100, intensity));\n    }\n\n    /**\n     * Calculate initial suspicion level\n     */\n    private calculateInitialSuspicion(profile: AlienSpeciesProfile, knowledge: AlienKnowledge): number {\n        let suspicion = 60; // Base suspicion for unknown entities\n        \n        // Previous interactions affect suspicion\n        if (knowledge.totalContacts > 0) {\n            const positiveRatio = knowledge.peacefulEncounters / knowledge.totalContacts;\n            suspicion = Math.floor(suspicion * (1 - positiveRatio));\n        }\n        \n        // Species traits\n        if (profile.behaviorPatterns.aggressionTriggers.includes('unknown_entities')) {\n            suspicion += 20;\n        }\n        \n        if (profile.behaviorPatterns.primary === AlienBehaviorType.Isolationist) {\n            suspicion += 15;\n        }\n        \n        return Math.max(0, Math.min(100, suspicion));\n    }\n\n    /**\n     * Calculate initial interest level\n     */\n    private calculateInitialInterest(profile: AlienSpeciesProfile, type: AlienEncounter['type']): number {\n        let interest = 30; // Base interest\n        \n        // Species behavior affects interest\n        switch (profile.behaviorPatterns.primary) {\n            case AlienBehaviorType.Curious:\n                interest += 40;\n                break;\n            case AlienBehaviorType.Scholar:\n                interest += 30;\n                break;\n            case AlienBehaviorType.Trader:\n                interest += 20;\n                break;\n            case AlienBehaviorType.Isolationist:\n                interest -= 20;\n                break;\n        }\n        \n        // Encounter type affects interest\n        switch (type) {\n            case 'scientific':\n                interest += 30;\n                break;\n            case 'first_contact':\n                interest += 25;\n                break;\n            case 'probe':\n                interest += 15;\n                break;\n        }\n        \n        return Math.max(0, Math.min(100, interest));\n    }\n\n    /**\n     * Process player action in encounter\n     */\n    processPlayerAction(\n        encounterId: string,\n        actionType: AlienAction['type'],\n        intensity: number,\n        context?: string\n    ): AlienResponse {\n        const encounter = this.activeEncounters.get(encounterId);\n        if (!encounter) {\n            throw new Error(`Encounter not found: ${encounterId}`);\n        }\n        \n        const profile = this.speciesProfiles.get(encounter.species)!;\n        \n        // Create player action\n        const action: AlienAction = {\n            id: `action_${Date.now()}`,\n            type: actionType,\n            description: this.generateActionDescription(actionType, intensity, context),\n            timestamp: Date.now(),\n            intensity,\n            complexity: this.calculateActionComplexity(actionType),\n            risk: this.calculateActionRisk(actionType, encounter),\n            expectedResponse: this.predictAlienResponse(profile, actionType),\n            culturalContext: context\n        };\n        \n        encounter.actions.push(action);\n        \n        // Generate alien response\n        const response = this.generateAlienResponse(encounter, action, profile);\n        encounter.responses.push(response);\n        \n        // Update encounter state\n        this.updateEncounterState(encounter, action, response, profile);\n        \n        this.logger.debug(`👽 Action processed: ${actionType} → ${response.type}`, {\n            species: encounter.species,\n            intensity: response.intensity\n        });\n        \n        return response;\n    }\n\n    /**\n     * Generate action description\n     */\n    private generateActionDescription(\n        type: AlienAction['type'], \n        intensity: number, \n        context?: string\n    ): string {\n        const descriptions = {\n            scan: [\n                'Conducting passive sensor sweep',\n                'Analyzing alien vessel signatures',\n                'Performing detailed reconnaissance'\n            ],\n            communicate: [\n                'Attempting to establish communication',\n                'Broadcasting universal greeting protocols',\n                'Transmitting mathematical sequences'\n            ],\n            approach: [\n                'Moving closer to alien vessel',\n                'Advancing with peaceful intentions',\n                'Initiating close-range contact'\n            ],\n            retreat: [\n                'Withdrawing to safe distance',\n                'Pulling back from encounter',\n                'Establishing defensive position'\n            ],\n            gift: [\n                'Offering technological samples',\n                'Presenting cultural artifacts',\n                'Sharing knowledge databases'\n            ],\n            demonstrate: [\n                'Showcasing technological capabilities',\n                'Performing cultural demonstrations',\n                'Exhibiting peaceful intentions'\n            ],\n            threaten: [\n                'Displaying weapons systems',\n                'Transmitting warning signals',\n                'Demonstrating military capability'\n            ],\n            probe: [\n                'Deploying sensor probes',\n                'Initiating detailed scans',\n                'Gathering scientific data'\n            ]\n        };\n        \n        const typeDescriptions = descriptions[type] || ['Unknown action'];\n        let description = typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)];\n        \n        if (intensity > 70) {\n            description += ' with high intensity';\n        } else if (intensity < 30) {\n            description += ' cautiously';\n        }\n        \n        if (context) {\n            description += ` (${context})`;\n        }\n        \n        return description;\n    }\n\n    /**\n     * Calculate action complexity\n     */\n    private calculateActionComplexity(type: AlienAction['type']): number {\n        const complexity = {\n            scan: 3,\n            communicate: 7,\n            approach: 2,\n            retreat: 1,\n            gift: 5,\n            demonstrate: 6,\n            threaten: 4,\n            probe: 8\n        };\n        \n        return complexity[type] || 5;\n    }\n\n    /**\n     * Calculate action risk\n     */\n    private calculateActionRisk(type: AlienAction['type'], encounter: AlienEncounter): number {\n        let risk = 0;\n        \n        switch (type) {\n            case 'threaten':\n                risk = 90;\n                break;\n            case 'probe':\n                risk = 60;\n                break;\n            case 'approach':\n                risk = 40;\n                break;\n            case 'communicate':\n                risk = 20;\n                break;\n            case 'gift':\n                risk = 10;\n                break;\n            default:\n                risk = 30;\n        }\n        \n        // Adjust for alien suspicion\n        risk += encounter.suspicion * 0.3;\n        \n        return Math.max(0, Math.min(100, risk));\n    }\n\n    /**\n     * Predict alien response patterns\n     */\n    private predictAlienResponse(profile: AlienSpeciesProfile, actionType: AlienAction['type']): string[] {\n        const responses: string[] = [];\n        \n        // Base responses for action types\n        switch (actionType) {\n            case 'communicate':\n                responses.push('attempt_communication', 'analyze_signal', 'respond_cautiously');\n                break;\n            case 'gift':\n                responses.push('analyze_gift', 'reciprocate', 'suspicious_examination');\n                break;\n            case 'threaten':\n                responses.push('defensive_posture', 'counter_threat', 'retreat');\n                break;\n            case 'approach':\n                responses.push('allow_approach', 'maintain_distance', 'warning_signal');\n                break;\n        }\n        \n        // Modify based on species behavior\n        switch (profile.behaviorPatterns.primary) {\n            case AlienBehaviorType.Aggressive:\n                responses.push('aggressive_response', 'territorial_warning');\n                break;\n            case AlienBehaviorType.Curious:\n                responses.push('investigate_further', 'ask_questions');\n                break;\n            case AlienBehaviorType.Scholar:\n                responses.push('request_data', 'analyze_thoroughly');\n                break;\n        }\n        \n        return responses;\n    }\n\n    /**\n     * Generate alien response to player action\n     */\n    private generateAlienResponse(\n        encounter: AlienEncounter,\n        action: AlienAction,\n        profile: AlienSpeciesProfile\n    ): AlienResponse {\n        let responseType: AlienResponse['type'] = 'neutral';\n        let intensity = 50;\n        let description = '';\n        let culturalReason = '';\n        \n        // Evaluate action based on alien psychology and culture\n        const evaluation = this.evaluateAction(action, profile, encounter);\n        \n        responseType = evaluation.type;\n        intensity = evaluation.intensity;\n        \n        // Generate description based on response type and species\n        description = this.generateResponseDescription(responseType, profile, action);\n        \n        // Add cultural context if relevant\n        if (evaluation.culturalFactor) {\n            culturalReason = evaluation.culturalFactor;\n        }\n        \n        return {\n            actionId: action.id,\n            type: responseType,\n            description,\n            intensity,\n            culturalReason,\n            psychologicalState: this.determineAlienPsychologicalState(encounter, profile)\n        };\n    }\n\n    /**\n     * Evaluate player action from alien perspective\n     */\n    private evaluateAction(\n        action: AlienAction,\n        profile: AlienSpeciesProfile,\n        encounter: AlienEncounter\n    ): { type: AlienResponse['type'], intensity: number, culturalFactor?: string } {\n        let evaluation = { type: 'neutral' as AlienResponse['type'], intensity: 50 };\n        \n        // Check for cultural triggers\n        const triggers = this.checkCulturalTriggers(action, profile);\n        if (triggers.hostile.length > 0) {\n            evaluation.type = 'hostile';\n            evaluation.intensity = 80;\n            return { ...evaluation, culturalFactor: triggers.hostile[0] };\n        }\n        \n        if (triggers.positive.length > 0) {\n            evaluation.type = 'positive';\n            evaluation.intensity = 70;\n            return { ...evaluation, culturalFactor: triggers.positive[0] };\n        }\n        \n        // Evaluate based on species behavior\n        switch (profile.behaviorPatterns.primary) {\n            case AlienBehaviorType.Curious:\n                if (action.type === 'communicate' || action.type === 'demonstrate') {\n                    evaluation.type = 'curious';\n                    evaluation.intensity = 60 + action.intensity * 0.3;\n                }\n                break;\n                \n            case AlienBehaviorType.Aggressive:\n                if (action.type === 'threaten') {\n                    evaluation.type = 'hostile';\n                    evaluation.intensity = 90;\n                } else if (action.type === 'approach') {\n                    evaluation.type = 'negative';\n                    evaluation.intensity = 70;\n                }\n                break;\n                \n            case AlienBehaviorType.Scholar:\n                if (action.type === 'probe' || action.type === 'communicate') {\n                    evaluation.type = 'curious';\n                    evaluation.intensity = 50 + action.complexity * 5;\n                }\n                break;\n                \n            case AlienBehaviorType.Isolationist:\n                if (action.type === 'approach') {\n                    evaluation.type = 'negative';\n                    evaluation.intensity = 60;\n                } else if (action.type === 'retreat') {\n                    evaluation.type = 'positive';\n                    evaluation.intensity = 40;\n                }\n                break;\n        }\n        \n        // Adjust for encounter state\n        evaluation.intensity += encounter.suspicion * 0.2;\n        evaluation.intensity -= encounter.interest * 0.1;\n        \n        return evaluation;\n    }\n\n    /**\n     * Check for cultural triggers\n     */\n    private checkCulturalTriggers(action: AlienAction, profile: AlienSpeciesProfile): {\n        hostile: string[],\n        positive: string[]\n    } {\n        const triggers = { hostile: [] as string[], positive: [] as string[] };\n        \n        // Check aggression triggers\n        profile.behaviorPatterns.aggressionTriggers.forEach(trigger => {\n            if (this.actionMatchesTrigger(action, trigger)) {\n                triggers.hostile.push(trigger);\n            }\n        });\n        \n        // Check friendship factors\n        profile.behaviorPatterns.friendshipFactors.forEach(factor => {\n            if (this.actionMatchesFactor(action, factor)) {\n                triggers.positive.push(factor);\n            }\n        });\n        \n        return triggers;\n    }\n\n    /**\n     * Check if action matches aggression trigger\n     */\n    private actionMatchesTrigger(action: AlienAction, trigger: string): boolean {\n        const matches = {\n            'threat_display': action.type === 'threaten',\n            'territorial_intrusion': action.type === 'approach' && action.intensity > 70,\n            'aggressive_scanning': action.type === 'probe' && action.intensity > 60,\n            'communication_disruption': action.type === 'communicate' && action.intensity > 80,\n            'unknown_entities': action.type === 'scan' || action.type === 'probe'\n        };\n        \n        return (matches as any)[trigger] || false;\n    }\n\n    /**\n     * Check if action matches friendship factor\n     */\n    private actionMatchesFactor(action: AlienAction, factor: string): boolean {\n        const matches = {\n            'peaceful_intentions': action.type === 'gift' || (action.type === 'communicate' && action.intensity < 50),\n            'cultural_exchange': action.type === 'demonstrate' || action.culturalContext !== undefined,\n            'respect_for_knowledge': action.type === 'communicate' && action.complexity > 6,\n            'technological_sharing': action.type === 'gift' && action.culturalContext?.includes('technology'),\n            'mutual_benefit': action.type === 'gift' || action.type === 'demonstrate'\n        };\n        \n        return (matches as any)[factor] || false;\n    }\n\n    /**\n     * Generate response description\n     */\n    private generateResponseDescription(\n        type: AlienResponse['type'],\n        profile: AlienSpeciesProfile,\n        action: AlienAction\n    ): string {\n        const speciesName = profile.name;\n        \n        const descriptions = {\n            positive: [\n                `${speciesName} vessel responds with apparent approval`,\n                `Alien ship displays positive acknowledgment patterns`,\n                `${speciesName} entities seem pleased with your action`\n            ],\n            negative: [\n                `${speciesName} ship shows signs of disapproval`,\n                `Alien vessel withdraws slightly, emanating negative energy`,\n                `${speciesName} entities appear displeased with your approach`\n            ],\n            curious: [\n                `${speciesName} vessel increases sensor activity, studying you intently`,\n                `Alien ship approaches closer, displaying obvious curiosity`,\n                `${speciesName} entities begin complex scanning procedures`\n            ],\n            hostile: [\n                `${speciesName} vessel powers up weapons systems`,\n                `Alien ship assumes aggressive posture`,\n                `${speciesName} entities broadcast clear threat signals`\n            ],\n            confused: [\n                `${speciesName} ship seems uncertain how to interpret your action`,\n                `Alien vessel displays erratic movement patterns`,\n                `${speciesName} entities appear to be consulting among themselves`\n            ],\n            neutral: [\n                `${speciesName} vessel maintains current position`,\n                `Alien ship shows no particular reaction`,\n                `${speciesName} entities continue previous activities`\n            ]\n        };\n        \n        const typeDescriptions = descriptions[type] || descriptions.neutral;\n        return typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)];\n    }\n\n    /**\n     * Determine alien psychological state\n     */\n    private determineAlienPsychologicalState(encounter: AlienEncounter, profile: AlienSpeciesProfile): string {\n        const states = [];\n        \n        if (encounter.suspicion > 70) states.push('highly_suspicious');\n        else if (encounter.suspicion > 40) states.push('cautious');\n        \n        if (encounter.interest > 70) states.push('fascinated');\n        else if (encounter.interest > 40) states.push('interested');\n        \n        if (encounter.intensity > 80) states.push('agitated');\n        else if (encounter.intensity < 20) states.push('calm');\n        \n        // Add species-specific states\n        switch (profile.behaviorPatterns.primary) {\n            case AlienBehaviorType.Scholar:\n                states.push('analytical');\n                break;\n            case AlienBehaviorType.Curious:\n                states.push('inquisitive');\n                break;\n            case AlienBehaviorType.Aggressive:\n                states.push('territorial');\n                break;\n        }\n        \n        return states.length > 0 ? states.join(', ') : 'neutral';\n    }\n\n    /**\n     * Update encounter state based on interaction\n     */\n    private updateEncounterState(\n        encounter: AlienEncounter,\n        action: AlienAction,\n        response: AlienResponse,\n        profile: AlienSpeciesProfile\n    ): void {\n        // Update suspicion\n        switch (response.type) {\n            case 'positive':\n                encounter.suspicion = Math.max(0, encounter.suspicion - 15);\n                break;\n            case 'negative':\n                encounter.suspicion = Math.min(100, encounter.suspicion + 10);\n                break;\n            case 'hostile':\n                encounter.suspicion = Math.min(100, encounter.suspicion + 25);\n                break;\n        }\n        \n        // Update interest\n        if (action.complexity > 6) {\n            encounter.interest = Math.min(100, encounter.interest + 10);\n        }\n        \n        // Update communication progress\n        if (action.type === 'communicate') {\n            encounter.translationProgress = Math.min(100, encounter.translationProgress + 5);\n            encounter.languageBarrier = Math.max(0, encounter.languageBarrier - 3);\n            \n            if (encounter.translationProgress > 30 && !encounter.communicationEstablished) {\n                encounter.communicationEstablished = true;\n                this.events.onCommunicationBreakthrough?.(encounter.species, profile.communication.primary);\n            }\n        }\n        \n        // Update cultural understanding\n        if (action.culturalContext) {\n            encounter.culturalUnderstanding = Math.min(100, encounter.culturalUnderstanding + 3);\n        }\n        \n        // Update encounter phase\n        this.updateEncounterPhase(encounter);\n        \n        // Update knowledge base\n        this.updateKnowledgeBase(encounter, action, response, profile);\n    }\n\n    /**\n     * Update encounter phase\n     */\n    private updateEncounterPhase(encounter: AlienEncounter): void {\n        const oldPhase = encounter.phase;\n        \n        if (encounter.phase === 'approach' && encounter.actions.length > 0) {\n            encounter.phase = 'contact';\n        } else if (encounter.phase === 'contact' && encounter.communicationEstablished) {\n            encounter.phase = 'communication';\n        } else if (encounter.phase === 'communication' && encounter.culturalUnderstanding > 50) {\n            encounter.phase = 'interaction';\n        } else if (encounter.suspicion < 20 && encounter.interest > 60) {\n            encounter.phase = 'resolution';\n            encounter.success = true;\n        }\n        \n        if (oldPhase !== encounter.phase) {\n            this.logger.info(`👽 Encounter phase changed: ${oldPhase} → ${encounter.phase}`);\n        }\n    }\n\n    /**\n     * Update knowledge base with new information\n     */\n    private updateKnowledgeBase(\n        encounter: AlienEncounter,\n        action: AlienAction,\n        response: AlienResponse,\n        profile: AlienSpeciesProfile\n    ): void {\n        const knowledge = this.knowledgeBase.get(encounter.species)!;\n        \n        // Update contact statistics\n        knowledge.totalContacts = Math.max(knowledge.totalContacts, 1);\n        \n        if (response.type === 'positive' || response.type === 'curious') {\n            knowledge.peacefulEncounters++;\n        } else if (response.type === 'hostile') {\n            knowledge.hostileEncounters++;\n        }\n        \n        if (encounter.communicationEstablished) {\n            knowledge.successfulCommunications++;\n        }\n        \n        // Update understanding levels\n        knowledge.languageComprehension = Math.max(knowledge.languageComprehension, encounter.translationProgress);\n        knowledge.culturalUnderstanding = Math.max(knowledge.culturalUnderstanding, encounter.culturalUnderstanding);\n        \n        // Add new knowledge\n        if (response.culturalReason && !knowledge.culturalTraits.includes(response.culturalReason)) {\n            knowledge.culturalTraits.push(response.culturalReason);\n            encounter.cultural_insights.push(response.culturalReason);\n            this.events.onCulturalInsight?.(encounter.species, response.culturalReason);\n        }\n        \n        // Add research points\n        knowledge.researchPoints += action.complexity;\n        \n        knowledge.lastUpdate = Date.now();\n    }\n\n    /**\n     * Get encounter by ID\n     */\n    getEncounter(encounterId: string): AlienEncounter | null {\n        return this.activeEncounters.get(encounterId) || null;\n    }\n\n    /**\n     * Get all active encounters\n     */\n    getActiveEncounters(): AlienEncounter[] {\n        return Array.from(this.activeEncounters.values());\n    }\n\n    /**\n     * Get species profile\n     */\n    getSpeciesProfile(species: AlienSpecies): AlienSpeciesProfile | null {\n        return this.speciesProfiles.get(species) || null;\n    }\n\n    /**\n     * Get knowledge about species\n     */\n    getSpeciesKnowledge(species: AlienSpecies): AlienKnowledge | null {\n        return this.knowledgeBase.get(species) || null;\n    }\n\n    /**\n     * Get all known species\n     */\n    getKnownSpecies(): AlienSpecies[] {\n        return Array.from(this.knowledgeBase.keys()).filter(species => {\n            const knowledge = this.knowledgeBase.get(species)!;\n            return knowledge.totalContacts > 0;\n        });\n    }\n\n    /**\n     * Complete encounter\n     */\n    completeEncounter(encounterId: string): AlienEncounter | null {\n        const encounter = this.activeEncounters.get(encounterId);\n        if (!encounter) return null;\n        \n        encounter.duration = Date.now() - encounter.timestamp;\n        \n        // Determine final success state\n        if (encounter.suspicion < 30 && encounter.interest > 50) {\n            encounter.success = true;\n        }\n        \n        // Award knowledge and technologies based on success\n        if (encounter.success) {\n            const profile = this.speciesProfiles.get(encounter.species)!;\n            this.awardEncounterRewards(encounter, profile);\n        }\n        \n        this.activeEncounters.delete(encounterId);\n        \n        this.logger.info(`👽 Encounter completed: ${encounter.species}`, {\n            success: encounter.success,\n            duration: encounter.duration / 1000,\n            knowledgeGained: encounter.knowledge_gained.length\n        });\n        \n        return encounter;\n    }\n\n    /**\n     * Award rewards for successful encounter\n     */\n    private awardEncounterRewards(encounter: AlienEncounter, profile: AlienSpeciesProfile): void {\n        const knowledge = this.knowledgeBase.get(encounter.species)!;\n        \n        // Award technologies based on species specializations\n        if (encounter.culturalUnderstanding > 70) {\n            const availableTech = profile.technology.specializations.filter(tech => \n                !knowledge.unlockedTechnologies.includes(tech)\n            );\n            \n            if (availableTech.length > 0) {\n                const newTech = availableTech[Math.floor(Math.random() * availableTech.length)];\n                knowledge.unlockedTechnologies.push(newTech);\n                encounter.technology_exchanged.push(newTech);\n                this.events.onTechnologyDiscovered?.(encounter.species, newTech);\n            }\n        }\n        \n        // Award knowledge points\n        knowledge.researchPoints += encounter.culturalUnderstanding + encounter.translationProgress;\n        \n        // Unlock secrets based on deep understanding\n        if (encounter.culturalUnderstanding > 80 && knowledge.discoveredSecrets.length < 3) {\n            const secretTypes = ['origin_mystery', 'technological_secret', 'cultural_ritual', 'psychological_insight'];\n            const newSecret = secretTypes[knowledge.discoveredSecrets.length];\n            knowledge.discoveredSecrets.push(newSecret);\n            encounter.knowledge_gained.push(newSecret);\n        }\n    }\n\n    /**\n     * Get alien AI statistics\n     */\n    getAlienAIStats(): {\n        totalEncounters: number;\n        activeEncounters: number;\n        knownSpecies: number;\n        successfulContacts: number;\n        hostileEncounters: number;\n        totalKnowledge: number;\n        unlockedTechnologies: number;\n    } {\n        const knownSpecies = this.getKnownSpecies();\n        let totalEncounters = 0;\n        let successfulContacts = 0;\n        let hostileEncounters = 0;\n        let totalKnowledge = 0;\n        let unlockedTechnologies = 0;\n        \n        for (const knowledge of this.knowledgeBase.values()) {\n            totalEncounters += knowledge.totalContacts;\n            successfulContacts += knowledge.successfulCommunications;\n            hostileEncounters += knowledge.hostileEncounters;\n            totalKnowledge += knowledge.researchPoints;\n            unlockedTechnologies += knowledge.unlockedTechnologies.length;\n        }\n        \n        return {\n            totalEncounters,\n            activeEncounters: this.activeEncounters.size,\n            knownSpecies: knownSpecies.length,\n            successfulContacts,\n            hostileEncounters,\n            totalKnowledge,\n            unlockedTechnologies\n        };\n    }\n\n    /**\n     * Save alien AI data\n     */\n    saveAlienAIData(): any {\n        return {\n            activeEncounters: Array.from(this.activeEncounters.entries()),\n            knowledgeBase: Array.from(this.knowledgeBase.entries()),\n            encounterPatterns: Array.from(this.encounterPatterns.entries()),\n            adaptiveBehaviors: Array.from(this.adaptiveBehaviors.entries())\n        };\n    }\n\n    /**\n     * Load alien AI data\n     */\n    loadAlienAIData(data: any): void {\n        if (data.activeEncounters) {\n            this.activeEncounters = new Map(data.activeEncounters);\n        }\n        if (data.knowledgeBase) {\n            this.knowledgeBase = new Map(data.knowledgeBase);\n        }\n        if (data.encounterPatterns) {\n            this.encounterPatterns = new Map(data.encounterPatterns);\n        }\n        if (data.adaptiveBehaviors) {\n            this.adaptiveBehaviors = new Map(data.adaptiveBehaviors);\n        }\n        \n        this.logger.info('👽 Alien AI data loaded', {\n            encounters: this.activeEncounters.size,\n            knownSpecies: this.getKnownSpecies().length\n        });\n    }\n}","/**\n * Performance Monitor\n * Advanced system for tracking game performance and optimization\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Platform, PlatformDetector } from '@utils/Platform';\n\nexport interface PerformanceMetrics {\n    // Frame timing\n    fps: number;\n    frameTime: number; // milliseconds\n    deltaTime: number;\n    \n    // Memory usage\n    memoryUsed: number; // MB\n    memoryTotal: number; // MB\n    memoryPercentage: number;\n    \n    // Rendering\n    drawCalls: number;\n    triangles: number;\n    \n    // System\n    cpuUsage: number; // Estimated\n    batteryLevel?: number;\n    thermalState?: 'normal' | 'fair' | 'serious' | 'critical';\n    \n    // Network\n    latency?: number;\n    bandwidth?: number;\n    \n    // Game specific\n    activeEntities: number;\n    activeSounds: number;\n    textureMemory: number;\n    \n    timestamp: number;\n}\n\nexport interface PerformanceThresholds {\n    fps: {\n        excellent: number;\n        good: number;\n        acceptable: number;\n        poor: number;\n    };\n    memory: {\n        low: number;\n        medium: number;\n        high: number;\n        critical: number;\n    };\n    frameTime: {\n        target: number;\n        warning: number;\n        critical: number;\n    };\n}\n\nexport interface PerformanceSettings {\n    // Rendering quality\n    renderScale: number; // 0.5 - 2.0\n    particleQuality: 'low' | 'medium' | 'high';\n    shadowQuality: 'off' | 'low' | 'medium' | 'high';\n    \n    // Effects\n    postProcessing: boolean;\n    bloom: boolean;\n    antiAliasing: boolean;\n    \n    // LOD settings\n    lodBias: number;\n    maxRenderDistance: number;\n    \n    // Audio\n    audioQuality: 'low' | 'medium' | 'high';\n    maxAudioSources: number;\n    \n    // Physics\n    physicsSteps: number;\n    collisionComplexity: 'simple' | 'medium' | 'complex';\n    \n    // Platform specific\n    mobileLowPowerMode: boolean;\n    vsync: boolean;\n    \n    // Auto-optimization\n    autoOptimize: boolean;\n    adaptiveQuality: boolean;\n}\n\nexport interface OptimizationRecommendation {\n    category: 'rendering' | 'memory' | 'audio' | 'physics' | 'general';\n    severity: 'info' | 'warning' | 'critical';\n    title: string;\n    description: string;\n    impact: 'low' | 'medium' | 'high';\n    settings: Partial<PerformanceSettings>;\n    automaticApply: boolean;\n}\n\nexport interface PerformanceEvents {\n    onPerformanceUpdate?: (metrics: PerformanceMetrics) => void;\n    onThresholdExceeded?: (metric: string, value: number, threshold: number) => void;\n    onOptimizationRecommended?: (recommendations: OptimizationRecommendation[]) => void;\n    onSettingsChanged?: (settings: PerformanceSettings) => void;\n}\n\nexport class PerformanceMonitor {\n    // Metrics tracking\n    private metrics: PerformanceMetrics[] = [];\n    private currentMetrics: PerformanceMetrics;\n    private maxHistory: number = 300; // 5 minutes at 60fps\n    \n    // Timing\n    private frameStartTime: number = 0;\n    private lastFrameTime: number = 0;\n    private fpsHistory: number[] = [];\n    private fpsCounter: number = 0;\n    private fpsTimer: number = 0;\n    \n    // Memory tracking\n    private memoryObserver: PerformanceObserver | null = null;\n    \n    // Performance thresholds\n    private thresholds: PerformanceThresholds;\n    \n    // Current settings\n    private settings: PerformanceSettings;\n    \n    // Platform info\n    private platform: Platform;\n    \n    // Optimization\n    private lastOptimizationCheck: number = 0;\n    private optimizationInterval: number = 10000; // 10 seconds\n    \n    private events: PerformanceEvents;\n    private logger: Logger;\n\n    constructor(events: PerformanceEvents = {}) {\n        this.logger = new Logger('PerformanceMonitor');\n        this.events = events;\n        this.platform = PlatformDetector.detect();\n        \n        // Initialize default thresholds\n        this.thresholds = this.getDefaultThresholds();\n        \n        // Initialize default settings based on platform\n        this.settings = this.getDefaultSettings();\n        \n        // Initialize current metrics\n        this.currentMetrics = this.createEmptyMetrics();\n        \n        this.logger.info('📊 Performance monitor initialized');\n    }\n\n    /**\n     * Initialize performance monitoring\n     */\n    initialize(): void {\n        this.setupMemoryObserver();\n        this.startMonitoring();\n        \n        // Auto-optimization if enabled\n        if (this.settings.autoOptimize) {\n            this.enableAutoOptimization();\n        }\n        \n        this.logger.info('📊 Performance monitoring started');\n    }\n\n    /**\n     * Setup memory observer\n     */\n    private setupMemoryObserver(): void {\n        if ('PerformanceObserver' in window) {\n            try {\n                this.memoryObserver = new PerformanceObserver((list) => {\n                    for (const entry of list.getEntries()) {\n                        if (entry.entryType === 'measure') {\n                            // Process memory measurements\n                        }\n                    }\n                });\n                \n                this.memoryObserver.observe({ entryTypes: ['measure'] });\n            } catch (error) {\n                this.logger.warn('Failed to setup memory observer', error);\n            }\n        }\n    }\n\n    /**\n     * Start performance monitoring\n     */\n    private startMonitoring(): void {\n        // Setup frame timing\n        this.frameStartTime = performance.now();\n        this.lastFrameTime = this.frameStartTime;\n    }\n\n    /**\n     * Update performance metrics\n     */\n    update(deltaTime: number): void {\n        const now = performance.now();\n        \n        // Update frame timing\n        this.updateFrameTiming(now, deltaTime);\n        \n        // Update memory usage\n        this.updateMemoryUsage();\n        \n        // Update system metrics\n        this.updateSystemMetrics();\n        \n        // Update current metrics\n        this.updateCurrentMetrics(now);\n        \n        // Store metrics history\n        this.storeMetrics();\n        \n        // Check thresholds\n        this.checkThresholds();\n        \n        // Auto-optimization check\n        if (this.settings.autoOptimize && now - this.lastOptimizationCheck > this.optimizationInterval) {\n            this.performOptimizationCheck();\n            this.lastOptimizationCheck = now;\n        }\n        \n        // Emit performance update\n        this.events.onPerformanceUpdate?.(this.currentMetrics);\n    }\n\n    /**\n     * Update frame timing metrics\n     */\n    private updateFrameTiming(now: number, deltaTime: number): void {\n        const frameTime = now - this.frameStartTime;\n        this.frameStartTime = now;\n        \n        // Update FPS\n        this.fpsCounter++;\n        this.fpsTimer += deltaTime;\n        \n        if (this.fpsTimer >= 1000) { // Update every second\n            const fps = this.fpsCounter / (this.fpsTimer / 1000);\n            this.fpsHistory.push(fps);\n            \n            if (this.fpsHistory.length > 60) { // Keep 60 seconds\n                this.fpsHistory.shift();\n            }\n            \n            this.fpsCounter = 0;\n            this.fpsTimer = 0;\n        }\n        \n        this.currentMetrics.frameTime = frameTime;\n        this.currentMetrics.deltaTime = deltaTime;\n        this.currentMetrics.fps = this.getAverageFPS();\n    }\n\n    /**\n     * Update memory usage\n     */\n    private updateMemoryUsage(): void {\n        if ('memory' in performance) {\n            const memory = (performance as any).memory;\n            \n            this.currentMetrics.memoryUsed = memory.usedJSHeapSize / 1024 / 1024; // MB\n            this.currentMetrics.memoryTotal = memory.totalJSHeapSize / 1024 / 1024; // MB\n            this.currentMetrics.memoryPercentage = (this.currentMetrics.memoryUsed / this.currentMetrics.memoryTotal) * 100;\n        } else {\n            // Estimate memory usage\n            this.currentMetrics.memoryUsed = this.estimateMemoryUsage();\n            this.currentMetrics.memoryTotal = this.estimateTotalMemory();\n            this.currentMetrics.memoryPercentage = (this.currentMetrics.memoryUsed / this.currentMetrics.memoryTotal) * 100;\n        }\n    }\n\n    /**\n     * Update system metrics\n     */\n    private updateSystemMetrics(): void {\n        // CPU usage estimation based on frame time\n        const targetFrameTime = 1000 / 60; // 16.67ms for 60fps\n        this.currentMetrics.cpuUsage = Math.min(100, (this.currentMetrics.frameTime / targetFrameTime) * 100);\n        \n        // Battery level (if available)\n        if ('getBattery' in navigator) {\n            (navigator as any).getBattery().then((battery: any) => {\n                this.currentMetrics.batteryLevel = battery.level * 100;\n            }).catch(() => {\n                // Battery API not available\n            });\n        }\n        \n        // Thermal state estimation\n        this.currentMetrics.thermalState = this.estimateThermalState();\n    }\n\n    /**\n     * Update current metrics timestamp\n     */\n    private updateCurrentMetrics(now: number): void {\n        this.currentMetrics.timestamp = now;\n    }\n\n    /**\n     * Store metrics in history\n     */\n    private storeMetrics(): void {\n        this.metrics.push({ ...this.currentMetrics });\n        \n        if (this.metrics.length > this.maxHistory) {\n            this.metrics.shift();\n        }\n    }\n\n    /**\n     * Check performance thresholds\n     */\n    private checkThresholds(): void {\n        // FPS threshold\n        if (this.currentMetrics.fps < this.thresholds.fps.poor) {\n            this.events.onThresholdExceeded?.('fps', this.currentMetrics.fps, this.thresholds.fps.poor);\n        }\n        \n        // Memory threshold\n        if (this.currentMetrics.memoryPercentage > this.thresholds.memory.critical) {\n            this.events.onThresholdExceeded?.('memory', this.currentMetrics.memoryPercentage, this.thresholds.memory.critical);\n        }\n        \n        // Frame time threshold\n        if (this.currentMetrics.frameTime > this.thresholds.frameTime.critical) {\n            this.events.onThresholdExceeded?.('frameTime', this.currentMetrics.frameTime, this.thresholds.frameTime.critical);\n        }\n    }\n\n    /**\n     * Perform optimization check\n     */\n    private performOptimizationCheck(): void {\n        const recommendations = this.generateOptimizationRecommendations();\n        \n        if (recommendations.length > 0) {\n            this.events.onOptimizationRecommended?.(recommendations);\n            \n            // Auto-apply critical recommendations\n            recommendations.forEach(rec => {\n                if (rec.automaticApply && rec.severity === 'critical') {\n                    this.applyRecommendation(rec);\n                }\n            });\n        }\n    }\n\n    /**\n     * Generate optimization recommendations\n     */\n    private generateOptimizationRecommendations(): OptimizationRecommendation[] {\n        const recommendations: OptimizationRecommendation[] = [];\n        \n        // Low FPS recommendations\n        if (this.currentMetrics.fps < this.thresholds.fps.acceptable) {\n            if (this.settings.renderScale > 0.75) {\n                recommendations.push({\n                    category: 'rendering',\n                    severity: 'warning',\n                    title: 'Reduce Render Scale',\n                    description: 'Lower the render scale to improve performance',\n                    impact: 'high',\n                    settings: { renderScale: Math.max(0.5, this.settings.renderScale - 0.25) },\n                    automaticApply: this.currentMetrics.fps < this.thresholds.fps.poor\n                });\n            }\n            \n            if (this.settings.particleQuality !== 'low') {\n                recommendations.push({\n                    category: 'rendering',\n                    severity: 'warning',\n                    title: 'Reduce Particle Quality',\n                    description: 'Lower particle effects quality to improve performance',\n                    impact: 'medium',\n                    settings: { particleQuality: 'low' },\n                    automaticApply: this.currentMetrics.fps < this.thresholds.fps.poor\n                });\n            }\n            \n            if (this.settings.postProcessing) {\n                recommendations.push({\n                    category: 'rendering',\n                    severity: 'info',\n                    title: 'Disable Post-Processing',\n                    description: 'Turn off post-processing effects to improve performance',\n                    impact: 'medium',\n                    settings: { postProcessing: false },\n                    automaticApply: false\n                });\n            }\n        }\n        \n        // High memory usage recommendations\n        if (this.currentMetrics.memoryPercentage > this.thresholds.memory.high) {\n            recommendations.push({\n                category: 'memory',\n                severity: 'warning',\n                title: 'Reduce Audio Sources',\n                description: 'Limit the number of simultaneous audio sources',\n                impact: 'low',\n                settings: { maxAudioSources: Math.max(8, this.settings.maxAudioSources - 4) },\n                automaticApply: this.currentMetrics.memoryPercentage > this.thresholds.memory.critical\n            });\n            \n            recommendations.push({\n                category: 'memory',\n                severity: 'warning',\n                title: 'Reduce LOD Distance',\n                description: 'Decrease maximum render distance for objects',\n                impact: 'medium',\n                settings: { maxRenderDistance: this.settings.maxRenderDistance * 0.8 },\n                automaticApply: this.currentMetrics.memoryPercentage > this.thresholds.memory.critical\n            });\n        }\n        \n        // Platform-specific recommendations\n        if (this.platform === Platform.Mobile) {\n            if (!this.settings.mobileLowPowerMode && this.currentMetrics.batteryLevel && this.currentMetrics.batteryLevel < 20) {\n                recommendations.push({\n                    category: 'general',\n                    severity: 'info',\n                    title: 'Enable Low Power Mode',\n                    description: 'Activate power saving features for mobile devices',\n                    impact: 'medium',\n                    settings: { \n                        mobileLowPowerMode: true,\n                        renderScale: 0.75,\n                        particleQuality: 'low',\n                        audioQuality: 'low'\n                    },\n                    automaticApply: false\n                });\n            }\n        }\n        \n        return recommendations;\n    }\n\n    /**\n     * Apply optimization recommendation\n     */\n    applyRecommendation(recommendation: OptimizationRecommendation): void {\n        const oldSettings = { ...this.settings };\n        \n        // Apply settings changes\n        Object.assign(this.settings, recommendation.settings);\n        \n        this.events.onSettingsChanged?.(this.settings);\n        \n        this.logger.info(`Applied optimization: ${recommendation.title}`, {\n            category: recommendation.category,\n            impact: recommendation.impact,\n            settings: recommendation.settings\n        });\n    }\n\n    /**\n     * Get default performance thresholds\n     */\n    private getDefaultThresholds(): PerformanceThresholds {\n        return {\n            fps: {\n                excellent: 60,\n                good: 45,\n                acceptable: 30,\n                poor: 20\n            },\n            memory: {\n                low: 25,     // 25% of available memory\n                medium: 50,  // 50% of available memory\n                high: 75,    // 75% of available memory\n                critical: 90 // 90% of available memory\n            },\n            frameTime: {\n                target: 16.67,   // 60fps target\n                warning: 33.33,  // 30fps warning\n                critical: 50     // 20fps critical\n            }\n        };\n    }\n\n    /**\n     * Get default performance settings\n     */\n    private getDefaultSettings(): PerformanceSettings {\n        const baseSettings: PerformanceSettings = {\n            renderScale: 1.0,\n            particleQuality: 'high',\n            shadowQuality: 'medium',\n            postProcessing: true,\n            bloom: true,\n            antiAliasing: true,\n            lodBias: 1.0,\n            maxRenderDistance: 1000,\n            audioQuality: 'high',\n            maxAudioSources: 32,\n            physicsSteps: 60,\n            collisionComplexity: 'medium',\n            mobileLowPowerMode: false,\n            vsync: true,\n            autoOptimize: true,\n            adaptiveQuality: true\n        };\n        \n        // Platform-specific adjustments\n        switch (this.platform) {\n            case Platform.Mobile:\n                return {\n                    ...baseSettings,\n                    renderScale: 0.8,\n                    particleQuality: 'medium',\n                    shadowQuality: 'low',\n                    postProcessing: false,\n                    bloom: false,\n                    antiAliasing: false,\n                    maxRenderDistance: 500,\n                    audioQuality: 'medium',\n                    maxAudioSources: 16,\n                    physicsSteps: 30,\n                    collisionComplexity: 'simple'\n                };\n                \n            case Platform.Desktop:\n                return baseSettings;\n                \n            default:\n                return {\n                    ...baseSettings,\n                    renderScale: 0.9,\n                    particleQuality: 'medium',\n                    shadowQuality: 'medium'\n                };\n        }\n    }\n\n    /**\n     * Create empty metrics object\n     */\n    private createEmptyMetrics(): PerformanceMetrics {\n        return {\n            fps: 0,\n            frameTime: 0,\n            deltaTime: 0,\n            memoryUsed: 0,\n            memoryTotal: 0,\n            memoryPercentage: 0,\n            drawCalls: 0,\n            triangles: 0,\n            cpuUsage: 0,\n            activeEntities: 0,\n            activeSounds: 0,\n            textureMemory: 0,\n            timestamp: 0\n        };\n    }\n\n    /**\n     * Get average FPS from history\n     */\n    private getAverageFPS(): number {\n        if (this.fpsHistory.length === 0) return 0;\n        \n        const sum = this.fpsHistory.reduce((a, b) => a + b, 0);\n        return sum / this.fpsHistory.length;\n    }\n\n    /**\n     * Estimate memory usage (fallback)\n     */\n    private estimateMemoryUsage(): number {\n        // Rough estimation based on platform and active entities\n        const baseMemory = this.platform === Platform.Mobile ? 50 : 100; // MB\n        const entityMemory = this.currentMetrics.activeEntities * 0.1; // 0.1MB per entity\n        const audioMemory = this.currentMetrics.activeSounds * 2; // 2MB per sound\n        \n        return baseMemory + entityMemory + audioMemory;\n    }\n\n    /**\n     * Estimate total memory (fallback)\n     */\n    private estimateTotalMemory(): number {\n        switch (this.platform) {\n            case Platform.Mobile:\n                return 1024; // 1GB typical mobile\n            case Platform.Desktop:\n                return 4096; // 4GB typical desktop\n            default:\n                return 2048; // 2GB fallback\n        }\n    }\n\n    /**\n     * Estimate thermal state\n     */\n    private estimateThermalState(): PerformanceMetrics['thermalState'] {\n        // Estimate based on CPU usage and sustained performance\n        if (this.currentMetrics.cpuUsage > 90) return 'critical';\n        if (this.currentMetrics.cpuUsage > 75) return 'serious';\n        if (this.currentMetrics.cpuUsage > 50) return 'fair';\n        return 'normal';\n    }\n\n    /**\n     * Enable auto-optimization\n     */\n    private enableAutoOptimization(): void {\n        this.settings.autoOptimize = true;\n        this.settings.adaptiveQuality = true;\n        \n        this.logger.info('🔧 Auto-optimization enabled');\n    }\n\n    /**\n     * Set game-specific metrics\n     */\n    setGameMetrics(metrics: {\n        activeEntities?: number;\n        activeSounds?: number;\n        drawCalls?: number;\n        triangles?: number;\n        textureMemory?: number;\n    }): void {\n        if (metrics.activeEntities !== undefined) this.currentMetrics.activeEntities = metrics.activeEntities;\n        if (metrics.activeSounds !== undefined) this.currentMetrics.activeSounds = metrics.activeSounds;\n        if (metrics.drawCalls !== undefined) this.currentMetrics.drawCalls = metrics.drawCalls;\n        if (metrics.triangles !== undefined) this.currentMetrics.triangles = metrics.triangles;\n        if (metrics.textureMemory !== undefined) this.currentMetrics.textureMemory = metrics.textureMemory;\n    }\n\n    /**\n     * Get current performance metrics\n     */\n    getCurrentMetrics(): PerformanceMetrics {\n        return { ...this.currentMetrics };\n    }\n\n    /**\n     * Get metrics history\n     */\n    getMetricsHistory(duration?: number): PerformanceMetrics[] {\n        if (!duration) return [...this.metrics];\n        \n        const cutoff = Date.now() - duration;\n        return this.metrics.filter(m => m.timestamp >= cutoff);\n    }\n\n    /**\n     * Get performance summary\n     */\n    getPerformanceSummary(): {\n        averageFPS: number;\n        minFPS: number;\n        maxFPS: number;\n        averageFrameTime: number;\n        averageMemoryUsage: number;\n        performanceGrade: 'excellent' | 'good' | 'acceptable' | 'poor';\n    } {\n        const recentMetrics = this.getMetricsHistory(60000); // Last minute\n        \n        if (recentMetrics.length === 0) {\n            return {\n                averageFPS: 0,\n                minFPS: 0,\n                maxFPS: 0,\n                averageFrameTime: 0,\n                averageMemoryUsage: 0,\n                performanceGrade: 'poor'\n            };\n        }\n        \n        const fps = recentMetrics.map(m => m.fps);\n        const frameTime = recentMetrics.map(m => m.frameTime);\n        const memory = recentMetrics.map(m => m.memoryPercentage);\n        \n        const averageFPS = fps.reduce((a, b) => a + b, 0) / fps.length;\n        const minFPS = Math.min(...fps);\n        const maxFPS = Math.max(...fps);\n        const averageFrameTime = frameTime.reduce((a, b) => a + b, 0) / frameTime.length;\n        const averageMemoryUsage = memory.reduce((a, b) => a + b, 0) / memory.length;\n        \n        // Determine performance grade\n        let performanceGrade: 'excellent' | 'good' | 'acceptable' | 'poor';\n        if (averageFPS >= this.thresholds.fps.excellent && averageMemoryUsage < this.thresholds.memory.medium) {\n            performanceGrade = 'excellent';\n        } else if (averageFPS >= this.thresholds.fps.good && averageMemoryUsage < this.thresholds.memory.high) {\n            performanceGrade = 'good';\n        } else if (averageFPS >= this.thresholds.fps.acceptable) {\n            performanceGrade = 'acceptable';\n        } else {\n            performanceGrade = 'poor';\n        }\n        \n        return {\n            averageFPS,\n            minFPS,\n            maxFPS,\n            averageFrameTime,\n            averageMemoryUsage,\n            performanceGrade\n        };\n    }\n\n    /**\n     * Update performance settings\n     */\n    updateSettings(newSettings: Partial<PerformanceSettings>): void {\n        const oldSettings = { ...this.settings };\n        Object.assign(this.settings, newSettings);\n        \n        this.events.onSettingsChanged?.(this.settings);\n        \n        this.logger.info('⚙️ Performance settings updated', {\n            changes: Object.keys(newSettings),\n            newSettings\n        });\n    }\n\n    /**\n     * Get current settings\n     */\n    getSettings(): PerformanceSettings {\n        return { ...this.settings };\n    }\n\n    /**\n     * Reset to default settings\n     */\n    resetToDefaults(): void {\n        this.settings = this.getDefaultSettings();\n        this.events.onSettingsChanged?.(this.settings);\n        \n        this.logger.info('↩️ Performance settings reset to defaults');\n    }\n\n    /**\n     * Dispose performance monitor\n     */\n    dispose(): void {\n        if (this.memoryObserver) {\n            this.memoryObserver.disconnect();\n            this.memoryObserver = null;\n        }\n        \n        this.metrics = [];\n        this.fpsHistory = [];\n        \n        this.logger.info('📊 Performance monitor disposed');\n    }\n}","/**\n * Particle System\n * Advanced particle effects for retro space game visuals\n */\n\nimport { Logger } from '@utils/Logger';\nimport { Renderer, Color } from '@core/Renderer';\n\nexport enum ParticleType {\n    Explosion = 'explosion',\n    Thrust = 'thrust',\n    Laser = 'laser',\n    Shield = 'shield',\n    Spark = 'spark',\n    Smoke = 'smoke',\n    Debris = 'debris',\n    StarField = 'starfield',\n    WarpTrail = 'warp_trail',\n    Beam = 'beam'\n}\n\nexport interface Particle {\n    id: string;\n    type: ParticleType;\n    position: { x: number, y: number };\n    velocity: { x: number, y: number };\n    acceleration: { x: number, y: number };\n    \n    // Visual properties\n    size: number;\n    color: Color;\n    alpha: number;\n    rotation: number;\n    rotationSpeed: number;\n    \n    // Lifecycle\n    age: number;\n    maxAge: number;\n    \n    // Behavior\n    gravity: number;\n    bounce: number;\n    friction: number;\n    \n    // Animation\n    sizeAnimation?: {\n        startSize: number;\n        endSize: number;\n        curve: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n    };\n    \n    colorAnimation?: {\n        startColor: Color;\n        endColor: Color;\n        curve: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n    };\n    \n    alphaAnimation?: {\n        startAlpha: number;\n        endAlpha: number;\n        curve: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n    };\n}\n\nexport interface ParticleEmitter {\n    id: string;\n    type: ParticleType;\n    position: { x: number, y: number };\n    \n    // Emission properties\n    emissionRate: number; // particles per second\n    burstCount: number; // particles per burst\n    \n    // Particle spawn properties\n    velocityRange: {\n        min: { x: number, y: number };\n        max: { x: number, y: number };\n    };\n    \n    sizeRange: { min: number, max: number };\n    lifeRange: { min: number, max: number };\n    colorVariation: number; // 0-1\n    \n    // Emitter lifecycle\n    active: boolean;\n    duration: number; // -1 for infinite\n    startTime: number;\n    \n    // Shape\n    shape: 'point' | 'circle' | 'rectangle' | 'cone';\n    shapeData: any;\n}\n\nexport interface ParticleSystemConfig {\n    maxParticles: number;\n    qualityScale: number; // 0-1, affects particle count\n    enableTrails: boolean;\n    enableBloom: boolean;\n    pixelPerfect: boolean;\n}\n\nexport interface ParticleEvents {\n    onParticleSpawned?: (particle: Particle) => void;\n    onParticleDied?: (particle: Particle) => void;\n    onEmitterCompleted?: (emitter: ParticleEmitter) => void;\n}\n\nexport class ParticleSystem {\n    private particles: Map<string, Particle> = new Map();\n    private emitters: Map<string, ParticleEmitter> = new Map();\n    \n    private nextParticleId: number = 0;\n    private nextEmitterId: number = 0;\n    \n    private config: ParticleSystemConfig;\n    private events: ParticleEvents;\n    private logger: Logger;\n\n    constructor(config: Partial<ParticleSystemConfig> = {}, events: ParticleEvents = {}) {\n        this.logger = new Logger('ParticleSystem');\n        this.events = events;\n        \n        this.config = {\n            maxParticles: 1000,\n            qualityScale: 1.0,\n            enableTrails: true,\n            enableBloom: false,\n            pixelPerfect: true,\n            ...config\n        };\n        \n        this.logger.info('✨ Particle system initialized');\n    }\n\n    /**\n     * Update particle system\n     */\n    update(deltaTime: number): void {\n        this.updateEmitters(deltaTime);\n        this.updateParticles(deltaTime);\n        this.cleanupParticles();\n    }\n\n    /**\n     * Update emitters\n     */\n    private updateEmitters(deltaTime: number): void {\n        const currentTime = Date.now();\n        \n        this.emitters.forEach((emitter, emitterId) => {\n            if (!emitter.active) return;\n            \n            // Check if emitter should expire\n            if (emitter.duration > 0 && currentTime - emitter.startTime > emitter.duration * 1000) {\n                emitter.active = false;\n                this.events.onEmitterCompleted?.(emitter);\n                return;\n            }\n            \n            // Emit particles based on rate\n            if (emitter.emissionRate > 0) {\n                const particlesToEmit = (emitter.emissionRate * deltaTime / 1000) * this.config.qualityScale;\n                const fullParticles = Math.floor(particlesToEmit);\n                const fractionalChance = particlesToEmit - fullParticles;\n                \n                for (let i = 0; i < fullParticles; i++) {\n                    this.emitParticle(emitter);\n                }\n                \n                // Emit fractional particle based on probability\n                if (Math.random() < fractionalChance) {\n                    this.emitParticle(emitter);\n                }\n            }\n            \n            // Handle burst emission\n            if (emitter.burstCount > 0) {\n                for (let i = 0; i < emitter.burstCount; i++) {\n                    this.emitParticle(emitter);\n                }\n                emitter.burstCount = 0; // Reset burst\n            }\n        });\n    }\n\n    /**\n     * Emit single particle from emitter\n     */\n    private emitParticle(emitter: ParticleEmitter): void {\n        if (this.particles.size >= this.config.maxParticles) {\n            // Remove oldest particle to make room\n            const oldestId = this.particles.keys().next().value;\n            if (oldestId) {\n                this.particles.delete(oldestId);\n            }\n        }\n        \n        const particleId = `particle_${this.nextParticleId++}`;\n        const spawnPosition = this.calculateSpawnPosition(emitter);\n        const velocity = this.calculateSpawnVelocity(emitter);\n        \n        const particle: Particle = {\n            id: particleId,\n            type: emitter.type,\n            position: { ...spawnPosition },\n            velocity,\n            acceleration: { x: 0, y: 0 },\n            \n            size: this.randomBetween(emitter.sizeRange.min, emitter.sizeRange.max),\n            color: this.generateParticleColor(emitter.type, emitter.colorVariation),\n            alpha: 1.0,\n            rotation: Math.random() * Math.PI * 2,\n            rotationSpeed: (Math.random() - 0.5) * 4, // -2 to 2 rad/s\n            \n            age: 0,\n            maxAge: this.randomBetween(emitter.lifeRange.min, emitter.lifeRange.max),\n            \n            gravity: this.getParticleGravity(emitter.type),\n            bounce: this.getParticleBounce(emitter.type),\n            friction: this.getParticleFriction(emitter.type)\n        };\n        \n        // Add animations based on particle type\n        this.addParticleAnimations(particle);\n        \n        this.particles.set(particleId, particle);\n        this.events.onParticleSpawned?.(particle);\n    }\n\n    /**\n     * Calculate spawn position based on emitter shape\n     */\n    private calculateSpawnPosition(emitter: ParticleEmitter): { x: number, y: number } {\n        const { position, shape, shapeData } = emitter;\n        \n        switch (shape) {\n            case 'point':\n                return { ...position };\n                \n            case 'circle':\n                const angle = Math.random() * Math.PI * 2;\n                const radius = Math.random() * (shapeData.radius || 10);\n                return {\n                    x: position.x + Math.cos(angle) * radius,\n                    y: position.y + Math.sin(angle) * radius\n                };\n                \n            case 'rectangle':\n                return {\n                    x: position.x + (Math.random() - 0.5) * (shapeData.width || 20),\n                    y: position.y + (Math.random() - 0.5) * (shapeData.height || 20)\n                };\n                \n            case 'cone':\n                const coneAngle = Math.random() * (shapeData.angle || Math.PI / 4) - (shapeData.angle || Math.PI / 4) / 2;\n                const coneRadius = Math.random() * (shapeData.radius || 10);\n                const direction = shapeData.direction || 0;\n                \n                return {\n                    x: position.x + Math.cos(direction + coneAngle) * coneRadius,\n                    y: position.y + Math.sin(direction + coneAngle) * coneRadius\n                };\n                \n            default:\n                return { ...position };\n        }\n    }\n\n    /**\n     * Calculate spawn velocity\n     */\n    private calculateSpawnVelocity(emitter: ParticleEmitter): { x: number, y: number } {\n        const { velocityRange } = emitter;\n        \n        return {\n            x: this.randomBetween(velocityRange.min.x, velocityRange.max.x),\n            y: this.randomBetween(velocityRange.min.y, velocityRange.max.y)\n        };\n    }\n\n    /**\n     * Generate particle color based on type\n     */\n    private generateParticleColor(type: ParticleType, variation: number): Color {\n        const baseColors: { [key in ParticleType]: Color } = {\n            [ParticleType.Explosion]: { r: 96, g: 48, b: 12 }, // Orange explosion\n            [ParticleType.Thrust]: { r: 32, g: 80, b: 64 }, // Cyan thrust\n            [ParticleType.Laser]: { r: 16, g: 48, b: 16 }, // Green laser\n            [ParticleType.Shield]: { r: 24, g: 60, b: 48 }, // Teal shield\n            [ParticleType.Spark]: { r: 96, g: 64, b: 16 }, // Amber sparks\n            [ParticleType.Smoke]: { r: 32, g: 32, b: 32 }, // Gray smoke\n            [ParticleType.Debris]: { r: 48, g: 48, b: 48 }, // Gray debris\n            [ParticleType.StarField]: { r: 80, g: 80, b: 80 }, // White stars\n            [ParticleType.WarpTrail]: { r: 48, g: 24, b: 72 }, // Purple warp\n            [ParticleType.Beam]: { r: 72, g: 24, b: 24 } // Red beam\n        };\n        \n        const baseColor = baseColors[type];\n        const variationAmount = variation * 30; // Max variation\n        \n        return {\n            r: Math.max(0, Math.min(255, baseColor.r + (Math.random() - 0.5) * variationAmount)),\n            g: Math.max(0, Math.min(255, baseColor.g + (Math.random() - 0.5) * variationAmount)),\n            b: Math.max(0, Math.min(255, baseColor.b + (Math.random() - 0.5) * variationAmount))\n        };\n    }\n\n    /**\n     * Get particle physics properties\n     */\n    private getParticleGravity(type: ParticleType): number {\n        const gravityValues: { [key in ParticleType]: number } = {\n            [ParticleType.Explosion]: 0,\n            [ParticleType.Thrust]: -50, // Upward thrust\n            [ParticleType.Laser]: 0,\n            [ParticleType.Shield]: 0,\n            [ParticleType.Spark]: 100, // Falls down\n            [ParticleType.Smoke]: -20, // Rises slowly\n            [ParticleType.Debris]: 200, // Falls fast\n            [ParticleType.StarField]: 0,\n            [ParticleType.WarpTrail]: 0,\n            [ParticleType.Beam]: 0\n        };\n        \n        return gravityValues[type];\n    }\n\n    private getParticleBounce(type: ParticleType): number {\n        const bounceValues: { [key in ParticleType]: number } = {\n            [ParticleType.Explosion]: 0.2,\n            [ParticleType.Thrust]: 0,\n            [ParticleType.Laser]: 0,\n            [ParticleType.Shield]: 0,\n            [ParticleType.Spark]: 0.8,\n            [ParticleType.Smoke]: 0,\n            [ParticleType.Debris]: 0.6,\n            [ParticleType.StarField]: 0,\n            [ParticleType.WarpTrail]: 0,\n            [ParticleType.Beam]: 0\n        };\n        \n        return bounceValues[type];\n    }\n\n    private getParticleFriction(type: ParticleType): number {\n        const frictionValues: { [key in ParticleType]: number } = {\n            [ParticleType.Explosion]: 0.95,\n            [ParticleType.Thrust]: 0.9,\n            [ParticleType.Laser]: 1.0,\n            [ParticleType.Shield]: 0.98,\n            [ParticleType.Spark]: 0.98,\n            [ParticleType.Smoke]: 0.92,\n            [ParticleType.Debris]: 0.95,\n            [ParticleType.StarField]: 1.0,\n            [ParticleType.WarpTrail]: 0.99,\n            [ParticleType.Beam]: 1.0\n        };\n        \n        return frictionValues[type];\n    }\n\n    /**\n     * Add type-specific animations\n     */\n    private addParticleAnimations(particle: Particle): void {\n        switch (particle.type) {\n            case ParticleType.Explosion:\n                particle.sizeAnimation = {\n                    startSize: particle.size * 0.1,\n                    endSize: particle.size * 2,\n                    curve: 'ease-out'\n                };\n                particle.alphaAnimation = {\n                    startAlpha: 1.0,\n                    endAlpha: 0.0,\n                    curve: 'ease-in'\n                };\n                break;\n                \n            case ParticleType.Thrust:\n                particle.sizeAnimation = {\n                    startSize: particle.size,\n                    endSize: particle.size * 0.1,\n                    curve: 'linear'\n                };\n                particle.alphaAnimation = {\n                    startAlpha: 0.8,\n                    endAlpha: 0.0,\n                    curve: 'linear'\n                };\n                break;\n                \n            case ParticleType.Smoke:\n                particle.sizeAnimation = {\n                    startSize: particle.size * 0.5,\n                    endSize: particle.size * 2,\n                    curve: 'ease-out'\n                };\n                particle.alphaAnimation = {\n                    startAlpha: 0.6,\n                    endAlpha: 0.0,\n                    curve: 'ease-in'\n                };\n                break;\n                \n            case ParticleType.Spark:\n                particle.alphaAnimation = {\n                    startAlpha: 1.0,\n                    endAlpha: 0.0,\n                    curve: 'ease-in'\n                };\n                break;\n        }\n    }\n\n    /**\n     * Update particles\n     */\n    private updateParticles(deltaTime: number): void {\n        this.particles.forEach((particle, particleId) => {\n            const dt = deltaTime / 1000; // Convert to seconds\n            \n            // Update age\n            particle.age += deltaTime;\n            \n            // Apply physics\n            this.updateParticlePhysics(particle, dt);\n            \n            // Update animations\n            this.updateParticleAnimations(particle);\n            \n            // Update rotation\n            particle.rotation += particle.rotationSpeed * dt;\n        });\n    }\n\n    /**\n     * Update particle physics\n     */\n    private updateParticlePhysics(particle: Particle, dt: number): void {\n        // Apply gravity\n        particle.acceleration.y += particle.gravity * dt;\n        \n        // Apply acceleration to velocity\n        particle.velocity.x += particle.acceleration.x * dt;\n        particle.velocity.y += particle.acceleration.y * dt;\n        \n        // Apply friction\n        particle.velocity.x *= particle.friction;\n        particle.velocity.y *= particle.friction;\n        \n        // Apply velocity to position\n        particle.position.x += particle.velocity.x * dt;\n        particle.position.y += particle.velocity.y * dt;\n        \n        // Reset acceleration\n        particle.acceleration.x = 0;\n        particle.acceleration.y = 0;\n    }\n\n    /**\n     * Update particle animations\n     */\n    private updateParticleAnimations(particle: Particle): void {\n        const progress = Math.min(1, particle.age / particle.maxAge);\n        \n        // Size animation\n        if (particle.sizeAnimation) {\n            const t = this.applyEasing(progress, particle.sizeAnimation.curve);\n            particle.size = this.lerp(\n                particle.sizeAnimation.startSize,\n                particle.sizeAnimation.endSize,\n                t\n            );\n        }\n        \n        // Alpha animation\n        if (particle.alphaAnimation) {\n            const t = this.applyEasing(progress, particle.alphaAnimation.curve);\n            particle.alpha = this.lerp(\n                particle.alphaAnimation.startAlpha,\n                particle.alphaAnimation.endAlpha,\n                t\n            );\n        }\n        \n        // Color animation\n        if (particle.colorAnimation) {\n            const t = this.applyEasing(progress, particle.colorAnimation.curve);\n            particle.color = {\n                r: Math.floor(this.lerp(particle.colorAnimation.startColor.r, particle.colorAnimation.endColor.r, t)),\n                g: Math.floor(this.lerp(particle.colorAnimation.startColor.g, particle.colorAnimation.endColor.g, t)),\n                b: Math.floor(this.lerp(particle.colorAnimation.startColor.b, particle.colorAnimation.endColor.b, t))\n            };\n        }\n    }\n\n    /**\n     * Apply easing curves\n     */\n    private applyEasing(t: number, curve: string): number {\n        switch (curve) {\n            case 'ease-in':\n                return t * t;\n            case 'ease-out':\n                return 1 - (1 - t) * (1 - t);\n            case 'ease-in-out':\n                return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;\n            default:\n                return t; // linear\n        }\n    }\n\n    /**\n     * Linear interpolation\n     */\n    private lerp(start: number, end: number, t: number): number {\n        return start + (end - start) * t;\n    }\n\n    /**\n     * Clean up expired particles\n     */\n    private cleanupParticles(): void {\n        this.particles.forEach((particle, particleId) => {\n            if (particle.age >= particle.maxAge || particle.alpha <= 0) {\n                this.particles.delete(particleId);\n                this.events.onParticleDied?.(particle);\n            }\n        });\n    }\n\n    /**\n     * Create explosion effect\n     */\n    createExplosion(position: { x: number, y: number }, intensity: number = 1.0): string {\n        const emitterId = `explosion_${this.nextEmitterId++}`;\n        \n        const emitter: ParticleEmitter = {\n            id: emitterId,\n            type: ParticleType.Explosion,\n            position: { ...position },\n            emissionRate: 0, // Burst only\n            burstCount: Math.floor(50 * intensity * this.config.qualityScale),\n            velocityRange: {\n                min: { x: -100 * intensity, y: -100 * intensity },\n                max: { x: 100 * intensity, y: 100 * intensity }\n            },\n            sizeRange: { min: 2, max: 8 * intensity },\n            lifeRange: { min: 500, max: 1500 },\n            colorVariation: 0.3,\n            active: true,\n            duration: 0.1, // Very short duration\n            startTime: Date.now(),\n            shape: 'circle',\n            shapeData: { radius: 5 * intensity }\n        };\n        \n        this.emitters.set(emitterId, emitter);\n        this.logger.debug(`💥 Created explosion at (${position.x}, ${position.y})`);\n        \n        return emitterId;\n    }\n\n    /**\n     * Create thrust effect\n     */\n    createThrustTrail(position: { x: number, y: number }, direction: number, intensity: number = 1.0): string {\n        const emitterId = `thrust_${this.nextEmitterId++}`;\n        \n        const emitter: ParticleEmitter = {\n            id: emitterId,\n            type: ParticleType.Thrust,\n            position: { ...position },\n            emissionRate: 60 * intensity * this.config.qualityScale,\n            burstCount: 0,\n            velocityRange: {\n                min: { x: Math.cos(direction) * -50 * intensity, y: Math.sin(direction) * -50 * intensity },\n                max: { x: Math.cos(direction) * -100 * intensity, y: Math.sin(direction) * -100 * intensity }\n            },\n            sizeRange: { min: 1, max: 3 * intensity },\n            lifeRange: { min: 100, max: 400 },\n            colorVariation: 0.2,\n            active: true,\n            duration: -1, // Continuous\n            startTime: Date.now(),\n            shape: 'cone',\n            shapeData: { \n                direction: direction + Math.PI, // Opposite direction\n                angle: Math.PI / 6, // 30 degrees\n                radius: 3 * intensity\n            }\n        };\n        \n        this.emitters.set(emitterId, emitter);\n        \n        return emitterId;\n    }\n\n    /**\n     * Create laser beam effect\n     */\n    createLaserBeam(start: { x: number, y: number }, end: { x: number, y: number }): string {\n        const emitterId = `laser_${this.nextEmitterId++}`;\n        \n        const distance = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\n        const particleCount = Math.floor(distance / 5); // One particle every 5 pixels\n        \n        const emitter: ParticleEmitter = {\n            id: emitterId,\n            type: ParticleType.Laser,\n            position: { ...start },\n            emissionRate: 0,\n            burstCount: particleCount * this.config.qualityScale,\n            velocityRange: {\n                min: { x: 0, y: 0 },\n                max: { x: 0, y: 0 }\n            },\n            sizeRange: { min: 1, max: 2 },\n            lifeRange: { min: 100, max: 200 },\n            colorVariation: 0.1,\n            active: true,\n            duration: 0.05,\n            startTime: Date.now(),\n            shape: 'rectangle',\n            shapeData: { \n                width: distance,\n                height: 2\n            }\n        };\n        \n        this.emitters.set(emitterId, emitter);\n        \n        return emitterId;\n    }\n\n    /**\n     * Update emitter position (for continuous effects)\n     */\n    updateEmitterPosition(emitterId: string, position: { x: number, y: number }): void {\n        const emitter = this.emitters.get(emitterId);\n        if (emitter) {\n            emitter.position = { ...position };\n        }\n    }\n\n    /**\n     * Stop emitter\n     */\n    stopEmitter(emitterId: string): void {\n        const emitter = this.emitters.get(emitterId);\n        if (emitter) {\n            emitter.active = false;\n        }\n    }\n\n    /**\n     * Remove emitter\n     */\n    removeEmitter(emitterId: string): void {\n        this.emitters.delete(emitterId);\n    }\n\n    /**\n     * Render particles\n     */\n    render(renderer: Renderer): void {\n        // Sort particles by type for optimal rendering\n        const sortedParticles = Array.from(this.particles.values()).sort((a, b) => {\n            return a.type.localeCompare(b.type);\n        });\n        \n        sortedParticles.forEach(particle => {\n            this.renderParticle(renderer, particle);\n        });\n    }\n\n    /**\n     * Render individual particle\n     */\n    private renderParticle(renderer: Renderer, particle: Particle): void {\n        if (particle.alpha <= 0) return;\n        \n        const color = {\n            ...particle.color,\n            // Apply alpha if renderer supports it\n        };\n        \n        if (this.config.pixelPerfect) {\n            // Pixel-perfect rendering for retro style\n            const x = Math.floor(particle.position.x);\n            const y = Math.floor(particle.position.y);\n            const size = Math.max(1, Math.floor(particle.size));\n            \n            renderer.fillRect(x - size/2, y - size/2, size, size, color);\n        } else {\n            // Smooth rendering\n            renderer.drawCircle(\n                particle.position.x,\n                particle.position.y,\n                particle.size,\n                color,\n                true\n            );\n        }\n    }\n\n    /**\n     * Utility: Random between values\n     */\n    private randomBetween(min: number, max: number): number {\n        return min + Math.random() * (max - min);\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig: Partial<ParticleSystemConfig>): void {\n        Object.assign(this.config, newConfig);\n        this.logger.info('✨ Particle system config updated', newConfig);\n    }\n\n    /**\n     * Get particle system statistics\n     */\n    getStats(): {\n        activeParticles: number;\n        activeEmitters: number;\n        maxParticles: number;\n        qualityScale: number;\n    } {\n        return {\n            activeParticles: this.particles.size,\n            activeEmitters: Array.from(this.emitters.values()).filter(e => e.active).length,\n            maxParticles: this.config.maxParticles,\n            qualityScale: this.config.qualityScale\n        };\n    }\n\n    /**\n     * Clear all particles and emitters\n     */\n    clear(): void {\n        this.particles.clear();\n        this.emitters.clear();\n        this.logger.info('✨ Particle system cleared');\n    }\n\n    /**\n     * Dispose particle system\n     */\n    dispose(): void {\n        this.clear();\n        this.logger.info('✨ Particle system disposed');\n    }\n}","/**\n * Main Game Class - Core Engine Controller\n * Orchestrates all game systems and manages the game lifecycle\n */\n\nimport { Renderer } from '@core/Renderer';\nimport { InputManager } from '@core/InputManager';\nimport { SpacePhysics } from '@core/Physics';\nimport { AudioEngine } from '@core/AudioEngine';\nimport { GameStateManager, GameState } from '@core/GameStateManager';\nimport { Platform, PlatformDetector } from '@utils/Platform';\nimport { Logger } from '@utils/Logger';\nimport { PlayerShip } from '@entities/PlayerShip';\nimport { GalaxyManager } from '@procedural/GalaxyManager';\nimport { CockpitStatusBar } from '@ui/CockpitStatusBar';\nimport { ShipSection, SystemType } from '@entities/ShipSystems';\nimport { CelestialManager } from '@managers/CelestialManager';\nimport { SpaceBackground } from '@rendering/SpaceBackground';\nimport { ItemDatabase } from '@items/ItemSystem';\nimport { InventoryManager } from '@inventory/InventoryManager';\nimport { CraftingSystem } from '@crafting/CraftingSystem';\nimport { CombatManager } from '@combat/CombatManager';\nimport { PlayerProgression } from '@rpg/PlayerProgression';\nimport { ResearchSystem } from '@rpg/ResearchSystem';\nimport { CrewManagement } from '@rpg/CrewManagement';\nimport { DiplomacySystem } from '@diplomacy/DiplomacySystem';\nimport { AlienAI, AlienSpecies } from '@ai/AlienAI';\nimport { ProceduralAudio, SoundType } from '@audio/ProceduralAudio';\nimport { PerformanceMonitor } from '@optimization/PerformanceMonitor';\nimport { ParticleSystem } from '@effects/ParticleSystem';\n\nexport interface GameConfig {\n    targetFPS: number;\n    enableDebug: boolean;\n    enablePerformanceMonitoring: boolean;\n    enableAutoSave: boolean;\n    autoSaveInterval: number;\n}\n\nexport class Game {\n    private canvas: HTMLCanvasElement;\n    private platform: Platform;\n    private config: GameConfig;\n    \n    // Core systems\n    private renderer!: Renderer;\n    private input!: InputManager;\n    private physics!: SpacePhysics;\n    private audio!: AudioEngine;\n    private stateManager!: GameStateManager;\n    \n    // Game entities\n    private playerShip: PlayerShip | null = null;\n    \n    // Galaxy system\n    private galaxyManager: GalaxyManager | null = null;\n    \n    // UI systems\n    private cockpitStatusBar: CockpitStatusBar | null = null;\n    \n    // Celestial systems\n    private celestialManager: CelestialManager | null = null;\n    \n    // Background rendering\n    private spaceBackground: SpaceBackground | null = null;\n    \n    // Item and inventory systems\n    private itemDatabase: ItemDatabase | null = null;\n    private inventoryManager: InventoryManager | null = null;\n    private craftingSystem: CraftingSystem | null = null;\n    \n    // Combat system\n    private combatManager: CombatManager | null = null;\n    \n    // RPG systems\n    private playerProgression: PlayerProgression | null = null;\n    private researchSystem: ResearchSystem | null = null;\n    private crewManagement: CrewManagement | null = null;\n    \n    // AI & Diplomacy systems\n    private diplomacySystem: DiplomacySystem | null = null;\n    private alienAI: AlienAI | null = null;\n    \n    // Polish systems\n    private proceduralAudio: ProceduralAudio | null = null;\n    private performanceMonitor: PerformanceMonitor | null = null;\n    private particleSystem: ParticleSystem | null = null;\n    \n    // Game loop\n    private isRunning = false;\n    private isPaused = false;\n    private lastTime = 0;\n    private deltaTime = 0;\n    private frameCount = 0;\n    private fpsCounter = 0;\n    private lastFpsUpdate = 0;\n    \n    // Performance monitoring\n    private performanceStats = {\n        averageFPS: 0,\n        frameTime: 0,\n        renderTime: 0,\n        updateTime: 0,\n        memoryUsage: 0\n    };\n    \n    private logger: Logger;\n    private perfLogger: ReturnType<Logger['createPerformanceLogger']>;\n\n    constructor(canvas: HTMLCanvasElement, platform: Platform) {\n        this.canvas = canvas;\n        this.platform = platform;\n        this.logger = new Logger('Game');\n        this.perfLogger = this.logger.createPerformanceLogger();\n        \n        // Get platform-specific configuration\n        const platformConfig = PlatformDetector.getConfig();\n        this.config = {\n            targetFPS: platformConfig.performance.targetFPS,\n            enableDebug: import.meta.env.DEV,\n            enablePerformanceMonitoring: import.meta.env.DEV,\n            enableAutoSave: platformConfig.storage.enableAutoSave,\n            autoSaveInterval: platformConfig.storage.saveInterval\n        };\n\n        this.logger.info('🎮 Game instance created', {\n            platform: platform,\n            canvasSize: `${canvas.width}x${canvas.height}`,\n            config: this.config\n        });\n\n        // Initialize core systems\n        this.initializeSystems();\n    }\n\n    /**\n     * Initialize all game systems\n     */\n    private initializeSystems(): void {\n        this.logger.info('🔧 Initializing game systems...');\n        \n        try {\n            // Initialize renderer first\n            this.renderer = new Renderer(this.canvas, this.platform);\n            this.logger.info('✅ Renderer initialized');\n            \n            // Initialize input system\n            this.input = new InputManager(this.canvas, this.platform);\n            this.logger.info('✅ Input system initialized');\n            \n            // Initialize physics engine\n            this.physics = new SpacePhysics();\n            this.logger.info('✅ Physics engine initialized');\n            \n            // Initialize audio engine\n            this.audio = new AudioEngine(this.platform);\n            this.logger.info('✅ Audio engine initialized');\n            \n            // Initialize game state manager with audio and particles\n            this.stateManager = new GameStateManager(this.proceduralAudio || undefined, this.particleSystem || undefined);\n            this.logger.info('✅ Game state manager initialized');\n            \n            this.logger.info('🎯 All core systems initialized successfully');\n            \n        } catch (error) {\n            this.logger.critical('❌ Failed to initialize core systems', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize the game (async setup)\n     */\n    async initialize(): Promise<void> {\n        this.logger.info('🚀 Starting game initialization...');\n        \n        try {\n            // Initialize renderer context and shaders\n            await this.perfLogger.measureAsync('renderer-init', async () => {\n                await this.renderer.initialize();\n            });\n            \n            // Initialize audio context\n            await this.perfLogger.measureAsync('audio-init', async () => {\n                await this.audio.initialize();\n            });\n            \n            // Load initial game state\n            await this.perfLogger.measureAsync('state-init', async () => {\n                await this.stateManager.initialize();\n            });\n            \n            // Setup auto-save if enabled\n            if (this.config.enableAutoSave) {\n                this.setupAutoSave();\n            }\n            \n            // Initialize galaxy manager\n            await this.perfLogger.measureAsync('galaxy-init', async () => {\n                this.galaxyManager = new GalaxyManager();\n                await this.galaxyManager.initialize();\n            });\n            \n            // Initialize cockpit UI\n            this.cockpitStatusBar = new CockpitStatusBar({\n                screenWidth: this.canvas.width,\n                screenHeight: this.canvas.height\n            }, {\n                onPowerAllocationChange: (allocation) => {\n                    if (this.playerShip) {\n                        this.playerShip.setPowerAllocation(allocation);\n                        this.logger.debug('Power allocation changed', allocation);\n                    }\n                },\n                onSystemToggle: (system, state) => {\n                    if (this.playerShip) {\n                        this.playerShip.toggleSystem(system as any, state);\n                        this.logger.debug(`System ${system} ${state ? 'enabled' : 'disabled'}`);\n                    }\n                },\n                onInventoryOpen: () => {\n                    this.logger.info('📦 Inventory requested');\n                    // TODO: Open inventory screen\n                },\n                onCodexOpen: () => {\n                    this.logger.info('📚 Codex requested');\n                    // TODO: Open codex screen\n                },\n                onResearchOpen: () => {\n                    this.logger.info('🔬 Research requested');\n                    // TODO: Open research screen\n                },\n                onCrewOpen: () => {\n                    this.logger.info('👥 Crew management requested');\n                    // TODO: Open crew screen\n                },\n                onGalaxyMapOpen: () => {\n                    this.logger.info('🌌 Galaxy map requested');\n                    // TODO: Open galaxy map\n                },\n                onRadarZoom: (zoomLevel) => {\n                    this.logger.debug(`Radar zoom: ${zoomLevel}x`);\n                    // TODO: Update radar zoom\n                }\n            });\n            \n            // Initialize celestial manager\n            this.celestialManager = new CelestialManager({\n                renderDistance: 2000,\n                interactionDistance: 150,\n                showOrbitLines: true,\n                enableInteractions: true\n            }, {\n                onEnterOrbit: (bodyId) => {\n                    this.logger.info(`🛰️ Entering orbit around ${bodyId}`);\n                    // TODO: Handle orbit mechanics\n                },\n                onLand: (bodyId) => {\n                    this.logger.info(`🚁 Landing on ${bodyId}`);\n                    // TODO: Handle landing mechanics\n                },\n                onContinueFlight: () => {\n                    this.logger.info('🚀 Continuing flight');\n                },\n                onStartMining: (bodyId) => {\n                    this.logger.info(`⛏️ Mining on ${bodyId}`);\n                    // TODO: Add resources to inventory\n                },\n                onPerformScan: (bodyId) => {\n                    this.logger.info(`🔍 Scanned ${bodyId}`);\n                    // TODO: Add scan data to codex\n                }\n            });\n            \n            // Initialize space background\n            this.spaceBackground = new SpaceBackground({\n                starCount: 300,\n                starLayers: 5,\n                parallaxStrength: 0.3,\n                enableDistortion: true,\n                galaxyBandIntensity: 0.4,\n                nebulaOpacity: 0.2\n            });\n            \n            // Initialize item systems\n            this.itemDatabase = new ItemDatabase();\n            \n            this.inventoryManager = new InventoryManager({\n                maxSlots: 50,\n                gridWidth: 10,\n                gridHeight: 5,\n                maxWeight: 1000,\n                maxVolume: 500,\n                allowStacking: true\n            }, {\n                onItemAdded: (item, quantity) => {\n                    this.logger.info(`📦 Added ${quantity}x ${item.name} to inventory`);\n                },\n                onItemRemoved: (item, quantity) => {\n                    this.logger.info(`📦 Removed ${quantity}x ${item.name} from inventory`);\n                },\n                onInventoryFull: () => {\n                    this.logger.warn('📦 Inventory is full!');\n                }\n            }, this.itemDatabase);\n            \n            this.craftingSystem = new CraftingSystem(\n                this.itemDatabase,\n                this.inventoryManager,\n                {\n                    onCraftingStarted: (attempt) => {\n                        this.logger.info(`🔧 Started crafting: ${attempt.recipeId}`);\n                    },\n                    onCraftingCompleted: (item, success) => {\n                        if (success) {\n                            this.logger.info(`✅ Successfully crafted ${item.name}`);\n                        } else {\n                            this.logger.warn(`❌ Failed to craft ${item.name}`);\n                        }\n                    }\n                }\n            );\n            \n            // Initialize combat system (will be initialized after RPG systems)\n            this.combatManager = null;\n            \n            // Initialize RPG systems\n            this.playerProgression = new PlayerProgression({\n                onLevelUp: (level, rewards) => {\n                    this.logger.info(`🎉 Level up! Level ${level}`, rewards);\n                },\n                onSkillLevelUp: (skill, level) => {\n                    this.logger.info(`📈 Skill up: ${skill.name} → ${level}`);\n                },\n                onAchievementUnlocked: (achievement) => {\n                    this.logger.info(`🏆 Achievement: ${achievement.name}`);\n                }\n            });\n            \n            this.researchSystem = new ResearchSystem({\n                onTechnologyUnlocked: (tech) => {\n                    this.logger.info(`🔬 Technology unlocked: ${tech.name}`);\n                },\n                onDiscoveryMade: (discovery) => {\n                    this.logger.info(`🔍 Discovery: ${discovery.name}`);\n                }\n            });\n            \n            this.crewManagement = new CrewManagement({\n                onCrewJoined: (crew) => {\n                    this.logger.info(`👤 Crew joined: ${crew.name} (${crew.role})`);\n                },\n                onCrewEvent: (event) => {\n                    this.logger.info(`📰 Crew event: ${event.description}`);\n                },\n                onMoraleAlert: (morale) => {\n                    this.logger.warn(`😟 Low crew morale: ${morale.toFixed(0)}%`);\n                }\n            });\n            \n            // Initialize diplomacy and alien AI systems\n            this.diplomacySystem = new DiplomacySystem({\n                onFirstContact: (faction) => {\n                    this.logger.info(`🤝 First contact with: ${faction.name}`);\n                },\n                onReputationChanged: (factionId, oldRep, newRep) => {\n                    const change = newRep - oldRep;\n                    this.logger.info(`🤝 Reputation ${change > 0 ? '+' : ''}${change}: ${factionId}`);\n                },\n                onNegotiationStarted: (session) => {\n                    this.logger.info(`💬 Negotiation started with faction`);\n                },\n                onEncounterGenerated: (encounter) => {\n                    this.logger.info(`🎭 Diplomatic encounter: ${encounter.type}`);\n                }\n            });\n            \n            this.alienAI = new AlienAI({\n                onFirstContact: (species, encounter) => {\n                    this.logger.info(`👽 First contact with: ${species}`);\n                },\n                onCommunicationBreakthrough: (species, method) => {\n                    this.logger.info(`📡 Communication breakthrough: ${species} via ${method}`);\n                },\n                onTechnologyDiscovered: (species, technology) => {\n                    this.logger.info(`🔬 Technology discovered from ${species}: ${technology}`);\n                },\n                onCulturalInsight: (species, insight) => {\n                    this.logger.info(`🎭 Cultural insight about ${species}: ${insight}`);\n                }\n            });\n            \n            // Initialize polish systems\n            this.proceduralAudio = new ProceduralAudio({\n                onSoundPlayed: (type, config) => {\n                    this.logger.debug(`🔊 Sound played: ${type}`);\n                },\n                onTrackChanged: (trackName) => {\n                    this.logger.info(`🎵 Music track changed: ${trackName}`);\n                },\n                onAudioError: (error) => {\n                    this.logger.error('🔊 Audio error', error);\n                }\n            });\n            \n            this.performanceMonitor = new PerformanceMonitor({\n                onPerformanceUpdate: (metrics) => {\n                    // Update game metrics for audio system\n                    // TODO: Add setGameMetrics method to ProceduralAudio if needed\n                    // this.proceduralAudio?.setGameMetrics?.({\n                    //     activeSounds: metrics.activeSounds\n                    // });\n                },\n                onThresholdExceeded: (metric, value, threshold) => {\n                    this.logger.warn(`⚠️ Performance threshold exceeded: ${metric} = ${value} (threshold: ${threshold})`);\n                },\n                onOptimizationRecommended: (recommendations) => {\n                    this.logger.info(`🔧 Performance recommendations: ${recommendations.length} suggestions`);\n                },\n                onSettingsChanged: (settings) => {\n                    this.logger.info('⚙️ Performance settings updated');\n                }\n            });\n            \n            // Initialize audio system\n            await this.proceduralAudio.initialize();\n            \n            // Initialize particle system\n            this.particleSystem = new ParticleSystem({\n                maxParticles: 1000,\n                qualityScale: 1.0,\n                enableTrails: true,\n                pixelPerfect: true\n            });\n            \n            // Initialize performance monitoring\n            this.performanceMonitor.initialize();\n            \n            // Start ambient space music\n            this.proceduralAudio.startAmbientTrack('deep_space');\n            \n            // Initialize combat system with RPG integration\n            this.combatManager = new CombatManager(\n                this.itemDatabase,\n                this.inventoryManager,\n                {\n                    onEncounterStarted: (encounter) => {\n                        this.logger.info(`🚨 Combat encounter: ${encounter.name}`);\n                    },\n                    onEncounterCompleted: (encounter, success) => {\n                        this.logger.info(`${success ? '✅' : '❌'} Encounter ${encounter.name} ${success ? 'completed' : 'failed'}`);\n                        // Award experience for completed encounters\n                        if (success && this.playerProgression) {\n                            this.playerProgression.addExperience(encounter.rewards.experience);\n                            this.playerProgression.updateStatistics({ enemiesDefeated: 1 });\n                        }\n                    },\n                    onEnemyDestroyed: (enemyId, rewards) => {\n                        this.logger.info(`💰 Enemy destroyed: +${rewards.experience} XP, ${rewards.items.length} items`);\n                        // Award experience and update stats\n                        if (this.playerProgression) {\n                            this.playerProgression.addExperience(rewards.experience);\n                            this.playerProgression.updateStatistics({ enemiesDefeated: 1 });\n                            // Award skill experience based on combat\n                            this.playerProgression.addSkillExperience('weapon_proficiency', 10);\n                            this.playerProgression.addSkillExperience('tactical_combat', 5);\n                        }\n                    },\n                    onPlayerDamaged: (damage, damageType) => {\n                        this.logger.warn(`💥 Player hit: ${damage} ${damageType} damage`);\n                    }\n                }\n            );\n            \n            // Setup demo content\n            this.setupDemoContent();\n            \n            this.logger.info('✅ Game initialization completed successfully');\n            \n        } catch (error) {\n            this.logger.critical('❌ Game initialization failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Start the game loop\n     */\n    async start(): Promise<void> {\n        if (this.isRunning) {\n            this.logger.warn('Game is already running');\n            return;\n        }\n        \n        this.logger.info('🎮 Starting game...');\n        \n        try {\n            // Transition to initial game state\n            await this.stateManager.setState(GameState.Playing);\n            \n            // Start the game loop\n            this.isRunning = true;\n            this.isPaused = false;\n            this.lastTime = performance.now();\n            \n            // Start the main loop\n            this.gameLoop();\n            \n            this.logger.info('✅ Game started successfully');\n            \n        } catch (error) {\n            this.logger.critical('❌ Failed to start game', error);\n            this.isRunning = false;\n            throw error;\n        }\n    }\n\n    /**\n     * Main game loop\n     */\n    private gameLoop(): void {\n        if (!this.isRunning) {\n            return;\n        }\n\n        const currentTime = performance.now();\n        this.deltaTime = (currentTime - this.lastTime) / 1000; // Convert to seconds\n        this.lastTime = currentTime;\n\n        // Cap delta time to prevent large jumps\n        this.deltaTime = Math.min(this.deltaTime, 1/15); // Max 15 FPS minimum\n\n        if (!this.isPaused) {\n            try {\n                // Update performance stats\n                if (this.config.enablePerformanceMonitoring) {\n                    this.updatePerformanceStats(currentTime);\n                }\n\n                // Update game systems\n                this.perfLogger.measure('update', () => {\n                    this.update(this.deltaTime);\n                });\n\n                // Render frame\n                this.perfLogger.measure('render', () => {\n                    this.render();\n                });\n\n                this.frameCount++;\n\n            } catch (error) {\n                this.logger.error('Game loop error', error);\n                this.handleError(error);\n            }\n        }\n\n        // Schedule next frame\n        requestAnimationFrame(() => this.gameLoop());\n    }\n\n    /**\n     * Update all game systems\n     */\n    private update(deltaTime: number): void {\n        // Update input state\n        this.input.update(deltaTime);\n        \n        // Update game state\n        this.stateManager.update(deltaTime, this.input);\n        \n        // Update physics simulation\n        this.physics.update(deltaTime);\n        \n        // Update audio\n        this.audio.update(deltaTime);\n        \n        // Update game entities\n        if (this.playerShip && this.stateManager.isGameActive()) {\n            this.playerShip.update(deltaTime);\n            \n            // Handle weapon firing\n            this.playerShip.fireWeapon();\n            \n            // Demo damage testing (press 'T' to test damage)\n            if (this.input.isKeyPressed('KeyT')) {\n                this.playerShip.applyDamage(15, Math.random() > 0.5 ? \n                    ShipSection.Engineering : ShipSection.Weapons\n                );\n                this.logger.info('🧪 Demo damage applied');\n            }\n            \n            // Demo system toggle (press 'Y' to toggle engines)\n            if (this.input.isKeyPressed('KeyY')) {\n                const currentStatus = this.playerShip.getSystemStatus();\n                this.playerShip.toggleSystem(SystemType.Engines, !currentStatus.enginesOnline);\n                this.logger.info(`🧪 Engines ${!currentStatus.enginesOnline ? 'enabled' : 'disabled'}`);\n            }\n            \n            // Demo celestial interactions (press 'P' to perform action on nearby body)\n            if (this.input.isKeyPressed('KeyP') && this.celestialManager) {\n                const nearbyBodies = this.celestialManager.getNearbyBodies();\n                if (nearbyBodies.length > 0) {\n                    const body = nearbyBodies[0];\n                    this.celestialManager.performAction(body.id, 'scan', this.playerShip.getPosition());\n                    this.logger.info(`🔍 Demo scan of ${body.name}`);\n                }\n            }\n            \n            // Demo warp drive (press 'W' for warp toggle - already handled in PlayerShip)\n            // Just log current warp state for debugging\n            if (this.input.isKeyPressed('KeyW')) {\n                const warpState = this.playerShip.getWarpState();\n                this.logger.info(`🌌 Warp state: ${warpState}`);\n            }\n            \n            // Demo inventory system (press 'I' to toggle inventory)\n            if (this.input.isKeyPressed('KeyI') && this.inventoryManager) {\n                const isVisible = this.inventoryManager.isInventoryVisible();\n                this.inventoryManager.setVisible(!isVisible);\n                this.logger.info(`📦 Inventory ${!isVisible ? 'opened' : 'closed'}`);\n            }\n            \n            // Demo crafting system (press 'C' to toggle crafting)\n            if (this.input.isKeyPressed('KeyC') && this.craftingSystem) {\n                const isVisible = this.craftingSystem.isCraftingVisible();\n                this.craftingSystem.setVisible(!isVisible);\n                if (!isVisible) {\n                    this.craftingSystem.selectStation('basic_fabricator');\n                }\n                this.logger.info(`🔧 Crafting ${!isVisible ? 'opened' : 'closed'}`);\n            }\n            \n            // Demo item generation (press 'R' to add random items)\n            if (this.input.isKeyPressed('KeyR') && this.inventoryManager && this.itemDatabase) {\n                const randomItem = this.itemDatabase.generateRandomItem();\n                if (randomItem) {\n                    const quantity = Math.floor(Math.random() * 5) + 1;\n                    const added = this.inventoryManager.addItem(randomItem, quantity);\n                    if (added) {\n                        this.logger.info(`🎲 Added ${quantity}x ${randomItem.name} (${randomItem.rarity})`);\n                    }\n                }\n            }\n            \n            // Demo auto-crafting (press 'X' to start crafting if possible)\n            if (this.input.isKeyPressed('KeyX') && this.craftingSystem) {\n                // Try to craft an energy cell (simple recipe)\n                const success = this.craftingSystem.startCrafting('craft_energy_cell', 'basic_fabricator');\n                if (success) {\n                    this.logger.info('🔧 Started crafting Energy Cell');\n                } else {\n                    this.logger.warn('🔧 Cannot start crafting - check materials');\n                }\n            }\n            \n            // Demo combat controls\n            if (this.combatManager) {\n                // Fire primary weapon (left mouse or space)\n                if (this.input.isKeyPressed('Space')) {\n                    const fired = this.combatManager.firePlayerWeapon('player_laser_1');\n                    if (fired) {\n                        this.logger.debug('🔫 Fired laser cannon');\n                    }\n                }\n                \n                // Fire secondary weapon (right mouse or shift)\n                if (this.input.isKeyPressed('ShiftLeft')) {\n                    const fired = this.combatManager.firePlayerWeapon('player_cannon_1');\n                    if (fired) {\n                        this.logger.debug('🔫 Fired mass driver');\n                    }\n                }\n                \n                // Spawn random enemy (press 'E' for demo)\n                if (this.input.isKeyPressed('KeyE')) {\n                    this.combatManager.startRandomEncounter();\n                    this.logger.info('🛸 Spawned random encounter');\n                }\n                \n                // Clear all enemies (press 'Q' for demo)\n                if (this.input.isKeyPressed('KeyQ')) {\n                    this.combatManager.clearCombat();\n                    this.logger.info('🧹 Cleared all combat');\n                }\n            }\n            \n            // Demo AI & Diplomacy controls\n            if (this.diplomacySystem) {\n                // Generate random diplomatic encounter (press 'K' for demo)\n                if (this.input.isKeyPressed('KeyK')) {\n                    const playerPos = this.playerShip?.getPosition() || { x: 0, y: 0 };\n                    const encounter = this.diplomacySystem.generateRandomEncounter(playerPos);\n                    if (encounter) {\n                        this.logger.info(`🎭 Generated diplomatic encounter with ${encounter.factionId}`);\n                    }\n                }\n                \n                // Modify faction reputation (press 'L' for demo)\n                if (this.input.isKeyPressed('KeyL')) {\n                    const factions = this.diplomacySystem.getAllFactions();\n                    if (factions.length > 0) {\n                        const randomFaction = factions[Math.floor(Math.random() * factions.length)];\n                        const change = Math.floor(Math.random() * 21) - 10; // -10 to +10\n                        this.diplomacySystem.modifyReputation(randomFaction.id, change, 'Random diplomatic action');\n                    }\n                }\n            }\n            \n            if (this.alienAI) {\n                // Generate alien encounter (press 'M' for demo)\n                if (this.input.isKeyPressed('KeyM')) {\n                    const playerPos = this.playerShip?.getPosition() || { x: 0, y: 0 };\n                    const species = Object.values(AlienSpecies)[Math.floor(Math.random() * Object.values(AlienSpecies).length)];\n                    const encounter = this.alienAI.generateEncounter(species, playerPos, 'routine');\n                    this.logger.info(`👽 Generated alien encounter: ${species}`);\n                }\n                \n                // Simulate alien communication (press 'N' for demo)\n                if (this.input.isKeyPressed('KeyN')) {\n                    const encounters = this.alienAI.getActiveEncounters();\n                    if (encounters.length > 0) {\n                        const encounter = encounters[0];\n                        const response = this.alienAI.processPlayerAction(\n                            encounter.id,\n                            'communicate',\n                            50,\n                            'peaceful_greeting'\n                        );\n                        this.logger.info(`📡 Alien response: ${response.type} - ${response.description}`);\n                    }\n                }\n            }\n            \n            // Demo Audio & Polish controls\n            if (this.proceduralAudio) {\n                // Play laser sound (press 'O' for demo)\n                if (this.input.isKeyPressed('KeyO')) {\n                    this.proceduralAudio.playRetroSound(SoundType.Laser, 1.0);\n                }\n                \n                // Play explosion sound (press 'P' for demo)\n                if (this.input.isKeyPressed('KeyP')) {\n                    this.proceduralAudio.playRetroSound(SoundType.Explosion, 1.0);\n                }\n                \n                // Cycle ambient tracks (press 'U' for demo)\n                if (this.input.isKeyPressed('KeyU')) {\n                    const tracks = ['deep_space', 'nebula_drift', 'void_silence'];\n                    const currentTrack = this.proceduralAudio.getAudioStats().currentTrack;\n                    const currentIndex = tracks.indexOf(currentTrack || 'deep_space');\n                    const nextTrack = tracks[(currentIndex + 1) % tracks.length];\n                    this.proceduralAudio.startAmbientTrack(nextTrack);\n                }\n            }\n            \n            if (this.performanceMonitor) {\n                // Toggle auto-optimization (press 'Y' for demo)\n                if (this.input.isKeyPressed('KeyY')) {\n                    const settings = this.performanceMonitor.getSettings();\n                    this.performanceMonitor.updateSettings({\n                        autoOptimize: !settings.autoOptimize\n                    });\n                    this.logger.info(`🔧 Auto-optimization: ${!settings.autoOptimize ? 'ON' : 'OFF'}`);\n                }\n                \n                // Get performance summary (press 'T' for demo)\n                if (this.input.isKeyPressed('KeyT')) {\n                    const summary = this.performanceMonitor.getPerformanceSummary();\n                    this.logger.info(`📊 Performance: ${summary.performanceGrade} (${Math.round(summary.averageFPS)} FPS, ${Math.round(summary.averageMemoryUsage)}% memory)`);\n                }\n            }\n            \n            // Demo RPG system controls\n            if (this.playerProgression) {\n                // Add experience (press 'F' for demo)\n                if (this.input.isKeyPressed('KeyF')) {\n                    this.playerProgression.addExperience(100);\n                    this.logger.info('📈 Added 100 XP');\n                }\n                \n                // Add skill experience (press 'G' for demo)\n                if (this.input.isKeyPressed('KeyG')) {\n                    this.playerProgression.addSkillExperience('weapon_proficiency', 25);\n                    this.logger.info('🔧 Added weapon proficiency XP');\n                }\n            }\n            \n            if (this.researchSystem) {\n                // Start basic research (press 'H' for demo)\n                if (this.input.isKeyPressed('KeyH')) {\n                    const started = this.researchSystem.startResearch('basic_sensors', 'basic_lab', ['dr_smith']);\n                    if (started) {\n                        this.logger.info('🔬 Started basic sensors research');\n                    } else {\n                        this.logger.warn('🔬 Cannot start research');\n                    }\n                }\n            }\n            \n            if (this.crewManagement) {\n                // Auto-assign crew (press 'J' for demo)\n                if (this.input.isKeyPressed('KeyJ')) {\n                    const crew = this.crewManagement.getAllCrew();\n                    if (crew.length > 0) {\n                        const randomCrew = crew[Math.floor(Math.random() * crew.length)];\n                        const stations = this.crewManagement.getAllStations();\n                        const availableStation = stations.find(s => s.assignedCrew.length < s.maxCrew);\n                        \n                        if (availableStation) {\n                            const assigned = this.crewManagement.assignCrewToStation(randomCrew.id, availableStation.stationId);\n                            if (assigned) {\n                                this.logger.info(`👥 Assigned ${randomCrew.name} to ${availableStation.stationId}`);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Handle pause input\n            if (this.input.isPausePressed()) {\n                if (this.stateManager.canPause()) {\n                    this.stateManager.setState(GameState.Paused);\n                } else if (this.stateManager.canResume()) {\n                    this.stateManager.setState(GameState.Playing);\n                }\n            }\n        }\n        \n        // Update cockpit UI\n        if (this.cockpitStatusBar) {\n            this.cockpitStatusBar.update(deltaTime, this.input);\n            \n            // Update UI with current ship status\n            if (this.playerShip) {\n                this.cockpitStatusBar.updateSystemStatus(this.playerShip.getSystemStatus());\n                this.cockpitStatusBar.updateDamageReports(this.playerShip.getShipSystems().getDamageReports());\n            }\n        }\n        \n        // Update celestial bodies\n        if (this.celestialManager && this.playerShip) {\n            this.celestialManager.update(deltaTime, this.input, this.playerShip.getPosition());\n        }\n        \n        // Update space background\n        if (this.spaceBackground) {\n            this.spaceBackground.update(deltaTime);\n            \n            // Handle warp distortion effects\n            if (this.playerShip && this.playerShip.isWarpActive()) {\n                const warpDistortion = this.playerShip.getWarpDrive().getSpaceDistortion();\n                this.spaceBackground.updateWarpDistortion(warpDistortion);\n            } else if (this.playerShip && this.playerShip.getWarpState() === 'deactivating') {\n                // Gradually restore background during warp deactivation\n                const progress = this.playerShip.getWarpDrive().getWarpProgress();\n                this.spaceBackground.gradualRestore(progress);\n            }\n        }\n        \n        // Update inventory and crafting systems\n        if (this.craftingSystem) {\n            this.craftingSystem.update(deltaTime);\n        }\n        \n        // Update combat system\n        if (this.combatManager && this.playerShip) {\n            const shipSystems = this.playerShip.getSystemStatus();\n            this.combatManager.updatePlayer(\n                this.playerShip.getPosition(),\n                this.playerShip.getVelocity(),\n                20, // Player ship size\n                shipSystems.hull,\n                100 // Max hull\n            );\n            this.combatManager.update(deltaTime);\n        }\n        \n        // Update RPG systems\n        if (this.researchSystem) {\n            this.researchSystem.update(deltaTime);\n        }\n        \n        if (this.crewManagement) {\n            this.crewManagement.update(deltaTime);\n        }\n        \n        // Update polish systems\n        this.performanceMonitor?.update(deltaTime);\n        this.particleSystem?.update(deltaTime);\n        \n        // Update performance metrics for monitoring\n        if (this.performanceMonitor) {\n            const audioStats = this.proceduralAudio?.getAudioStats();\n            this.performanceMonitor.setGameMetrics({\n                activeEntities: (this.celestialManager?.getActiveBodies()?.length || 0) + 1, // +1 for player\n                activeSounds: audioStats?.activeSounds || 0,\n                drawCalls: 1, // Simplified for now\n                triangles: 100, // Simplified for now\n                textureMemory: 10 // Simplified for now\n            });\n        }\n    }\n\n    /**\n     * Render the current frame\n     */\n    private render(): void {\n        // Clear canvas and setup rendering\n        this.renderer.beginFrame();\n        \n        // Render space background first\n        if (this.spaceBackground && this.playerShip && this.stateManager.isGameActive()) {\n            this.spaceBackground.render(this.renderer, this.playerShip.getPosition());\n        }\n        \n        // Render current game state\n        this.stateManager.render(this.renderer);\n        \n        // Render game entities\n        if (this.playerShip && this.stateManager.isGameActive()) {\n            // Render thrust particles\n            this.playerShip.renderThrustParticles(this.renderer);\n            \n            // Render warp effects (on top of ship)\n            this.playerShip.renderWarpEffects(this.renderer);\n        }\n        \n        // Render celestial bodies\n        if (this.celestialManager && this.playerShip && this.stateManager.isGameActive()) {\n            this.celestialManager.render(this.renderer, this.playerShip.getPosition());\n        }\n        \n        // Render cockpit status bar\n        if (this.cockpitStatusBar) {\n            this.cockpitStatusBar.render(this.renderer);\n        }\n        \n        // Render inventory and crafting UIs\n        if (this.inventoryManager && this.inventoryManager.isInventoryVisible()) {\n            this.inventoryManager.render(this.renderer);\n        }\n        \n        if (this.craftingSystem && this.craftingSystem.isCraftingVisible()) {\n            this.craftingSystem.render(this.renderer);\n        }\n        \n        // Render combat effects\n        if (this.combatManager) {\n            this.combatManager.render(this.renderer);\n        }\n        \n        // Render debug information if enabled\n        if (this.config.enableDebug) {\n            this.renderDebugInfo();\n        }\n        \n        // Render particles on top of everything\n        if (this.particleSystem) {\n            this.particleSystem.render(this.renderer);\n        }\n        \n        // Finalize frame\n        this.renderer.endFrame();\n    }\n\n    /**\n     * Render debug information\n     */\n    private renderDebugInfo(): void {\n        const debugInfo = [\n            `FPS: ${this.performanceStats.averageFPS.toFixed(1)}`,\n            `Frame Time: ${this.performanceStats.frameTime.toFixed(2)}ms`,\n            `Render Time: ${this.performanceStats.renderTime.toFixed(2)}ms`,\n            `Update Time: ${this.performanceStats.updateTime.toFixed(2)}ms`,\n            `Platform: ${this.platform}`,\n            `State: ${this.stateManager.getCurrentState()}`,\n            `Objects: ${this.physics.getObjectCount()}`\n        ];\n\n        this.renderer.renderDebugText(debugInfo, 10, 10);\n    }\n\n    /**\n     * Update performance statistics\n     */\n    private updatePerformanceStats(currentTime: number): void {\n        // Update FPS counter\n        this.fpsCounter++;\n        \n        if (currentTime - this.lastFpsUpdate >= 1000) {\n            this.performanceStats.averageFPS = this.fpsCounter;\n            this.fpsCounter = 0;\n            this.lastFpsUpdate = currentTime;\n            \n            // Update memory usage if available\n            if ((performance as any).memory) {\n                this.performanceStats.memoryUsage = (performance as any).memory.usedJSHeapSize / 1024 / 1024;\n            }\n        }\n        \n        // Update frame timing\n        this.performanceStats.frameTime = this.deltaTime * 1000;\n        this.performanceStats.renderTime = this.perfLogger.end('render') || 0;\n        this.performanceStats.updateTime = this.perfLogger.end('update') || 0;\n    }\n\n    /**\n     * Pause the game\n     */\n    pause(): void {\n        if (!this.isRunning || this.isPaused) {\n            return;\n        }\n        \n        this.isPaused = true;\n        this.audio.pauseAll();\n        this.logger.info('⏸️ Game paused');\n    }\n\n    /**\n     * Check if game is paused\n     */\n    getPaused(): boolean {\n        return this.isPaused;\n    }\n\n    /**\n     * Resume the game\n     */\n    resume(): void {\n        if (!this.isRunning || !this.isPaused) {\n            return;\n        }\n        \n        this.isPaused = false;\n        this.lastTime = performance.now(); // Reset timing\n        this.audio.resumeAll();\n        this.logger.info('▶️ Game resumed');\n    }\n\n    /**\n     * Stop the game\n     */\n    stop(): void {\n        if (!this.isRunning) {\n            return;\n        }\n        \n        this.isRunning = false;\n        this.isPaused = false;\n        this.audio.stopAll();\n        this.logger.info('⏹️ Game stopped');\n    }\n\n    /**\n     * Handle window resize\n     */\n    handleResize(): void {\n        this.renderer.handleResize();\n        this.logger.debug('📐 Game resized');\n    }\n\n    /**\n     * Setup demo content for FÁZE 1\n     */\n    private setupDemoContent(): void {\n        this.logger.info('🎮 Setting up demo content...');\n        \n        try {\n            // Create player ship in current system\n            let shipPosition = { x: 512, y: 384 }; // Default center\n            \n            if (this.galaxyManager) {\n                const currentSystem = this.galaxyManager.getCurrentSystem();\n                if (currentSystem) {\n                    // Position ship in the system\n                    shipPosition = {\n                        x: currentSystem.star.position.x + 100, // Offset from star\n                        y: currentSystem.star.position.y + 100\n                    };\n                }\n            }\n            \n            this.playerShip = new PlayerShip(\n                this.physics,\n                this.input,\n                this.audio,\n                shipPosition\n            );\n            \n            // Create planets from current galaxy system\n            const demoPlanets: any[] = [];\n            \n            if (this.galaxyManager) {\n                const currentSystem = this.galaxyManager.getCurrentSystem();\n                if (currentSystem) {\n                    // Add central star\n                    const starObj = this.physics.createPlanet(\n                        currentSystem.star.id, \n                        { x: 512, y: 384 }, // Center the star on screen\n                        currentSystem.star.mass * 1000000, \n                        Math.min(currentSystem.star.radius * 20, 80) // Scale for visibility\n                    );\n                    this.physics.addObject(starObj);\n                    this.physics.addGravityWell(currentSystem.star.id, {\n                        position: starObj.position,\n                        mass: starObj.mass,\n                        radius: 300\n                    });\n                    demoPlanets.push(starObj);\n                    \n                    // Add planets\n                    currentSystem.planets.forEach((planet, index) => {\n                        const angle = (index * Math.PI * 2) / currentSystem.planets.length;\n                        const distance = 150 + (planet.orbitDistance * 30); // Scale orbit distance\n                        \n                        const planetPos = {\n                            x: 512 + Math.cos(angle) * distance,\n                            y: 384 + Math.sin(angle) * distance\n                        };\n                        \n                        const planetObj = this.physics.createPlanet(\n                            planet.id,\n                            planetPos,\n                            planet.mass * 100000,\n                            Math.max(planet.radius * 10, 15) // Scale for visibility\n                        );\n                        \n                        this.physics.addObject(planetObj);\n                        demoPlanets.push(planetObj);\n                    });\n                    \n                    this.logger.info(`✅ Generated system: ${currentSystem.name} with ${currentSystem.planets.length} planets`);\n                }\n            }\n            \n                        // Load celestial system\n            if (this.galaxyManager && this.celestialManager) {\n                const currentSystem = this.galaxyManager.getCurrentSystem();\n                if (currentSystem) {\n                    this.celestialManager.loadSystem({\n                        systemData: currentSystem,\n                        cameraPosition: { x: 512, y: 384 }\n                    });\n                    \n                    // Discover all bodies for demo\n                    this.celestialManager.discoverAllBodies();\n                    \n                    this.logger.info(`🌌 Loaded celestial system: ${currentSystem.name}`);\n                }\n            }\n\n            // Fallback demo planets if no galaxy system\n            if (demoPlanets.length === 0) {\n                const planet1 = this.physics.createPlanet('demo_planet_1', { x: 300, y: 200 }, 1000000, 50);\n                const planet2 = this.physics.createPlanet('demo_planet_2', { x: 700, y: 500 }, 800000, 40);\n\n                this.physics.addObject(planet1);\n                this.physics.addObject(planet2);\n\n                this.physics.addGravityWell('demo_planet_1', {\n                    position: planet1.position,\n                    mass: planet1.mass,\n                    radius: 200\n                });\n\n                this.physics.addGravityWell('demo_planet_2', {\n                    position: planet2.position,\n                    mass: planet2.mass,\n                    radius: 180\n                });\n\n                demoPlanets.push(planet1, planet2);\n            }\n\n            // Pass demo entities to state manager for rendering\n            this.stateManager.setDemoShip(this.playerShip.getPhysicsObject());\n            this.stateManager.setDemoPlanets(demoPlanets);\n            \n            this.logger.info('✅ Demo content setup completed');\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to setup demo content', error);\n        }\n    }\n\n    /**\n     * Handle errors\n     */\n    handleError(error: any): void {\n        this.logger.error('Game error handled', error);\n        \n        // Try to recover gracefully\n        try {\n            // Pause the game\n            this.pause();\n            \n            // Show error state\n            this.stateManager.setState(GameState.Error);\n            \n        } catch (recoveryError) {\n            this.logger.critical('Failed to recover from error', recoveryError);\n            // Full stop if recovery fails\n            this.stop();\n        }\n    }\n\n    /**\n     * Setup auto-save functionality\n     */\n    private setupAutoSave(): void {\n        setInterval(() => {\n            if (this.isRunning && !this.isPaused) {\n                this.saveGame();\n            }\n        }, this.config.autoSaveInterval);\n    }\n\n    /**\n     * Save game state\n     */\n    async saveGame(): Promise<void> {\n        try {\n            await this.stateManager.save();\n            this.logger.debug('💾 Game saved');\n        } catch (error) {\n            this.logger.error('Failed to save game', error);\n        }\n    }\n\n    /**\n     * Load game state\n     */\n    async loadGame(): Promise<void> {\n        try {\n            await this.stateManager.load();\n            this.logger.info('📁 Game loaded');\n        } catch (error) {\n            this.logger.error('Failed to load game', error);\n        }\n    }\n\n    /**\n     * Cleanup resources\n     */\n    async cleanup(): Promise<void> {\n        this.logger.info('🧹 Cleaning up game resources...');\n        \n        this.stop();\n        \n        if (this.renderer) {\n            this.renderer.cleanup();\n        }\n        \n        if (this.audio) {\n            this.audio.cleanup();\n        }\n        \n        if (this.input) {\n            this.input.cleanup();\n        }\n        \n        if (this.playerShip) {\n            this.playerShip.cleanup();\n        }\n        \n        if (this.galaxyManager) {\n            await this.galaxyManager.cleanup();\n        }\n        \n        if (this.celestialManager) {\n            this.celestialManager.cleanup();\n        }\n        \n        // Cleanup inventory and crafting systems (save state if needed)\n        if (this.inventoryManager) {\n            this.inventoryManager.clearInventory();\n        }\n        \n        this.logger.info('✅ Game cleanup completed');\n    }\n\n    // Getters for external access\n    getIsPaused(): boolean {\n        return this.isPaused;\n    }\n\n    isGameRunning(): boolean {\n        return this.isRunning;\n    }\n\n    getPerformanceStats() {\n        return { ...this.performanceStats };\n    }\n\n    getRenderer(): Renderer {\n        return this.renderer;\n    }\n\n    getInput(): InputManager {\n        return this.input;\n    }\n\n    getPhysics(): SpacePhysics {\n        return this.physics;\n    }\n\n    getAudio(): AudioEngine {\n        return this.audio;\n    }\n\n    getStateManager(): GameStateManager {\n        return this.stateManager;\n    }\n}","/**\n * Space Explorer 16-Bit - Main Entry Point\n * AI-Generated 2D space exploration game with retro CRT aesthetic\n */\n\nimport { Game } from '@core/Game';\nimport { Platform, PlatformDetector } from '@utils/Platform';\nimport { Logger } from '@utils/Logger';\n\n// Global game instance\nlet game: Game | null = null;\n\n/**\n * Loading progress management\n */\nclass LoadingManager {\n    private progressElement: HTMLElement;\n    private textElement: HTMLElement;\n    private currentProgress = 0;\n\n    constructor() {\n        this.progressElement = document.getElementById('loadingProgress')!;\n        this.textElement = document.getElementById('loadingText')!;\n    }\n\n    updateProgress(progress: number, text?: string): void {\n        this.currentProgress = Math.max(this.currentProgress, progress);\n        this.progressElement.style.width = `${this.currentProgress}%`;\n        \n        if (text) {\n            this.textElement.textContent = text;\n        }\n    }\n\n    hide(): void {\n        const loadingScreen = document.getElementById('loadingScreen')!;\n        loadingScreen.classList.add('hidden');\n        \n        setTimeout(() => {\n            loadingScreen.style.display = 'none';\n        }, 500);\n    }\n}\n\n/**\n * Initialize the game with proper error handling and loading\n */\nasync function initializeGame(): Promise<void> {\n    const loader = new LoadingManager();\n    const logger = new Logger('Main');\n    \n    try {\n        logger.info('🚀 Starting Space Explorer 16-Bit initialization...');\n        \n        // Detect platform for adaptive features\n        loader.updateProgress(10, 'DETECTING PLATFORM...');\n        const platform = PlatformDetector.detect();\n        logger.info(`Platform detected: ${platform}`);\n        \n        // Initialize canvas and context\n        loader.updateProgress(20, 'INITIALIZING GRAPHICS...');\n        const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n        if (!canvas) {\n            throw new Error('Game canvas not found');\n        }\n        \n        // Adjust canvas for mobile\n        if (platform === Platform.Mobile) {\n            adjustCanvasForMobile(canvas);\n        }\n        \n        // Pre-load critical resources\n        loader.updateProgress(40, 'LOADING CORE SYSTEMS...');\n        await preloadCriticalResources();\n        \n        // Initialize game engine\n        loader.updateProgress(60, 'INITIALIZING GAME ENGINE...');\n        game = new Game(canvas, platform);\n        \n        // Initialize procedural generators\n        loader.updateProgress(80, 'GENERATING GALAXY...');\n        await game.initialize();\n        \n        // Final setup\n        loader.updateProgress(95, 'FINAL PREPARATIONS...');\n        setupEventListeners();\n        \n        // Start the game\n        loader.updateProgress(100, 'LAUNCHING SPACE EXPLORER...');\n        await new Promise(resolve => setTimeout(resolve, 500)); // Brief pause for effect\n        \n        loader.hide();\n        await game.start();\n        \n        logger.info('✅ Game successfully initialized and started');\n        \n    } catch (error) {\n        logger.error('❌ Failed to initialize game:', error);\n        showErrorScreen(error as Error);\n    }\n}\n\n/**\n * Adjust canvas size and settings for mobile devices\n */\nfunction adjustCanvasForMobile(canvas: HTMLCanvasElement): void {\n    const container = document.getElementById('gameContainer')!;\n    const containerRect = container.getBoundingClientRect();\n    \n    // Calculate optimal size maintaining aspect ratio\n    const targetRatio = 1024 / 768;\n    let width = containerRect.width - 20; // margin\n    let height = width / targetRatio;\n    \n    if (height > containerRect.height - 20) {\n        height = containerRect.height - 20;\n        width = height * targetRatio;\n    }\n    \n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    // Maintain internal resolution for pixel-perfect rendering\n    canvas.width = 1024;\n    canvas.height = 768;\n}\n\n/**\n * Pre-load any critical resources\n */\nasync function preloadCriticalResources(): Promise<void> {\n    // For now, just simulate loading time\n    // In future phases, this will load essential assets\n    return new Promise(resolve => {\n        setTimeout(resolve, 200);\n    });\n}\n\n/**\n * Setup global event listeners\n */\nfunction setupEventListeners(): void {\n    // Handle window resize\n    window.addEventListener('resize', () => {\n        if (game && PlatformDetector.detect() === Platform.Mobile) {\n            const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n            adjustCanvasForMobile(canvas);\n            game.handleResize();\n        }\n    });\n    \n    // Handle visibility changes (pause when tab not visible)\n    document.addEventListener('visibilitychange', () => {\n        if (game) {\n            if (document.hidden) {\n                game.pause();\n            } else {\n                game.resume();\n            }\n        }\n    });\n    \n    // Handle page unload\n    window.addEventListener('beforeunload', () => {\n        if (game) {\n            game.cleanup();\n        }\n    });\n    \n    // Handle errors\n    window.addEventListener('error', (event) => {\n        const logger = new Logger('GlobalError');\n        logger.error('Unhandled error:', event.error);\n        \n        if (game) {\n            game.handleError(event.error);\n        }\n    });\n}\n\n/**\n * Show error screen with debugging information\n */\nfunction showErrorScreen(error: Error): void {\n    const loadingScreen = document.getElementById('loadingScreen')!;\n    const loadingText = document.getElementById('loadingText')!;\n    const loadingBar = document.getElementById('loadingBar')!;\n    \n    loadingText.textContent = '❌ INITIALIZATION FAILED';\n    loadingText.style.color = '#f00';\n    loadingBar.style.display = 'none';\n    \n    // Create error details\n    const errorDetails = document.createElement('div');\n    errorDetails.style.cssText = `\n        color: #f00;\n        font-family: monospace;\n        font-size: 12px;\n        margin-top: 20px;\n        text-align: left;\n        background: rgba(255, 0, 0, 0.1);\n        padding: 10px;\n        border: 1px solid #f00;\n        max-width: 80%;\n        overflow-wrap: break-word;\n    `;\n    errorDetails.innerHTML = `\n        <div><strong>Error:</strong> ${error.message}</div>\n        <div><strong>Stack:</strong></div>\n        <pre style=\"font-size: 10px; margin-top: 5px;\">${error.stack}</pre>\n        <div style=\"margin-top: 10px; color: #ff0;\">\n            Please check the browser console for more details.\n        </div>\n    `;\n    \n    loadingScreen.appendChild(errorDetails);\n}\n\n/**\n * Development helpers (only in dev mode)\n */\nif (import.meta.env.DEV) {\n    // Expose game instance for debugging\n    (window as any).__SPACE_EXPLORER_GAME__ = () => game;\n    \n    // Add debug key bindings\n    document.addEventListener('keydown', (event) => {\n        if (event.key === 'F12' || (event.ctrlKey && event.shiftKey && event.key === 'I')) {\n            // Allow developer tools\n            return;\n        }\n        \n        if (game && event.ctrlKey) {\n            switch (event.key) {\n                case 'r':\n                    // Restart game\n                    event.preventDefault();\n                    location.reload();\n                    break;\n                case 'p':\n                    // Toggle pause\n                    event.preventDefault();\n                    if (game.getPaused()) {\n                        game.resume();\n                    } else {\n                        game.pause();\n                    }\n                    break;\n            }\n        }\n    });\n}\n\n// Start the game when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeGame);\n} else {\n    initializeGame();\n}\n\n// Export for potential external access\nexport { game };"],"names":["Platform","_PlatformDetector","detect","this","cachedPlatform","window","__TAURI__","cordova","isMobile","isDesktop","getFeatures","cachedFeatures","platform","hasKeyboard","hasTouch","hasFileSystem","hasFullscreen","canVibrate","preferredInputMethod","getPreferredInput","storageType","getStorageType","userAgent","navigator","vendor","opera","test","maxTouchPoints","smallScreen","innerWidth","innerHeight","largeScreen","desktopOS","document","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","getConfig","features","canvas","pixelRatio","devicePixelRatio","maxWidth","maxHeight","scalingMode","input","enableKeyboard","enableTouch","enableGamepad","touchSensitivity","keyRepeatDelay","keyRepeatRate","performance","targetFPS","enableParticles","enablePostProcessing","enableShadows","enableDithering","renderScale","audio","enableAudio","enableMusic","enableSFX","enableSpatialAudio","audioFormat","maxChannels","storage","type","enableAutoSave","saveInterval","maxSaveSlots","compressionEnabled","supports","feature","Boolean","getPlatformName","reset","PlatformDetector","LogLevel","_Logger","constructor","module","configure","config","level","globalLevel","maxEntries","enableConsole","enableStorage","setLevel","debug","message","data","log","info","warn","error","stack","Error","name","critical","entry","timestamp","Date","now","addEntry","outputToConsole","storeEntry","entries","push","length","shift","prefix","toISOString","consoleMethod","style","console","groupCollapsed","groupEnd","stored","localStorage","getItem","logs","JSON","parse","splice","setItem","stringify","getEntries","getEntriesByLevel","filter","getEntriesByModule","clear","removeItem","exported","loadFromStorage","slice","createPerformanceLogger","start","end","measure","fn","measureAsync","timers","Map","set","logger","startTime","get","duration","delete","toFixed","result","Logger","Renderer","gl","shaderPrograms","colorPalette","renderStats","drawCalls","triangles","sprites","particles","ctx","getContext","enablePixelPerfect","enableCRT","Mobile","Desktop","backgroundColor","canvasSize","width","height","initialize","setupPixelPerfectCanvas","generateColorPalette","initializeWebGL","createRenderBuffers","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","scale","size","r","g","b","backBuffer","createImageData","frontBuffer","clearBuffer","hexToColor","beginFrame","fillStyle","fillRect","endFrame","applyDithering","putImageData","applyCRTEffect","buffer","color","i","a","setPixel","x","y","Math","floor","index","py","px","drawLine","x0","y0","x1","y1","dx","abs","dy","sx","sy","err","e2","drawCircle","centerX","centerY","radius","filled","d","renderText","text","save","font","colorToHex","textBaseline","shadowColor","shadowBlur","fillText","restore","renderDebugText","lines","textColor","max","map","line","forEach","generateShipSprite","imageData","shipColor","drawSprite","sprite","oldR","oldG","oldB","newColor","findNearestPaletteColor","errorR","errorG","errorB","distributeError","factor","min","nearestColor","minDistance","Number","MAX_VALUE","paletteColor","distance","sqrt","pow","handleResize","hex","exec","parseInt","toHex","c","round","toString","getRenderStats","drawRect","cleanup","program","deleteProgram","InputManager","gamepads","touchZones","activeTouches","enableMouse","eventListeners","currentState","createEmptyInputState","previousState","configureForPlatform","setupEventListeners","setupTouchZones","Tauri","Cordova","Web","keyDownHandler","e","handleKeyDown","keyUpHandler","handleKeyUp","addEventListener","removeEventListener","mouseMoveHandler","handleMouseMove","mouseDownHandler","handleMouseDown","mouseUpHandler","handleMouseUp","wheelHandler","handleWheel","touchStartHandler","handleTouchStart","touchMoveHandler","handleTouchMove","touchEndHandler","handleTouchEnd","passive","gamepadConnectedHandler","handleGamepadConnected","gamepadDisconnectedHandler","handleGamepadDisconnected","focusHandler","handleFocus","blurHandler","handleBlur","canvasRect","getBoundingClientRect","update","deltaTime","deepCopyInputState","keysPressed","keysReleased","mouseButtonsPressed","mouseButtonsReleased","mouseWheel","touchStarted","touchEnded","updateGamepadState","updateVirtualControls","key","code","keys","has","add","isGameKey","preventDefault","rect","mousePosition","clientX","left","clientY","top","button","mouseButtons","deltaY","touches","Array","from","changedTouches","touch","identifier","id","startPosition","currentPosition","zone","getTouchZone","touchInfo","gamepad","connected","axes","buttons","getGamepads","state","pressed","virtualThrust","virtualRotation","virtualAction","touchId","deltaX","Set","includes","zoneName","isKeyDown","isKeyPressed","isKeyReleased","isMouseButtonDown","isMouseButtonPressed","getMousePosition","getMouseWheel","getTouchCount","getVirtualThrust","getVirtualRotation","getThrustInput","thrust","values","getRotationInput","rotation","isActionPressed","isPausePressed","SpacePhysics","objects","gravityWells","GRAVITATIONAL_CONSTANT","SPACE_DRAG","MIN_VELOCITY","MAX_VELOCITY","collisionPairs","addObject","object","removeObject","removed","getObject","addGravityWell","well","removeGravityWell","isStatic","updateObject","detectCollisions","resolveCollisions","acceleration","applyGravity","applyDrag","velocity","speed","getVectorMagnitude","position","distanceSquared","force","mass","forceX","forceY","drag","objectArray","j","objA","objB","collision","checkCollision","objectA","objectB","penetration","normal","point","resolveCollision","onCollision","separationA","separationB","relativeVelocity","velocityAlongNormal","impulse","restitution","impulseVector","applyThrust","objectId","thrustVector","thrustPower","magnitude","normalizedThrust","calculateOrbitalVelocity","centralMass","calculateEscapeVelocity","getObjectsInRadius","center","getDistance","raycast","direction","maxDistance","normalizedDirection","normalizeVector","vector","getStats","objectCount","gravityWellCount","collisionCount","activeObjects","obj","getObjectCount","getAllObjects","createShip","friction","health","createPlanet","createProjectile","AudioEngine","context","masterGain","musicGain","sfxGain","soundEffects","activeSources","musicTrack","ambientTrack","synthNodes","isInitialized","masterVolume","musicVolume","sfxVolume","sampleRate","AudioContext","webkitAudioContext","setupUserInteractionHandler","createGain","connect","destination","setMasterVolume","setMusicVolume","setSfxVolume","generateBasicSounds","resumeAudio","async","resume","once","engineBuffer","generateEngineSound","loop","volume","pitch","laserBuffer","generateLaserSound","explosionBuffer","generateExplosionSound","beepBuffer","generateBeepSound","samples","createBuffer","getChannelData","t","baseFreq","sin","harmonic1","PI","harmonic2","harmonic3","noise","random","progress","freq","amplitude","exp","rumble","frequency","playSfx","soundId","soundEffect","source","createBufferSource","gainNode","sourceId","pannerNode","playbackRate","value","gain","createPanner","panningModel","distanceModel","refDistance","rolloffFactor","positionX","positionY","positionZ","audioSource","node","isPlaying","currentTime","onended","stopSound","stop","updateSpatialAudio","setListenerPosition","orientation","listener","forwardX","cos","forwardY","forwardZ","upX","upY","upZ","playEngineSound","playLaserSound","playExplosion","playUIBeep","pauseAll","suspend","resumeAll","stopAll","contextState","close","SoundType","ProceduralAudio","events","audioContext","soundEffectsGain","currentTrack","ambientLayers","activeSounds","noiseBuffer","convolver","reverbBuffer","createNoiseBuffer","createReverbBuffer","onAudioError","bufferSize","output","channel","channelData","decay","createConvolver","playSound","sourceGain","filterNode","distortionNode","waveform","createNoiseSource","createOscillatorSource","createBiquadFilter","Q","resonance","distortion","createDistortion","z","currentNode","applyEnvelope","frequencyModulation","OscillatorNode","applyFrequencyModulation","onSoundPlayed","oscillator","createOscillator","harmonics","harmonic","harmonicOsc","harmonicGain","amount","createWaveShaper","curve","Float32Array","deg","oversample","gainParam","attack","sustain","release","setValueAtTime","linearRampToValueAtTime","sustainEnd","modConfig","modOscillator","modGain","rate","depth","playRetroSound","intensity","configs","engine","laser","explosion","beep","warning","warp","reverb","roomSize","dampening","wetness","shield","impact","communication","ambient","ui","startAmbientTrack","trackName","stopAmbientTrack","deep_space","fadeInTime","fadeOutTime","crossfadeTime","layers","baseFrequency","pan","frequencyVariation","volumeVariation","minFreq","maxFreq","nebula_drift","void_silence","createAmbientLayers","onTrackChanged","layerConfig","layerGain","panner","createStereoPanner","startLayerModulation","freqModOsc","freqModGain","filterModOsc","filterModGain","layer","setTimeout","setSFXVolume","getAudioStats","stopAllSounds","sound","AudioScheduledSourceNode","dispose","MainMenu","selectedButtonIndex","animationTime","transitionProgress","isTransitioning","backgroundParticles","titleGlow","screenFlicker","saveSlots","newGameSettings","getDefaultNewGameSettings","gameSettings","getDefaultGameSettings","loadSaveSlots","initializeMainMenu","startBackgroundEffects","updateVisualEffects","updateTransition","handleInput","updateParticleEffects","navigateUp","navigateDown","selectButton","goBack","handleNewGameInput","handleSettingsInput","handleHotkeys","playUISound","enabled","updateButtonHighlights","action","onExit","transitionToState","highlighted","hotkey","hasSaveGames","updateButtonPositions","initializeNewGameMenu","playerName","editPlayerName","difficulty","toUpperCase","cycleDifficulty","galaxySize","cycleGalaxySize","enemyFrequency","cycleEnemyFrequency","enablePermadeath","togglePermadeath","enableTutorial","toggleTutorial","startNewGame","initializeLoadGameMenu","slot","exists","system","playtime","loadGame","initializeSettingsMenu","adjustRenderScale","adjustMasterVolume","adjustMusicVolume","adjustSfxVolume","showFPS","toggleShowFPS","vsync","toggleVSync","applySettings","resetToDefaults","initializeCreditsMenu","generateRandomSeed","adjustSettingDown","adjustSettingUp","newState","createTransitionEffect","initializeMenuForState","updateBackgroundParticles","createExplosion","emitterId","createThrustTrail","Beep","UI","Communication","Warning","names","currentIndex","indexOf","updateNewGameMenuText","difficulties","sizes","frequencies","galaxySeed","substring","onNewGame","settingId","updateSettingsMenuText","onSettings","saveSettings","onLoadGame","find","startingResources","fullscreen","mouseSensitivity","autoSave","autoSaveInterval","colorblindMode","subtitles","reducedMotion","keyBindings","forward","backward","right","fire","some","date","loadSettings","saved","render","renderer","renderMainMenu","renderNewGameMenu","renderLoadGameMenu","renderSettingsMenu","renderCreditsMenu","renderGameStart","renderTransition","titleColor","renderButtons","hint","progressWidth","loadingTexts","textIndex","currentText","onGameStart","wipeHeight","renderButton","hotkeyText","replace","align","fontSize","textX","charX","getCurrentState","getGameSettings","setNewGameSettings","settings","Object","assign","removeEmitter","GameState","GameStateManager","stateStack","transitions","stateStartTime","mainMenu","demoShip","demoPlanets","gameTimeStarted","gameData","createDefaultGameData","initializeMenuSystem","setupStateTransitions","menuEvents","handleNewGame","saveSlot","handleLoadGame","handleSettingsChange","handleExit","setState","loadGameData","setupDemoContent","playerShip","fuel","resources","currentSystem","gameTime","experience","discoveries","technologies","stats","timePlayedSeconds","systemsVisited","aliensEncountered","battlesWon","resourcesCollected","addTransition","to","condition","transitionKey","transition","onStateEnter","pushState","popState","poppedState","pop","startGameTimeTracking","pauseGameTimeTracking","updatePlayingState","updateLoadingState","catch","renderLoadingState","renderPlayingState","renderPausedState","renderErrorState","renderDefaultState","dots","repeat","renderMenuState","item","renderSpaceBackground","shipSprite","planet","renderBasicHUD","brightness","minutes","seconds","padStart","saveData","version","serialized","load","resourcesArray","isArray","toLowerCase","saveKey","getPreviousState","getGameData","isInState","setDemoShip","ship","setDemoPlanets","planets","canPause","canResume","isGameActive","isInMenu","ShipSection","SystemType","ShipSystems","damage","heatGeneration","powerConsumption","fuelConsumption","updateTimer","lastUpdateTime","maxHull","maxShields","maxPower","maxFuel","maxHeat","enginePower","engineEfficiency","shieldRegenRate","shieldPowerDrain","weaponCount","weaponPower","weaponHeatGeneration","status","hull","shields","power","heat","enginesOnline","shieldsOnline","weaponsOnline","lifeSupport","warpDrive","shieldStrength","weaponAccuracy","sensorRange","powerAllocation","engines","weapons","sensors","section","updatePowerConsumption","updateThermalManagement","updateShields","updateFuelConsumption","updateSystemEfficiency","checkCriticalSystems","updatePerformanceModifiers","totalConsumption","handlePowerFailure","handleOverheat","regenRate","consumption","emergencyShutdown","engineDamage","getSectionDamageLevel","coreDamage","weaponDamage","bridgeDamage","heatPenalty","powerLevel","powerPenalty","onCriticalDamage","onPowerFailure","onOverheat","applyDamage","damageType","actualDamage","shieldAbsorption","addDamageReport","severity","calculateDamageSeverity","systemsAffected","getAffectedSystems","damageReport","repairCost","calculateRepairCost","repairTime","calculateRepairTime","sectionDamage","onSystemDamage","bow","stern","port","starboard","core","bridge","engineering","minor","metal","electronics","crystals","moderate","major","nanobots","destroyed","damages","totalDamage","repairDamage","damageIndex","hasEnoughResources","onSystemRepaired","available","required","setPowerAllocation","allocation","total","reduce","sum","val","toggleSystem","getSystemState","getStatus","getPowerAllocation","getDamageReports","getDiagnostics","totalDamageReports","reports","criticalSystems","getCriticalSystems","addFuel","addPower","emergencyRepair","WarpDrive","stateTimer","isCharging","isActive","accretionParticles","blackHoleRadius","shipPosition","shipSize","originalSpeed","PHASE_PARTICLE_ABSORPTION","PHASE_BLACK_HOLE_GROWTH","PHASE_ACCRETION_FORMATION","PHASE_SHUTDOWN","particleIntensity","blackHoleIntensity","accretionIntensity","distortionIntensity","speedMultiplier","energyCost","particleCount","maxRange","cooldownTime","activateWarp","initializeParticles","onWarpStart","deactivateWarp","angle","colors","life","absorbed","updateChargingPhase","updateBlackHoleGrowth","updateAccretionFormation","updateActiveWarp","updateDeactivation","updateParticles","updateAccretionDisk","updateSpaceDistortion","particle","toCenter","initializeAccretionDisk","totalGrowthProgress","onBlackHoleFormed","onSpaceDistorted","reverseProgress","addDissolutionParticles","clearAllEffects","onWarpEnd","getAccretionColor","fromCenter","p","renderSpaceDistortion","renderParticles","renderAccretionDisk","renderBlackHole","alpha","glowRadius","glowColor","baseRadius","getState","isWarpActive","isWarpCharging","getWarpProgress","getSpaceDistortion","PlayerShip","physics","thrustLevel","engineSoundId","thrustParticles","maxHealth","rotationSpeed","maxVelocity","currentFuel","physicsObject","other","handleCollision","shipSystems","warpSpeedMultiplier","updateRotation","updateMovement","updateThrustParticles","updateAudio","consumeFuel","handleWarpInput","thrustInput","rotationInput","systemStatus","thrustDirection","thrustForce","createThrustParticles","currentSpeed","maxLife","collisionDamage","takeDamage","destroy","heal","fireWeapon","spawnOffset","spawnX","spawnY","projectileSpeed","projectileVelocity","projectile","renderThrustParticles","getShipData","getPhysicsObject","getPosition","getVelocity","getRotation","isAlive","getSystemStatus","getShipSystems","Core","getWarpDrive","getWarpState","renderWarpEffects","PlanetType","GalaxyGenerator","stars","starSystems","galaxyMap","seed","starCount","spiralArms","armTightness","coreSize","starDensity","SeededRandom","generateGalaxy","generateStarPositions","generateStarProperties","generateStarSystems","generateAnomalies","endTime","systems","generateSpiralPosition","starId","star","generateStarName","luminosity","temperature","age","metallicity","normalizedRadius","next","spiralAngle","angleNoise","radiusNoise","finalAngle","finalRadius","prefixes","suffixes","suffix","number","distanceFromCore","coreInfluence","range","generateStellarMass","getStarTypeFromMass","calculateLuminosity","calculateTemperature","calculateRadius","generateStellarAge","getStarColor","O","B","A","F","G","K","M","lifetime","systemCount","generateStarSystem","asteroidBelts","habitableZoneInner","habitableZoneOuter","systemAge","planetCount","currentOrbit","generatePlanet","innerRadius","outerRadius","density","composition","choice","orbitDistance","planetId","planetType","generatePlanetMass","calculatePlanetRadius","calculatePlanetTemperature","numberToRoman","orbitPeriod","calculateOrbitPeriod","hasAtmosphere","determineAtmosphere","hasRings","moons","surfaceType","determineSurfaceType","surfaceColor","generateSurfaceColor","hasWater","hasLife","atmosphereType","determineAtmosphereType","moonCount","generateMoonCount","generateMoon","solarConstant","starMass","String","fromCharCode","tidallyLocked","num","symbols","getStarsInRadius","getStarSystem","getAllStars","getAllSystems","getGalaxyConfig","array","integer","GalaxyPersistence","cachedSaveData","loadedChunks","saveGalaxy","generator","playerData","explorationData","exploredSystems","discoveredPlanets","visitedLocations","reputation","tradeRoutes","compressStarData","compressSystemData","saveToStorage","calculateSaveSize","loadGalaxy","validateSaveData","restoreGalaxyData","loadGalaxyChunk","options","chunkKey","getChunkKey","limitedStars","maxSystems","includeUnexplored","isSystemExplored","pos","temp","compressPlanetData","explored","orbit","hasAtmo","saveToWebStorage","saveToFileSystem","saveToCordovaFile","loadFromWebStorage","loadFromFileSystem","loadFromCordovaFile","saveToIndexedDB","localStorageError","loadFromIndexedDB","Promise","resolve","reject","request","indexedDB","open","onerror","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","onsuccess","putRequest","transaction","objectStore","put","getRequest","split","bytes","Blob","systemId","clearCache","getStorageStats","cacheSize","lastSaveTime","exportGalaxy","importGalaxy","GalaxyManager","loadedSystems","nearbyStars","autoSaveTimer","chunkLoadRadius","maxLoadedSystems","galaxyConfig","persistence","currentSystemId","homeSystemId","totalSystemsVisited","totalPlanetsExplored","totalDistanceTraveled","galaxyDiscoveryProgress","savedData","setupNewGame","loadCurrentArea","setupAutoSave","centerStars","startingSystem","exploreSystem","chunkOptions","nearbySystems","travelToSystem","targetSystem","currentPos","coordinates","discoverPlanet","updateExplorationProgress","totalSystems","getNearbyStars","getLoadedSystems","getCurrentSystem","getSystem","findSystemsInRadius","isPlanetDiscovered","getGalaxyStats","totalStars","allSystems","distanceTraveled","currentSystemName","explorationProgress","clearInterval","setInterval","getPlayerData","getExplorationData","searchSystems","query","lowercaseQuery","getSystemDistance","systemId1","systemId2","system1","system2","getHomeSystem","updateConfig","newConfig","isGalaxyInitialized","CockpitStatusBar","interactions","panels","interactiveElements","flickerTimer","scanlineOffset","glitchTimer","hoveredElement","selectedElement","isDragging","damageReports","cargoLoad","radarZoom","radarMode","screenWidth","screenHeight","panelHeight","panelSpacing","enableInteraction","crtEffects","setupPanels","setupInteractiveElements","panelWidth","startY","title","setupSystemsPanel","setupControlPanel","setupDamagePanel","setupWeaponsPanel","setupRadarPanel","panel","addElement","label","mousePos","element","isPointInElement","handleElementClick","handleSliderDrag","elementId","handleButtonClick","handleToggleClick","onInventoryOpen","onCodexOpen","onResearchOpen","onCrewOpen","onGalaxyMapOpen","onRadarZoom","systemName","engines_toggle","shields_toggle","weapons_toggle","warp_toggle","radar_mode","onSystemToggle","localX","percentage","onPowerAllocationChange","renderPanelBase","renderPanel","renderCRTEffects","baseY","baseHeight","panelIndex","renderSystemsPanel","renderControlPanel","renderDamagePanel","renderWeaponsPanel","renderRadarPanel","renderStatusBar","renderWarningLight","renderToggle","thrustSlider","shieldSlider","renderSlider","renderDamageDisplay","renderRadarDisplay","isHeat","fillWidth","fillColor","bgColor","sliderPos","isHovered","shipX","shipY","maxRadius","updateSystemStatus","updateDamageReports","updateCargoLoad","CelestialBody","orbitRadius","orbitSpeed","orbitAngle","currentRotation","interactionZones","mineralDeposits","isDiscovered","isScanned","isLanded","resourcesDepleted","planetData","starData","moonData","initializeFromData","generateInteractionZones","generateResources","updatePlanetVisuals","getDarkStarColor","Terrestrial","atmosphereColor","Ocean","Desert","Volcanic","Frozen","GasGiant","ringColor","IceGiant","Toxic","bodyId","canEnter","requirements","canLand","canShipLand","getResourceTypes","resourceType","richness","accessibility","extractionDifficulty","generateSurfaceConditions","baseResources","gravity","radiation","weather","landingDifficulty","surfaceConditions","orbitCenter","cameraPosition","getDistanceFrom","renderDistance","screenPos","baseSize","scaledSize","minPixelSize","maxPixelSize","showOrbitLines","renderOrbitLine","atmoSize","renderRings","renderSurfaceDetails","renderStarGlow","centerScreen","orbitColor","featureX","featureY","featureColor","checkInteraction","performMining","miningEfficiency","interaction","availableResources","deposit","resource","extractedQuantity","quantity","quality","depletion","performScan","atmosphere","atmosphereData","biologicalSigns","anomalies","setOrbit","getInteractionInfo","InteractionPanel","isVisible","currentBody","currentZone","opacity","targetOpacity","panelX","panelY","hoveredButton","selectedButton","bodyInfo","scanData","miningResults","enableAnimations","fadeSpeed","showInteraction","body","calculatePanelPosition","setupButtons","hideInteraction","bodyPosition","screenBodyX","screenBodyY","buttonHeight","currentY","isPointInButton","buttonId","onEnterOrbit","onLand","onContinueFlight","onPerformScan","onStartMining","mineButton","borderColor","renderPanelBorder","renderBodyInfo","renderScanData","renderMiningResults","highlightColor","join","lastResult","buttonAlpha","textY","scanlineColor","isInteractionVisible","getCurrentBody","CelestialManager","panelInteractions","bodies","systemCenter","nearbyBodies","currentInteraction","frameCount","interactionDistance","enableInteractions","celestialBodyConfig","orbitLineOpacity","animationSpeed","interactionPanel","loadSystem","systemConfig","systemData","clearSystem","createStar","createMoon","setupOrbitalMechanics","getPlanetColor","parentPlanet","parentBody","moon","originalSetOrbit","bind","updateInteractions","closestInteraction","closestDistance","Infinity","sort","distA","getBody","getAllBodies","getNearbyBodies","getCurrentInteraction","discoverAllBodies","getSystemStats","discoveredBodies","scannedBodies","bodyCount","hasActiveInteraction","performAction","getActiveBodies","SpaceBackground","galaxyBand","nebulaClouds","isDistorted","distortionData","time","starLayers","parallaxStrength","enableDistortion","galaxyBandIntensity","nebulaOpacity","generateBackground","generateStars","generateGalaxyBand","generateNebulae","getStarSize","originalPosition","twinkle","bandWidth","bandOffset","getGalaxyBandColor","getNebulaColor","applyWarpDistortion","distortStars","restoreFromDistortion","gradualRestore","restoreAmount","restoreStarsGradually","pullStrength","renderNebulae","renderGalaxyBand","renderStarLayer","nebula","screenX","screenY","pixelCount","renderStar","parallaxFactor","halfCore","dimColor","updateWarpDistortion","galaxyBandStars","nebulaCount","regenerateBackground","ItemType","ItemRarity","ItemDatabase","items","recipes","categories","initializeDatabase","totalItems","generateComponents","generateEquipment","generateWeapons","generateTools","generateConsumables","generateBlueprints","generateArtifacts","description","category","rarity","maxStack","purity","radioactivity","stability","res","createItem","iconColor","isUnique","isTradeable","isConsumable","addItem","durability","efficiency","defense","comp","eq","wp","tool","cons","bp","lore","art","loreText","generateItemSprite","baseColor","pixels","drawResourceSprite","drawComponentSprite","drawEquipmentSprite","drawWeaponSprite","drawToolSprite","drawConsumableSprite","drawBlueprintSprite","drawArtifactSprite","darkColor","darkenColor","lightColor","lightenColor","recipe","getItemsByCategory","getItemsByType","getItemsByRarity","getAllItems","getRecipe","itemId","searchItems","lowerQuery","generateRandomItem","candidateItems","rarityWeights","common","uncommon","rare","epic","legendary","artifact","totalWeight","weight","currentWeight","selectedRarity","renderItemSprite","pixel","itemsByType","itemsByRarity","InventoryManager","itemDatabase","slots","totalVolume","selectedSlot","draggedItem","sortOptions","by","descending","groupByType","slotSize","slotSpacing","maxSlots","gridWidth","gridHeight","maxWeight","maxVolume","allowStacking","initializeSlots","locked","reserved","remainingQuantity","canAdd","emptySlot","findEmptySlot","onInventoryFull","stackSize","addedWeight","addedVolume","onWeightExceeded","onVolumeExceeded","Equipment","onItemAdded","canRemove","removedWeight","removedVolume","removedItem","onItemRemoved","moveItem","fromSlot","toSlot","canStack","getItemCount","hasItem","getFilteredItems","searchText","search","comparison","localeCompare","rarityOrder","compactInventory","autoSort","aRarity","bRarity","usedSlots","uniqueItems","totalSlots","itemCount","fillPercentage","weightPercentage","volumePercentage","renderBackground","renderHeader","renderGrid","renderItems","renderSelection","renderDraggedItem","buttonY","gridStartX","gridStartY","slotX","slotY","slotIndex","spriteX","spriteY","quantityText","rarityColor","getRarityColor","conditionWidth","conditionColor","Common","Uncommon","Rare","Epic","Legendary","Artifact","statsY","setVisible","visible","isInventoryVisible","selectSlot","onSlotSelected","getSelectedSlot","useSelectedItem","setFilter","clearFilter","setSortOptions","setSlotLocked","setSlotReserved","clearInventory","saveState","modifiers","loadState","slotData","CraftingSystem","inventory","stations","activeAttempts","knownRecipes","selectedStation","selectedRecipe","initializeStations","initializeBasicRecipes","availableRecipes","energyRequired","station","basicRecipes","requiredItems","metal_iron","crystal_quartz","craftingTime","successRate","comp_circuit","gas_hydrogen","metal_titanium","crystal_dilithium","basicStation","advancedStation","updateItemRecipes","targetItem","findTargetItemForRecipe","recipeId","craft_circuit_from_metal","craft_repair_kit","craft_energy_cell","craft_shield_emitter","craft_plasma_conduit","startCrafting","stationId","onCraftingFailed","attempt","onCraftingStarted","completedAttempts","completeCrafting","onCraftingCompleted","returnQuantity","ceil","learnRecipe","getAvailableRecipes","canCraftRecipe","canCraft","missingItems","hasStation","hasAllItems","getCraftingProgress","elapsed","timeRemaining","itemName","renderCraftingPanel","renderCraftingProgress","stationY","stationColor","statusText","recipeY","craftability","missingText","count","progressItems","progressY","progressX","isCraftingVisible","selectStation","getSelectedStation","setStationActive","active","activeStations","s","totalStations","activeCrafting","stationData","WeaponType","DamageType","WeaponSystem","projectiles","weaponStates","nextProjectileId","targetingMode","currentTarget","targetPosition","targets","addWeapon","weapon","chargeProgress","lastFired","ammo","ammoCapacity","isOverheated","cooldownEnd","removeWeapon","weaponId","projId","sourcePosition","fireRate","onAmmoEmpty","chargeTime","finalTargetPos","calculateFiringDirection","spread","onWeaponOverheat","onWeaponFired","targetDistance","calculateDistance","sourcePos","targetPos","projectileId","isHoming","homingStrength","getProjectileSize","targetId","trail","weaponType","spreadRad","updateWeaponStates","updateProjectiles","checkProjectileHits","cleanupProjectiles","updateHomingProjectile","target","predictedPos","targetDirection","currentDirection","homingFactor","newDirection","newLength","calculateDamage","finalDamage","criticalHit","penetrated","shieldsHit","hullHit","onProjectileHit","setTargetingMode","mode","setTargetPosition","setTarget","updateTarget","removeTarget","getWeapon","getAllWeapons","reloadWeapon","renderProjectiles","renderWeaponCharges","trailColor","getProjectileColor","pos1","pos2","weaponsByType","totalWeapons","activeProjectiles","targetsTracked","clearProjectiles","clearTargets","AIBehavior","ShipClass","EnemyAI","weaponSystem","enemies","playerPosition","playerVelocity","playerSize","factionRelations","initializeFactions","factions","faction1","faction2","relation","spawnEnemy","enemy","lastDecisionTime","lastShotTime","weaponCooldowns","waypoint","patrolCenter","patrolRadius","lastDamageTime","onEnemySpawned","shipClass","faction","behavior","updatePlayer","updateEnemy","cleanupDeadEnemies","reactionTime","makeDecision","executeState","updateCombat","distanceToPlayer","inRange","engagementRange","hasLineOfSight","preferredRange","changeState","oldState","generatePatrolWaypoint","generateRetreatWaypoint","onEnemyStateChanged","executePatrol","executePursue","executeAttack","executeEvade","executeRetreat","executeCircleStrafe","executeRamming","moveToward","predictedPlayerPos","predictPlayerPosition","retreatPoint","calculateRetreatPoint","evasionPoint","calculateEvasionPoint","toPlayer","strafeDirection","targetPoint","desiredSpeed","maxSpeed","desiredVelocity","targetRotation","atan2","lerpAngle","turnRate","weaponConfig","cooldownKey","accuracy","intelligence","enemyId","armor","shieldDamage","onEnemyDamaged","destroyEnemy","onEnemyDestroyed","awayFromPlayer","away","perpendicular","diff","renderEnemy","getShipColor","points","getTrianglePoints","drawTriangle","drawShip","drawHealthBar","drawStateIndicator","pirates","aliens","rebels","corporation","military","halfWidth","halfHeight","corners","frontX","frontY","barWidth","barY","healthPercent","healthWidth","healthColor","shieldWidth","patrol","pursue","evade","retreat","ramming","getAllEnemies","getEnemy","enemiesByFaction","enemiesByState","aliveCount","totalEnemies","aliveEnemies","clearEnemies","CombatManager","activeEncounters","combatStats","totalDamageDealt","totalDamageReceived","enemiesDestroyed","shotsHit","shotsFired","encountersCompleted","experienceGained","playerHull","playerMaxHull","handleProjectileHit","enemyAI","handleEnemyDestroyed","initializePlayerWeapons","basicLaser","Energy","mountPoint","hardpointSize","basicProjectile","Projectile","Kinetic","reloadTime","cannon","onPlayerDamaged","hullRemaining","onCombatStatsUpdated","rewards","calculateRewards","checkEncounterCompletion","enemyConfig","Drone","Fighter","Corvette","Frigate","Destroyer","Cruiser","Battleship","randomItem","possibleLoot","lootId","lootItem","startEncounter","encounter","enemyConfigs","spawnPos","spawnPositions","onEncounterStarted","encounterId","completionTime","onEncounterCompleted","generateEncounters","encounters","createEnemyConfig","Aggressive","Kamikaze","credits","dropRate","Evasive","Defensive","Support","classStats","createBasicWeapon","Missile","Plasma","aggression","baseStats","Beam","Torpedo","firePlayerWeapon","startRandomEncounter","randomIndex","getCombatStats","getActiveEncounters","getPlayerWeapons","w","startsWith","getEnemies","clearCombat","resetStats","AttributeType","PlayerProgression","levelExperienceTable","skillExperienceTable","generateExperienceTables","initializeCharacter","initializeSkills","initializeAchievements","baseXP","multiplier","character","experienceToNext","skillPoints","attributePoints","totalPlayTime","enemiesDefeated","systemsExplored","creditsEarned","itemsCrafted","skills","attributes","achievements","attrType","baseValue","maxLevel","bonuses","prerequisite","prerequisiteLevel","skill","current","unlocked","hidden","achievement","addExperience","levelUp","skillPointsGained","attributePointsGained","onLevelUp","addSkillExperience","skillId","requiredXP","onSkillLevelUp","levelUpSkill","prereqSkill","cost","increaseAttribute","attribute","oldValue","recalculateAttribute","onAttributeChanged","addAttributeModifier","modifier","removeAttributeModifier","mod","updateAchievementProgress","req","isAchievementCompleted","unlockAchievement","every","achievementId","unlockedDate","reward","onAchievementUnlocked","updateStatistics","playTime","getSkillBonus","bonusType","bonus","getCategoryBonus","getAttributeValue","getCharacterSheet","getAvailableSkills","getUnlockedAchievements","getAchievementProgress","saveCharacter","loadCharacter","getProgressionStats","totalSkillLevels","highestSkillLevel","totalAttributePoints","attr","achievementsUnlocked","totalAchievements","maxSkillLevels","progressionPercentage","ResearchField","ResearchSystem","projects","facilities","scientists","totalResearchPoints","researchMultipliers","initializeResearchMultipliers","initializeTechnologies","initializeFacilities","initializeScientists","field","tier","researchCost","researchTime","prerequisites","requiredFacilities","unlocks","isUnlocked","isResearching","researchProgress","researchStartTime","tech","specialization","maxProjects","isOperational","currentProjects","maintenanceLevel","upgradeLevel","facility","expertise","isAvailable","fatigue","morale","scientist","startResearch","technologyId","facilityId","scientistIds","technology","prereq","prereqTech","missingPrereq","specializations","validScientists","scientistId","assignedProject","assignedFacility","scientistBonus","fieldMultiplier","estimatedTime","projectId","project","assignedScientists","estimatedCompletion","estimatedHours","totalDuration","completeResearch","makeRandomDiscovery","completedTime","applyTechnologyUnlocks","onTechnologyUnlocked","onResearchCompleted","getTierUnlockCount","onBreakthroughAchieved","unlock","unlockFacility","applyUpgrade","unlockAbility","unlockRecipe","facilityType","quantum_lab","bio_lab","testing_chamber","observatory","upgradeType","abilityId","researchBonus","grantsResources","unlocksTechnology","discovery","discoveryObj","discoveryTime","onDiscoveryMade","getAvailableTechnologies","prereqId","getActiveProjects","getUnlockedTechnologies","getTechnology","getFacilities","getAvailableScientists","getRecentDiscoveries","limit","getResearchStats","fieldProgress","totalTechnologies","unlockedTechnologies","activeProjects","cancelResearch","saveResearchData","loadResearchData","CrewSkill","CrewManagement","crew","traits","shipMorale","disciplineLevel","crewQuarters","managementEvents","initializeTraits","initializeStartingCrew","effects","trait","maxCrew","requiredSkills","assignedCrew","role","species","preferredStation","crewData","createCrewMember","addCrewMember","traitIds","crewId","substr","allSkills","memberTraits","traitId","effect","stress","workEfficiency","preferences","preferredShift","personalityType","workStyle","relationships","rank","commendations","background","homeworld","generateHomeworld","joinDate","roleBackgrounds","captain","pilot","engineer","security","medic","communications","homeworlds","Human","Centaurian","Vulcan","Andorian","speciesWorlds","existingCrew","relationship","calculateInitialRelationship","onCrewJoined","crew1","crew2","assignCrewToStation","currentStation","removeCrewFromStation","calculateWorkEfficiency","updateStationEfficiency","skillTotal","skillCount","skillLevel","totalEfficiency","crewCount","optimalCrew","onStationEfficiencyChanged","updateCrewStatus","updateRelationships","checkCrewEvents","updateShipMorale","stressChange","relationshipStress","relationshipCount","avgRelationship","moraleChange","crewArray","improvement","modifyRelationship","change","crewId1","crewId2","current1","current2","generateCrewEvent","eventTypes","event","generateConflictEvent","generateAchievementEvent","generateDiscoveryEvent","generatePromotionEvent","onCrewEvent","involvedCrew","conflictTypes","conflictType","resolved","eligibleCrew","totalMorale","averageMorale","onMoraleAlert","getCrewMember","getAllCrew","getCrewByRole","getCrewByStation","getStation","getAllStations","getRecentEvents","getCrewStats","totalCrew","totalHealth","totalFatigue","totalStress","roleDistribution","stationEfficiency","averageHealth","averageFatigue","averageStress","saveCrewData","loadCrewData","DiplomacySystem","treaties","negotiations","diplomaticActions","PLAYER_FACTION_ID","initializePlayerFaction","government","ideology","stance","trustLevel","territory","economic","technological","influence","recentActions","personality","cooperation","trustworthiness","pride","greed","xenophobia","lastContact","homeSystem","playerFaction","modifyReputation","factionId","reason","oldReputation","calculateDiplomaticStance","recordDiplomaticAction","actor","reputationChange","successful","onReputationChanged","actionData","targetFaction","startNegotiation","playerOffer","playerSkill","crewBonus","sessionId","reputationModifier","session","participants","currentOffer","proposer","terms","totalValue","calculateOfferValue","priority","calculateOfferPriority","rounds","maxRounds","counterOffer","generateCounterOffer","onNegotiationStarted","playerValue","aiValue","term","playerOfferValue","factionDemand","calculateFactionDemand","counterTerms","difference","giver","receiver","baseDemand","powerRatio","continueNegotiation","acceptCounter","newOffer","applyNegotiationResults","onNegotiationCompleted","acceptChance","calculateAIAcceptanceChance","acceptanceChance","agreedOffer","otherFaction","generateRandomEncounter","activeFactions","f","encounterTypes","encounterType","location","generateEncounterDescription","availableActions","generateEncounterActions","consequences","onEncounterGenerated","descriptions","routine_patrol","distress_call","trade_opportunity","territorial_dispute","first_contact","typeDescriptions","baseActions","skillCheck","resolveEncounterAction","actionId","skillValue","consequence","resolution","getFaction","getAllFactions","getPlayerFaction","getActiveNegotiations","n","getRecentDiplomaticActions","getDiplomacyStats","allied","hostile","avgReputation","totalFactions","alliedFactions","hostileFactions","activeNegotiations","activeTreaties","totalEncounters","averageReputation","saveDiplomacyData","loadDiplomacyData","AlienSpecies","AlienAI","speciesProfiles","knowledgeBase","encounterPatterns","adaptiveBehaviors","initializeSpeciesProfiles","initializeKnowledgeBase","profiles","physiology","lifespan","environment","culture","taboos","rituals","artForms","primary","secondary","linguisticComplexity","translationDifficulty","emotionalRange","weaknesses","uniqueTech","energySource","psychology","emotionalStability","socialComplexity","memoryType","decisionMaking","behaviorPatterns","aggressionTriggers","friendshipFactors","fearFactors","profile","knowledge","physicalTraits","culturalTraits","technologicalCapabilities","communicationMethods","languageComprehension","culturalUnderstanding","technologicalUnderstanding","psychologicalProfile","totalContacts","successfulCommunications","hostileEncounters","peacefulEncounters","researchPoints","discoveredSecrets","lastUpdate","generateEncounter","isFirstContact","phase","calculateInitialIntensity","suspicion","calculateInitialSuspicion","interest","calculateInitialInterest","communicationEstablished","languageBarrier","translationProgress","actions","responses","success","knowledge_gained","technology_exchanged","cultural_insights","onFirstContact","firstContact","positiveRatio","processPlayerAction","actionType","generateActionDescription","complexity","calculateActionComplexity","risk","calculateActionRisk","expectedResponse","predictAlienResponse","culturalContext","response","generateAlienResponse","updateEncounterState","scan","communicate","approach","gift","demonstrate","threaten","probe","responseType","culturalReason","evaluation","evaluateAction","generateResponseDescription","culturalFactor","psychologicalState","determineAlienPsychologicalState","triggers","checkCulturalTriggers","positive","trigger","actionMatchesTrigger","actionMatchesFactor","threat_display","territorial_intrusion","aggressive_scanning","communication_disruption","unknown_entities","peaceful_intentions","cultural_exchange","respect_for_knowledge","technological_sharing","mutual_benefit","speciesName","negative","curious","confused","neutral","states","onCommunicationBreakthrough","updateEncounterPhase","updateKnowledgeBase","oldPhase","onCulturalInsight","getEncounter","getSpeciesProfile","getSpeciesKnowledge","getKnownSpecies","completeEncounter","awardEncounterRewards","knowledgeGained","availableTech","newTech","onTechnologyDiscovered","newSecret","getAlienAIStats","knownSpecies","successfulContacts","totalKnowledge","saveAlienAIData","loadAlienAIData","PerformanceMonitor","metrics","maxHistory","frameStartTime","lastFrameTime","fpsHistory","fpsCounter","fpsTimer","memoryObserver","lastOptimizationCheck","optimizationInterval","thresholds","getDefaultThresholds","getDefaultSettings","currentMetrics","createEmptyMetrics","setupMemoryObserver","startMonitoring","autoOptimize","enableAutoOptimization","PerformanceObserver","list","entryType","observe","entryTypes","updateFrameTiming","updateMemoryUsage","updateSystemMetrics","updateCurrentMetrics","storeMetrics","checkThresholds","performOptimizationCheck","onPerformanceUpdate","frameTime","fps","getAverageFPS","memory","memoryUsed","usedJSHeapSize","memoryTotal","totalJSHeapSize","memoryPercentage","estimateMemoryUsage","estimateTotalMemory","cpuUsage","getBattery","then","battery","batteryLevel","thermalState","estimateThermalState","poor","onThresholdExceeded","recommendations","generateOptimizationRecommendations","onOptimizationRecommended","rec","automaticApply","applyRecommendation","acceptable","particleQuality","postProcessing","high","maxAudioSources","maxRenderDistance","mobileLowPowerMode","audioQuality","recommendation","onSettingsChanged","excellent","good","low","medium","baseSettings","shadowQuality","bloom","antiAliasing","lodBias","physicsSteps","collisionComplexity","adaptiveQuality","activeEntities","textureMemory","setGameMetrics","getCurrentMetrics","getMetricsHistory","cutoff","m","getPerformanceSummary","recentMetrics","averageFPS","minFPS","maxFPS","averageFrameTime","averageMemoryUsage","performanceGrade","updateSettings","newSettings","changes","getSettings","disconnect","ParticleSystem","emitters","nextParticleId","nextEmitterId","maxParticles","qualityScale","enableTrails","enableBloom","pixelPerfect","updateEmitters","cleanupParticles","emitter","onEmitterCompleted","emissionRate","particlesToEmit","fullParticles","fractionalChance","emitParticle","burstCount","oldestId","particleId","spawnPosition","calculateSpawnPosition","calculateSpawnVelocity","randomBetween","sizeRange","generateParticleColor","colorVariation","maxAge","lifeRange","getParticleGravity","bounce","getParticleBounce","getParticleFriction","addParticleAnimations","onParticleSpawned","shape","shapeData","coneAngle","coneRadius","velocityRange","variation","spark","smoke","debris","starfield","warp_trail","beam","variationAmount","sizeAnimation","startSize","endSize","alphaAnimation","startAlpha","endAlpha","dt","updateParticlePhysics","updateParticleAnimations","applyEasing","lerp","colorAnimation","startColor","endColor","onParticleDied","createLaserBeam","updateEmitterPosition","stopEmitter","renderParticle","activeParticles","activeEmitters","Game","galaxyManager","cockpitStatusBar","celestialManager","spaceBackground","inventoryManager","craftingSystem","combatManager","playerProgression","researchSystem","crewManagement","diplomacySystem","alienAI","proceduralAudio","performanceMonitor","particleSystem","isRunning","isPaused","lastTime","lastFpsUpdate","performanceStats","renderTime","updateTime","memoryUsage","perfLogger","platformConfig","enableDebug","enablePerformanceMonitoring","initializeSystems","stateManager","zoomLevel","oldRep","newRep","method","insight","metric","threshold","Playing","gameLoop","updatePerformanceStats","handleError","requestAnimationFrame","Engineering","Weapons","currentStatus","Engines","warpState","playerPos","randomFaction","Laser","Explosion","tracks","nextTrack","summary","randomCrew","availableStation","Paused","warpDistortion","audioStats","renderDebugInfo","debugInfo","pause","getPaused","starObj","planetPos","planetObj","planet1","planet2","recoveryError","saveGame","getIsPaused","isGameRunning","getPerformanceStats","getRenderer","getInput","getPhysics","getAudio","getStateManager","game","LoadingManager","currentProgress","progressElement","getElementById","textElement","updateProgress","textContent","hide","loadingScreen","classList","display","initializeGame","loader","adjustCanvasForMobile","preloadCriticalResources","loadingText","loadingBar","errorDetails","createElement","cssText","innerHTML","appendChild","showErrorScreen","containerRect","targetRatio","readyState"],"mappings":"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"}